# vi: ft=dosini
[main]

# Enables context sensitive auto-completion. If this is disabled the all
# possible completions will be listed.
smart_completion = True

# Multi-line mode allows breaking up the sql statements into multiple lines. If
# this is set to True, then the end of the statements must have a semi-colon.
# If this is set to False then sql statements can't be split into multiple
# lines. End of line (return) is considered as the end of the statement.
multi_line = True

# Destructive warning mode will alert you before executing a sql statement
# that may cause harm to the database such as "drop table", "drop database"
# or "shutdown".
destructive_warning = True

# log_file location.
log_file = ~/.mycli.log

# Default log level. Possible values: "CRITICAL", "ERROR", "WARNING", "INFO"
# and "DEBUG". "NONE" disables logging.
log_level = INFO

# Log every query and its results to a file. Enable this by uncommenting the
# line below.
# audit_log = ~/.mycli-audit.log

# Timing of sql statments and table rendering.
timing = True

# Table format. Possible values: ascii, double, github,
# psql, plain, simple, grid, fancy_grid, pipe, orgtbl, rst, mediawiki, html,
# latex, latex_booktabs, textile, moinmoin, jira, vertical, tsv, csv.
# Recommended: ascii
table_format = psql

# Syntax coloring style. Possible values (many support the "-dark" suffix):
# manni, igor, xcode, vim, autumn, vs, rrt, native, perldoc, borland, tango, emacs,
# friendly, monokai, paraiso, colorful, murphy, bw, pastie, paraiso, trac, default,
# fruity.
# Screenshots at http://mycli.net/syntax
# Can be further modified in [colors]
syntax_style = paraiso-dark

# Keybindings: Possible values: emacs, vi.
# Emacs mode: Ctrl-A is home, Ctrl-E is end. All emacs keybindings are available in the REPL.
# When Vi mode is enabled you can use modal editing features offered by Vi in the REPL.
key_bindings = vi

# Enabling this option will show the suggestions in a wider menu. Thus more items are suggested.
wider_completion_menu = False

# MySQL prompt
# \D - The full current date
# \d - Database name
# \h - Hostname of the server
# \m - Minutes of the current time
# \n - Newline
# \P - AM/PM
# \p - Port
# \R - The current time, in 24-hour military time (0–23)
# \r - The current time, standard 12-hour time (1–12)
# \s - Seconds of the current time
# \t - Product type (Percona, MySQL, MariaDB)
# \A - DSN alias name (from the [alias_dsn] section)
# \u - Username
# \x1b[...m - insert ANSI escape sequence
# prompt = '\t \u@\h:\d> '
prompt = '\x1b[94m\t \x1b[93m\u@\d\x1b[91m> '
prompt_continuation = '->'

# Skip intro info on startup and outro info on exit
less_chatty = False

# Use alias from --login-path instead of host name in prompt
login_path_as_host = False

# Cause result sets to be displayed vertically if they are too wide for the current window,
# and using normal tabular format otherwise. (This applies to statements terminated by ; or \G.)
auto_vertical_output = False

# keyword casing preference. Possible values "lower", "upper", "auto"
; keyword_casing = auto
keyword_casing = upper

# disabled pager on startup
enable_pager = True

# Custom colors for the completion menu, toolbar, etc.
[colors]

completion-menu.completion.current = 'bg:#e2cca9 #000000'
completion-menu.completion = 'bg:#d3869b #ffffff'
completion-menu.meta.completion.current = 'bg:#44aaaa #000000'
completion-menu.meta.completion = 'bg:#448888 #ffffff'
completion-menu.multi-column-meta = 'bg:#255b79 #000000'
scrollbar.arrow = 'bg:#003333'
scrollbar = 'bg:#44aaaa'
selected = '#e2cca9 bg:#6666aa'
search = '#e2cca9 bg:#4444aa'
search.current = '#e2cca9 bg:#b0b846'
bottom-toolbar = 'bg:#222222 #aaaaaa'
bottom-toolbar.off = 'bg:#222222 #888888'
bottom-toolbar.on = 'bg:#222222 #e2cca9'
search-toolbar = 'noinherit bold'
search-toolbar.text = 'nobold'
system-toolbar = 'noinherit bold'
arg-toolbar = 'noinherit bold'
arg-toolbar.text = 'nobold'
bottom-toolbar.transaction.valid = 'bg:#222222 #b0b846 bold'
bottom-toolbar.transaction.failed = 'bg:#222222 #ea6962 bold'

# style classes for colored table output
output.header = "#b0b846 bold"
output.odd-row = ""
output.even-row = ""
output.null = "#808080"

# SQL syntax highlighting overrides
# sql.comment = 'italic #408080'
# sql.comment.multi-line = ''
# sql.comment.single-line = ''
# sql.comment.optimizer-hint = ''
# sql.escape = 'border:#FF0000'
# sql.keyword = 'bold #008000'
# sql.datatype = 'nobold #B00040'
# sql.literal = ''
# sql.literal.date = ''
# sql.symbol = ''
# sql.quoted-schema-object = ''
# sql.quoted-schema-object.escape = ''
# sql.constant = '#880000'
# sql.function = '#0000FF'
# sql.variable = '#19177C'
# sql.number = '#666666'
# sql.number.binary = ''
# sql.number.float = ''
# sql.number.hex = ''
# sql.number.integer = ''
# sql.operator = '#666666'
# sql.punctuation = ''
# sql.string = '#BA2121'
# sql.string.double-quouted = ''
# sql.string.escape = 'bold #BB6622'
# sql.string.single-quoted = ''
# sql.whitespace = ''

# Favorite queries.
[favorite_queries]
addindex = '''ALTER TABLE `$1`
ADD INDEX `IDX_$1_$2` (`$2` ASC)'''

selectnthbiggest = '''SELECT *
FROM $1
WHERE $2 = (SELECT $2 FROM $1 GROUP BY $2 ORDER BY $2 DESC LIMIT $3 OFFSET 1)
'''

ifnull = '''select ifnull(
(select $1 from $2),
Null)
'''

rank = '''select
  $1,
  $2,
  dense_rank() over(partition by $1 order by $2 desc) as r
from $3
'''

maxgroup = '''select e1.id, e1.$2
from $1 as e1 left outer join $1 as e2
on e1.id = e2.id AND e1.$2 < e2.$2
where e2.$2 is NULL
'''

topingroup = '''select e.id, e.$2
from $1 as t
where (
  select count(distinct $2)
    from $1 as t2
    where t2.id = t.id AND t2.$2 >= t.$2) <= $3
'''

rownumber = '''select
  $1,
  $2,
  row_number() over(partition by $1 order by $2 desc) as rn
FROM $3
'''

cumulativesum = '''select
  $1,
  $2,
  sum($2) over(partition by $2 order by $1 desc) as csum
from $3
'''

cumulativesum2 = '''
select
  $1,
  (@csum := @csum + 1) as csum
from $2
inner join (select @csum:=0) as t
'''

countwithcondition = '''
select sum(
        case
      when a.$1 + 1 = b.$1 then 1
            else 0
        end
       ) as cnt
from $2 as a inner join $2 as b
on a.id = b.id
'''

median = '''
select id as median
from (
        select id,
               $1,
               sum($1) over (order by id) as csum,
               sum($1) over () as total
               from $2
) s
where s.total / 2.0 between s.csum - s.$1 and s.csum
'''

groupconsecutive = '''
select id
from (
  select d.*,
         count(d.id) over (partition by d.grp) as cnt
  from (
    select id
           id - row_number() over (order by id) as grp
    from $1
    where $2
  ) d
) a
where a.cnt >= 3
'''

changevertical='''
select min($3),
       min($4),
       min($5)
from   (
 select
  case
   when field = '$3' then @am:=@am+1
   when field = '$4' then @as:=@as+1
   when field = '$5' then @eu:=@eu+1
  end as rowline,
  case
   when field = '$3' then $2
   else null
  end as $3,
  case
   when field = '$4' then $2
   else null
  end as $4,
  case
   when field = '$5' then $2
   else null
  end as $5
 from $1
 inner join (select @am:=0, @as := 0, @eu:=0) hoge
 order by $2
) hoge
group by rowline
'''

nthingroup='''
select o1.id,
       o1.$2
from $1 as o1 inner join $1 as o2
on o1.id = o2.id and o1.$2 >= o2.$2
group by o1.id, o1.$2
having count(*) = $3
'''

groupcumulativesum=''' select
    id,
    if (sth!=@prev+1, @flag:=@flag+1, @flag) as flag,
    sth,
    @prev:=sth
from $1
inner join (select @prev:=0, @flag:=0) as h
'''

recursive='''with recursive cte as (
 select id,
        1 as lvl
 from $1
 union all
 select e.id,
        cte.lvl+1 as lvl
 from cte
 inner join $1 e
 on cte.id = e.id
)
'''

consecutiveseq='''with recursive seq as (
    select 0 as value
    union all
    select value+1
    from seq
    where value<100
)
select * from seq
'''

head='''select * from $1 limit 5'''

# Use the -d option to reference a DSN.
# Special characters in passwords and other strings can be escaped with URL encoding.
[alias_dsn]
# example_dsn = mysql://[user[:password]@][host][:port][/dbname]
