"============================================================================
"    Author: Lucas Burns                                                   
"     Email: burnsac@me.com                                                
"      Home: https://github.com/lmburns                                    
"============================================================================

" FIX:  for whatever reason `reverse range character class` error is shown
"       whenever vim has lines that wrap

scriptencoding utf-8
let $LANGUAGE = 'en_US.UTF-8'
let $LANG = $LANGUAGE
let $LC_ALL = $LANGUAGE
let $LC_CTYPE = $LANGUAGE
set enc=utf-8
set fenc=utf-8

let mapleader=' '
let maplocalleader=','
let $VIMHOME = $HOME.'/.vim'

call usr#global#setup()
call usr#core#options#setup()
call usr#core#mappings#setup()

let s:V = vital#vimrc#new()
let s:Msg = s:V.import('Vim.Message')
" let s:List = s:V.import('Data.List')
" let s:Promise = s:V.import('Async.Promise')

try
  set rtp+=$VIMHOME/bundle/neobundle.vim
  let s:bundles_path = expand(g:Rc.dirs.plugs)
  call neobundle#begin(s:bundles_path)
  let s:use_neobundle = 1
catch
  call s:Msg.error("[ERROR]: NeoBundle was not found!")
  call s:Msg.error("[ERROR]: " .. v:exception)
  let s:use_neobundle = 0
endtry

if s:use_neobundle
  let g:neobundle#enable_name_conversion = 1
  let g:neobundle#default_options = {
      \ 'manual': {'base': g:Rc.dirs.config .. '/bundle', 'type': 'nosync'},
      \ 'colors': {'script_type' : 'colors' }}
endif

" name            (String)
" normalized_name (String)
" description     (String)
" rev             (String) revision
" default         (String) default opt name
" directory       (String) rel dir from base
" base            (String) dir base path
" type            (String) repo type            none, raw, git, hg, svn , vba
" script_type     (String) script type          indent, plugin, ftplugin, etc
" site            (String) repo site            gh, bb, gist
" rtp             (String) runtime path
" depends         (List/String) dependencies
" build           (Dict/String) build script
" augroup         (String)      augroup name plugin uses
" external_commands (Dict/List/String) external commands required
" build_commands    (Dictionary or List or String)
" frozen            (Number) 1 and won't update auto
" lazy              (Number) 1 and doesn't add to rtp
" fetch             (Number) 1 and doesn't add to rtp and doesnt load
" force             (Number) 1 and force
" gui               (Number) 1 and only load GUI
" terminal          (Number) 1 and only load terminal
" vim_version       (String) required version
" disabled          (Number/Str) 1 and disabled
" focus             (Number) > 0 and sourced when focuslost
" verbose           (Number) 1 and print msg when sourced
" install_process_timeout (Number)

" autoload          (Dict) autoload conds
" hooks             (Dictionary)
" on_source         (List/String)
" on_post_source    (List/String)
" on_map       mappings              (List/String)
" on_ft        filetypes             (List/String)
" on_cmd       commands              (List/String)
" on_func      functions             (List/String)
" pre_func     function_prefixes     (List/String)
" on_i         insert                (Number)
" pre_cmd      command_prefix        (List/String)
" on_path      filename_patterns     (String) or (List)
" explorer     on_path['.*']         (Number)

NeoBundleFetch 'Shougo/neobundle.vim',
    \ {'description': 'Let neobundle manage neobundle'}

NeoBundleLazy 'dstein64/vim-startuptime',
    \ {'on_cmd': ['StartupTime'],
    \  'hooks': {'on_source': {-> plugs#conf#startuptime()}}}
NeoBundleLazy 'rhysd/vim-healthcheck',
    \ {'on_cmd': ['CheckHealth']}

NeoBundle 'drmikehenry/vim-fixkey',
    \ {'hooks': {'on_post_source': {-> plugs#fixkey#setup()}}}
" NeoBundle 'liuchengxu/vim-which-key',
"       \ {'hooks': {'on_source': {-> plugs#whichkey#setup()}}}

NeoBundleLazy 'tpope/vim-scriptease',
    \ {'on_cmd': ['Scriptease']}

NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-dispatch'
NeoBundle 'ryanoasis/vim-devicons'

NeoBundle 'inkarkat/vim-ingo-library'
NeoBundle 'vim-jp/vital.vim'
NeoBundle 'haya14busa/underscore.vim'

" ============= targets ============== [[[
NeoBundle 'wellle/targets.vim',
    \ {'depends': ['wellle/line-targets.vim'],
    \  'hooks': {'on_source': {-> plugs#textobjs#targets()}}}

let g:operator_sandwich_no_default_key_mappings = 1
NeoBundle 'machakann/vim-sandwich',
    \ {'hooks': {'on_source': {-> plugs#textobjs#sandwich()}}}

NeoBundle 'andymass/vim-matchup',
    \ {'hooks': {'on_source': {-> plugs#textobjs#matchup()}}}

" NeoBundle 'kana/vim-textobj-line'
NeoBundle 'kana/vim-operator-user'
NeoBundle 'kana/vim-textobj-user'
let g:textobj_fold_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-fold',
    \ {'on_map': [['o', 'iz'], ['o', 'az'],
    \             ['x', 'iz'], ['x', 'az']],
    \  'hooks': {'on_source': {-> plugs#textobjs#fold()}}}
let g:textobj_entire_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-entire',
    \ {'on_map': [['o', 'ie'], ['o', 'ae'],
    \             ['x', 'ie'], ['x', 'ae']],
    \  'hooks': {'on_source': {-> plugs#textobjs#entire()}}}
let g:textobj_indent_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-indent',
    \ {'on_map': [['o', 'ii'], ['o', 'ai'], ['o', 'iI'], ['o', 'aI'],
    \             ['x', 'ii'], ['x', 'ai'], ['x', 'iI'], ['x', 'aI']],
    \  'hooks': {'on_source': {-> plugs#textobjs#indent()}}}
let g:textobj_function_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-function',
    \ {'on_map': [['o', 'if'], ['o', 'af'], ['o', 'iF'], ['o', 'aF'],
    \             ['x', 'if'], ['x', 'af'], ['x', 'iF'], ['x', 'aF']],
    \  'hooks': {'on_source': {-> plugs#textobjs#function()}}}
let g:textobj_functioncall_no_default_key_mappings = 1
NeoBundleLazy 'machakann/vim-textobj-functioncall',
    \ {'on_map': [['o', 'ic'], ['o', 'ac'],
    \             ['x', 'ic'], ['x', 'ac']],
    \  'hooks': {'on_source': {-> plugs#textobjs#function_call()}}}
let g:textobj_syntax_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-syntax',
    \ {'on_map': [['o', 'iu'], ['o', 'au'],
    \             ['x', 'iu'], ['x', 'au']],
    \  'hooks': {'on_source': {-> plugs#textobjs#syntax()}}}
let g:textobj_lastpat_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-textobj-lastpat',
    \  {'on_map': [['o', 'a/'], ['o', 'i/'],
    \              ['o', 'a?'], ['o', 'i?'],
    \              ['x', 'a/'], ['x', 'i/'],
    \              ['x', 'a?'], ['x', 'i?']],
    \   'hooks': {'on_source': {-> plugs#textobjs#lastpat()}}}

let g:loaded_textobj_comment = 1
NeoBundleLazy 'glts/vim-textobj-comment',
    \  {'on_map': [['o', 'iK'], ['x', 'iK'],
    \              ['o', 'aK'], ['x', 'aK'],
    \              ['o', 'aC'], ['x', 'aC']],
    \   'hooks': {'on_source': {-> plugs#textobjs#comment()}}}

" let g:skip_default_textobj_word_column_mappings = 1
" NeoBundleLazy 'textobj-word-column.vim',
"       \  {'hooks': {'on_source': {-> plugs#textobjs#column()}}}

NeoBundleLazy 'kana/vim-textobj-diff',
    \ {'on_ft': ['diff'],
    \  'hooks': {'on_source': {-> plugs#textobjs#diffpat()}}}

NeoBundleLazy 'haya14busa/vim-edgemotion',
    \ {'on_map': [['n', 'sJ'], ['o', 'sJ'],
    \             ['n', 'sK'], ['o', 'sK']],
    \  'hooks': {'on_source': {-> plugs#textobjs#edge()}},
    \  'description': 'Quickly move cursor to edge'}

NeoBundleLazy 'easymotion/vim-easymotion',
    \ {'on_map': [['n', 'f'],  ['x', 'f'],  ['o', 'f'],
    \             ['n', 'F'],  ['x', 'F'],  ['o', 'F'],
    \             ['n', 't'],  ['x', 't'],  ['o', 't'],
    \             ['n', 'T'],  ['x', 'T'],  ['o', 'T'],
    \             ['n', ';a'], ['x', ';a'], ['o', ';a'],
    \             ['n', ';A'], ['x', ';A'], ['o', ';A'],
    \             ['n', 's/']],
    \  'hooks': {'on_source': {-> plugs#easymotion#setup()}},
    \  'description': 'Move cursor quickly. Similar to hop.nvim'}

NeoBundleLazy 'svermeulen/vim-subversive',
    \ {'on_map': [['n', 's'],  ['n', 'ss'], ['n', 'se'],
    \             ['n', 'sr'], ['n', 'sd'],
    \             ['x', 'ss'], ['n', '<Leader>sr']],
    \  'hooks': {'on_source': {-> plugs#conf#subversive()}},
    \  'description': 'Substitute operator'}

NeoBundleLazy 'tommcdo/vim-exchange',
    \ {'on_map': [['n', 'sx'], ['n', 'sxx'], ['n', 'sxc'],  ['x', 'X']],
    \  'hooks': {'on_source': {-> plugs#conf#exchange()}},
    \  'description': 'Exchange operator'}

let g:niceblock_no_default_key_mappings = 1
NeoBundleLazy 'kana/vim-niceblock',
    \ {'on_map': [['x', 'I'], ['x', 'gI'], ['x', 'A']],
    \  'hooks': {'on_source': {-> plugs#conf#niceblock()}}}
" ]]] === targets ===

" ============= enhancement ============== [[[
NeoBundle 'junegunn/vim-peekaboo',
    \  {'description': 'Preview registers'}

" \ {'on_map': [['n', '"'], ['i', '<C-r>']],

NeoBundle 'pseewald/vim-anyfold',
    \ {'hooks': {'on_source': {-> plugs#fold#setup()}}}

NeoBundleLazy 'arthurxavierx/vim-caser',
    \ {'on_map': [['n', 'cr']],
    \  'hooks': {'on_source': {-> plugs#conf#caser()}},
    \  'description': 'Switch case of words quickly'}

let g:swap_no_default_key_mappings = 1
NeoBundleLazy 'machakann/vim-swap',
    \ {'on_map': [['n', 'vs'],  ['x', 'vs'],
    \             ['n', 'sv'],  ['x', 'sv'],
    \             ['n', 's,'],  ['n', 's.'],
    \             ['n', 'sh'],  ['n', 'sl']],
    \  'hooks': {'on_source': {-> plugs#conf#swap()}},
    \  'description': 'Swap parameters interactively'}

NeoBundleLazy 'kana/vim-grex',
    \ {'on_cmd': ['Grey', 'Gred'],
    \  'description': 'Operate on lines that match last search'}

NeoBundleLazy 'inkarkat/vim-EnhancedJumps',
    \ {'on_map': [['n', '<C-i>'],  ['n', '<C-o>'],
    \             ['n', 'g<C-i>'], ['n', 'g<C-o>'],
    \             ['x', 'g<C-i>'], ['x', 'g<C-o>'],
    \             ['n', '<Leader><C-i>'],      ['n', '<Leader><C-o>'],
    \             ['n', '<Leader><C-w><C-i>'], ['n', '<Leader><C-w><C-o>'],
    \             ['n', 'g;'],    ['n', 'g,'],
    \             ['x', 'g;'],    ['x', 'g,']],
    \  'description': 'Show next jump on command line'}

NeoBundleLazy 'machakann/vim-multitarget-gn',
    \ {'on_map': [['n', 'gn'], ['x', 'gn'], ['o', 'gn']],
    \  'hooks': {'on_source': {-> plugs#textobjs#gn()}}}

NeoBundleLazy 'haya14busa/vim-asterisk',
    \ {'on_map': [['n', '*'], ['n', 'g*'],
    \             ['x', '*'], ['x', 'g*'],
    \             ['n', '#'], ['n', 'g#'],
    \             ['x', '#'], ['x', 'g#']],
    \  'hooks': {'on_source': {-> plugs#asterisk#setup()}}}

NeoBundleLazy 'romainl/vim-cool',
    \ {'on_map': [['n', '/'],  ['n', '?'],
    \             ['n', '*'],  ['n', 'g*'],
    \             ['x', '*'],  ['x', 'g*'],
    \             ['n', '#'],  ['n', 'g#'],
    \             ['x', '#'],  ['x', 'g#']],
    \  'description': 'Clear search highlight when not searching'}

NeoBundle 'kshenoy/vim-signature',
    \  {'hooks': {'on_source': {-> plugs#conf#marks()}},
    \   'description': 'Show marks in signcolumn'}

NeoBundle 'machakann/vim-highlightedyank',
    \ {'hooks': {'on_source': {-> plugs#conf#hlyank()}}}
NeoBundle 'machakann/vim-highlightedundo',
    \  {'hooks': {'on_source': {-> plugs#conf#hlundo()}}}

NeoBundleLazy 'vim-utils/vim-man',
    \ {'on_cmd': ['Man']}

NeoBundleLazy 'kana/vim-tag-user',
    \ {'on_map': [['n', '<C-]>']]}

NeoBundle 'AndrewRadev/qftools.vim'
" NeoBundle ronakg/quickr-preview.vim
" NeoBundle 'kana/vim-better-tag-jump'
" NeoBundle 'kana/vim-exjumplist'

" TODO:
NeoBundle 'tyru/open-browser.vim'
" ]]]

" ================ syntax ================ [[[
NeoBundle 'luochen1990/rainbow'
NeoBundle 'yggdroot/indentline',
    \  {'hooks': {'on_source': {-> plugs#indentline#setup()}}}

let g:polyglot_disabled = [
    \ 'markdown', 'python', 'rust', 'java', 'lua', 'ruby', 'zig', 'just'
    \ ]
NeoBundle 'sheerun/vim-polyglot'

" NeoBundle 'wfxr/dockerfile.vim'  | let g:polyglot_disabled += ['dockerfile']
" NeoBundle 'rhysd/vim-rustpeg'    | let g:polyglot_disabled += ['rustpeg']
" NeoBundle 'camnw/lf-vim'         | let g:polyglot_disabled += ['lf']
" NeoBundle 'ron-rs/ron.vim'       | let g:polyglot_disabled += ['ron']
" NeoBundle 'mattn/vim-xxdcursor'
" NeoBundle 'fidian/hexmode'       | let g:hexmode_patterns = '*.o,*.so,*.a,*.out,*.bin,*.exe'
" NeoBundle 'jamessan/vim-gnupg'

" NeoBundle 'morhetz/gruvbox'
" NeoBundle 'gavinok/spaceway.vim'
NeoBundle 'sainnhe/edge'
NeoBundle 'sainnhe/everforest'
NeoBundle 'sainnhe/sonokai'
NeoBundle 'sainnhe/gruvbox-material',
    \  {'hooks': {'on_source': {-> usr#theme#setup()}}}
" ]]]

" ================ addons ================ [[[
NeoBundleLazy 'bootleq/vim-cycle',
    \ {'on_map': [['n', '_'], ['x', '_'], ['s', '_'],
    \             ['n', '+'], ['x', '+'], ['s', '+']],
    \  'hooks': {'on_source': {-> plugs#cycle#setup()}}}
NeoBundleLazy 'Raimondi/delimitMate',
    \  {'hooks': {'on_source': {-> plugs#conf#delimit()}},
    \   'insert': 1,
    \   'description': 'Autopair delimiters'}
NeoBundleLazy 'mhinz/vim-grepper',
    \ {'on_cmd': ['Grepper', 'GrepperRg',
    \             'Grep', 'LGrep',
    \             'GrepBuf', 'LGrepBuf',
    \             'GrepBufs', 'LGrepBufs'],
    \  'on_map': [['n', 'gs'], ['x', 'gs'], ['n', '<Leader>rg']],
    \  'hooks': {'on_post_source': {-> plugs#grepper#setup()}}}
NeoBundleLazy 'junegunn/vim-easy-align',
    \ {'on_cmd': ['EasyAlign', 'LiveEasyAlign'],
    \  'on_map': [['n', 'ga'], ['x', 'ga'],
    \             ['x', '<Leader>ga'], ['x', '<Leader>gi'], ['x', '<Leader>gs']],
    \  'hooks': {'on_source': {-> plugs#align#setup()}}}
NeoBundleLazy 'ZSaberLv0/eregex.vim',
    \ {'on_cmd': ['E2v', 'S', 'M', 'V'],
    \  'on_map': [['n', '<Leader>es'], ['n', '<Leader>S'], ['n', ',/']],
    \  'hooks': {'on_source': {-> plugs#conf#eregex()}},
    \  'description': 'Perl regex for vim'}

NeoBundleLazy 'tweekmonster/helpful.vim',
    \ {'on_cmd': ['HelpfulVersion']}
NeoBundleLazy 'inkarkat/vim-SpellCheck',
    \ {'on_cmd': ['SpellCheck', 'SpellLCheck']}
NeoBundleLazy 'AndrewRadev/bufferize.vim',
    \ {'on_cmd': ['Bufferize']}
NeoBundleLazy 'AndrewRadev/splitjoin.vim',
    \  {'on_map': [['n', 'gJ'], ['n', 'gS']],
    \   'hooks': {'on_source': {-> plugs#conf#splitjoin()}}}
NeoBundleLazy 'mbbill/undotree',
    \ {'on_cmd': ['UndotreeToggle'],
    \  'on_map': [['n', '<Leader>ut']],
    \  'hooks': {'on_source': '$VIMHOME/autoload/plugs/undotree.vim'}}
NeoBundleLazy 'kevinhwang91/suda.vim',
    \ {'on_cmd': ['SudaWrite'],
    \  'hooks': {'on_source': {-> plugs#conf#suda()}}}
NeoBundle 'mg979/vim-visual-multi',
    \  {'hooks': {'on_source': {-> plugs#vm#setup()}}}

" NeoBundle 'tpope/vim-endwise' | let g:endwise_no_mappings = 1
" NeoBundle 'maxbrunsfeld/vim-yankstack'
NeoBundle 'junegunn/fzf.vim'
NeoBundle 'junegunn/fzf',
    \ {'build': "call fzf#install()",
    \  'name': 'fzf-bin'}
" ]]]

" ================= repo ================= [[[
NeoBundle 'misterbuckley/vim-definitive',
    \  {'hooks': {'on_source': {-> plugs#conf#definitive()}}}
" ]]]

" ================= repo ================= [[[
" NeoBundle 'airblade/vim-rooter',
"       \  {'hooks': {'on_source': {-> plugs#rooter#setup()}}}

" silent! call repeat#set("\<Plug>jiangmiao/auto-pairs", v:count)
" silent! call repeat#set("\<Plug>liuchengxu/vim-which-key", v:count)
"
" ============ formatting ============ [[[
NeoBundleLazy 'sbdchd/neoformat',
    \  {'on_map': [['n', ';ff'], ['x', ';ff']],
    \   'hooks': {'on_source': {-> plugs#format#setup()}}}
" ]]] === formatting ===

" ================= comment ================= [[[
NeoBundle 'tomtom/tcomment_vim',
    \   {'hooks': {'on_source': {-> plugs#comment#setup()}}}
" NeoBundle 'preservim/nerdcommenter',
"       \ {'depends': 'tpope/vim-commentary',
"       \   'hooks': {'on_source': {-> plugs#comment#setup()}}}
" ]]] === comment ===
"
" ================ git ================= [[[
" TODO:
" NeoBundle 'christoomey/vim-conflicted'
" NeoBundle 'chrisbra/vim-diff-enhanced'
NeoBundleLazy 'AndrewRadev/linediff.vim',
    \ {'on_cmd': ['Linediff', 'LinediffReset'],
    \  'on_map': [['n', '<Leader>ld'], ['x', '<Leader>ld'],
    \             ['n', '<Leader>lD'], ['x', 'D']],
    \  'hooks': {'on_source': {-> plugs#conf#linediff()}}}
NeoBundle 'tpope/vim-fugitive',
    \   {'depends': ['tpope/vim-rhubarb'],
    \    'hooks': {'on_source': {-> plugs#fugitive#setup()}}}
    " \    'pre_func': ['fugitive#', 'Fugitive'],
    " \    'pre_cmd':  ['G', 'Git']}
NeoBundleLazy 'rbong/vim-flog',
    \ {'on_cmd': ['Flog', 'Flogsplit'],
    \  'on_map': [['n', '<Leader>gl'], ['n', '<Leader>gi']],
    \  'hooks': {'on_source': {-> plugs#flog#setup()}}}
NeoBundleLazy 'ruanyl/vim-gh-line',
    \ {'on_map': [['n', '<Leader>go'], ['n', '<Leader>gl']],
    \  'hooks': {'on_source': {-> plugs#git#ghline()}}}
" ]]] === fugitive ===

" ================ lang ================ [[[
NeoBundle 'SirVer/ultisnips',
    \   {'hooks': {'on_source': {-> plugs#conf#ultisnips()}}}
NeoBundle 'honza/vim-snippets'
NeoBundleLazy 'fatih/vim-go',
    \  {'on_ft': 'go',
    \   'hooks': {'on_source': {-> plugs#go#setup()}}}
NeoBundleLazy 'rust-lang/rust.vim', {'on_ft': 'rust'}
" NeoBundle 'nastevens/vim-cargo-make'
" ]]]

" ============ coc-nvim ============ [[[
" NeoBundle 'tjdevries/coc-zsh', {'on_ft': 'zsh'}
NeoBundleLazy 'vim-perl/vim-perl',  {'on_ft': 'perl'}
NeoBundle 'neoclide/coc.nvim', {'build': 'yarn install --frozen-lockfile'}
NeoBundle 'antoinemadec/coc-fzf'
" ]]] === coc-nvim ===

" ================ term ================ [[[
NeoBundle 'ptzz/lf.vim',
    \ {'hooks': {'on_source': {-> plugs#conf#lf()}}}
NeoBundle 'voldikss/fzf-floaterm',
    \ {'depends': ['voldikss/vim-floaterm'],
    \  'hooks': {'on_source': {-> plugs#term#floaterm()}}}
" NeoBundle 'kassio/neoterm',
"     \  {'hooks': {'on_source': {-> plugs#term#neoterm()}}}
" ]]]

" ================ tags ================ [[[
NeoBundle 'ludovicchabant/vim-gutentags',
    \   {'hooks': {'on_source': {-> plugs#gutentags#setup()}}}
NeoBundle 'liuchengxu/vista.vim',
    \   {'hooks': {'on_source': {-> plugs#vista#setup()}}}
" ]]]

NeoBundle 'mengelbrecht/lightline-bufferline',
    \ {'depends': ['itchyny/lightline.vim', 'josa42/vim-lightline-coc', 'niklaas/lightline-gitdiff'],
    \  'hooks': {'on_source': {-> plugs#stl#setup()}}}

NeoBundle 'roxma/nvim-yarp',
    \ {'build': "sh -c 'pip install -r requirements.txt'"}
NeoBundle 'gelguy/wilder.nvim',
    \ {'depends': ['roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc'],
    \  'build': "UpdateRemotePlugins",
    \  'hooks': {'on_source': {-> plugs#wilder#setup()}}}
" ]]]

" NeoBundle 'guns/vim-sexp'
" NeoBundle 'rhysd/clever-f.vim'
" NeoBundle 'justinmk/vim-sneak'
" NeoBundle 'AndrewRadev/switch.vim'
" NeoBundle 'michaeljsmith/vim-indent-object'

call neobundle#end()

filetype plugin indent on
if !has('vim_starting')
  " Call on_source hook when reloading .vimrc.
  call neobundle#call_hook('on_source')
endif

" let g:qf_disable_statusline = v:true
" set qftf={info -> }

" ============= targets ============== [[[
" NeoBundle 'tpope/vim-surround'
" NeoBundle 'tpope/vim-abolish'
" TODO:

" NeoBundle 'KabbAmine/vCoolor.vim'
" NeoBundle 'tpope/vim-characterize',
" NeoBundle 'vim-scripts/visualrepeat'
" NeoBundle 'sickill/vim-pasta'
" NeoBundle 'chrisbra/Colorizer'

" NeoBundle 'rhysd/git-messenger.vim', {'on': 'GitMessenger'}
" NeoBundle 'airblade/vim-gitgutter', {'on': 'GitGutterToggle'}
" NeoBundle 'tpope/vim-eunuch',
" NeoBundle 'aymericbeaumet/vim-symlink'
" NeoBundle 'will133/vim-dirdiff'
" NeoBundle 'justinmk/vim-dirvish'
" NeoBundle 'justinmk/vim-printf'

" NeoBundle 'MTDL9/vim-log-highlighting'
" NeoBundle 'plasticboy/vim-markdown', { 'for': 'markdown' }
" NeoBundle 'moll/vim-bbye', { 'on': ['Bdelete', 'Bwipeout'] }

" NeoBundle 'itchyny/vim-cursorword'            " Underlines words under cursor
" NeoBundle 'vim-scripts/a.vim'                 " Open the header file with :AT

" NeoBundle 'xolox/vim-easytags'
" ]]] === targets ===

" ============== vim-slime | python ============== [[[
if !empty(glob('$XDG_DATA_HOME/pyenv/shims/python3'))
  let g:python3_host_prog = glob('$XDG_DATA_HOME/pyenv/shims/python')
endif
" ]]] === vim-slime | python ===

" ]]] === Theme Settings ===

call plugs#fzf#setup()
call plugs#coc#setup()

call usr#core#commands#setup()
call usr#core#abbr#setup()
if has("autocmd")
  call usr#core#autocmds#setup()
endif
" ]]] === Syntax ===

" ============== Default Terminal ============== [[[
command! -nargs=* TP botright sp | resize 20 | term <args>
command! -nargs=* VT vsp | term <args>
" noremap <A-i> :TP<cr>A

" Toggle terminal on/off (neovim)
nnoremap <C-t> :call TermToggle(12)<CR>
inoremap <C-t> <Esc>:call TermToggle(12)<CR>
tnoremap <C-t> <C-\><C-n>:call TermToggle(12)<CR>

" Terminal go back to normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap :q! <C-\><C-n>:q!<CR>
" ]]] === Default Terminal ===

" ============== hl ============== [[[
" hi def link cmLineComment Comment
hi def link cmTitle vimCommentTitle
hi def link myTodo Todo

hi DiffAdd      ctermfg=white ctermbg=NONE guifg=#5F875F guibg=NONE
hi DiffChange   ctermfg=white ctermbg=NONE guifg=#5F5F87 guibg=NONE
hi DiffDelete   ctermfg=white ctermbg=NONE guifg=#cc6666 guibg=NONE
hi DiffText     cterm=bold ctermfg=white ctermbg=DarkRed

" hi HighlightedyankRegion ctermbg=Red   guibg=#A06469
hi GitBlameVirtualText   cterm=italic  ctermfg=245   gui=italic guifg=#665c54

hi MatchParen guifg=#088649
hi vimOperParen guifg=#088649
hi vimSep guifg=#088649
hi Delimiter guifg=#088649
hi Operator guifg=#088649
" ]]] === transparent ===

if !has('gui_running') && empty(&t_ts)
  set title
  set titlelen=70
  " set titlestring=%(%m%)%(%{expand(\"%:t\")}%)
  " let &titleold=fnamemodify(&shell, ':t')

  if len($TMUX)
    " let &t_ts = "\e]2;"
    let &t_ts = "\e]0;"
    let &t_fs = "\007"
  elseif &term =~ "^screen.*"
    let &t_ts="\ek"
    let &t_fs="\e\\"
  endif
endif

" use tab and shift tab to indent and de-indent code
" nnoremap <C-i> <C-i>
" nnoremap <C-o> <C-o>
nnoremap <Tab>   >>
nnoremap <S-Tab> <<
xnoremap <Tab>   >><Esc>gv
xnoremap <S-Tab> <<<Esc>gv
