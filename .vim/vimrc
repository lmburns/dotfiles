"============================================================================
"    Author: Lucas Burns                                                   
"     Email: burnsac@me.com                                                
"      Home: https://github.com/lmburns                                    
"============================================================================

  scriptencoding utf-8
  set ttyfast
  set nocompatible
  let mapleader = ' '
  let maplocalleader = ','

  " UndoHistory: store undo history in a file. even after closing and reopening vim
  if has('persistent_undo')
    let target_path = expand('~/.vim/vim-persisted-undo/')

    if !isdirectory(target_path)
      call system('mkdir -p ' . target_path)
    endif

    let &undodir = target_path
    set undofile
  endif

  if &modifiable
    set fileencoding=utf-8       " utf-8 files
    set fileformat=unix          " use unix line endings
    set fileformats=unix,dos     " try unix line endings before dos, use unix
  endif

  set background=dark
  set path+=**
  " set history=1000
  set lazyredraw
  set belloff=all                           " turn off bell
  set title
  set showmode                            " hide file, it's in airline
  set noshowcmd
  set noswapfile                            " no swap files
  set list lcs=tab:‣\ ,trail:•,nbsp:␣       " customize invisibles ‣\ »·
  " set fillchars+=msgsep:\ ,vert:\│          " customize message separator
  set incsearch                             " incremential search highligh
  set encoding=utf-8
  set pumheight=10                          " number of items in popup menu
  " Kind of hard to read with any transparency at all, especially when using show_documentation
  " highlight PmenuSel blend=0
  " set pumblend=3                           " transparent popup_menu
  " set winblend=3                           " transparent floating window
  set hidden
  set nobackup
  set nowritebackup
  set magic
  set clipboard=unnamedplus                " use system clipboard
  set splitbelow splitright                 " split screen below and right
  set tabstop=2 shiftwidth=0
  set expandtab softtabstop=2 smartindent
  set ignorecase smartcase
  set number
  " set relativenumber
  set nostartofline
  set linebreak
  set wrap
  set whichwrap+=<,>,h,l
  set showmatch
  set matchtime=2
  set cmdheight=2
  set shortmess+=c
  set nofoldenable
  set foldlevel=99
  set foldmethod=marker
  set foldmarker=[[[,]]]
  set conceallevel=2
  set concealcursor-=n                    " cancel conceal on cursor line
  set scrolloff=5                         " cusor 5 lines from bottom of page
  set cursorline                          " show line where cursor is
  set mouse=a                             " enable mouse all modes
  set wildmode=full                       " autocompletion
  set wildmenu                            " autocompletion
  set wildignore+=.git,.DS_Store,node_modules
  set wildoptions=pum
  set diffopt=vertical
  set synmaxcol=1000                      " do not highlight long lines
  set signcolumn=yes
  set timeoutlen=350                      " keycode delay
  set ttimeout
  set updatetime=100
  set confirm                             " confirm when editing readonly
  set noerrorbells
  set t_vb=
  set belloff=all

  " Change cursor
  let &t_SI = "\<Esc>[6 q"
  let &t_SR = "\<Esc>[4 q"
  let &t_EI = "\<Esc>[2 q"
  " filetype plugin indent on

" }}} === General Settings ===

call plug#begin("~/.vim/plugged")

" Not needed, here for manual pages
Plug 'junegunn/vim-plug'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'roxma/nvim-yarp', { 'do': 'pip install -r requirements.txt' }

" View id3 files
Plug 'AndrewRadev/id3.vim'
" View info files
Plug 'alx741/vinfo'
Plug 'HiPhish/info.vim'

if &buftype =~? 'info'
    nmap <buffer> gu <Plug>(InfoUp)
    nmap <buffer> gn <Plug>(InfoNext)
    nmap <buffer> gp <Plug>(InfoPrev)
    nmap <buffer> gm <Plug>(InfoMenu)
    nmap <buffer> gf <Plug>(InfoFollow)
endif

" ============= Icons ============= {{{
Plug 'ryanoasis/vim-devicons'
augroup vizunicode_custom
    autocmd!
    autocmd BufEnter coc-settings.json VizUnicodeAll
augroup END
" }}} === Icons ===

" ============== easy align ============== {{{
Plug 'junegunn/vim-easy-align'
  let g:easy_align_delimiters = {
    \ '>': { 'pattern': '>>\|=>\|>' },
    \ '\': { 'pattern': '\\' },
    \ '/': { 'pattern': '//\+\|/\*\|\*/', 'delimiter_align': 'l', 'ignore_groups': ['!Comment'] },
    \ ']': {
    \     'pattern':       '\]\zs',
    \     'left_margin':   0,
    \     'right_margin':  1,
    \     'stick_to_left': 0
    \   },
    \ ')': {
    \     'pattern':       ')\zs',
    \     'left_margin':   0,
    \     'right_margin':  1,
    \     'stick_to_left': 0
    \   },
    \ 'f': {
    \     'pattern': ' \(\S\+(\)\@=',
    \     'left_margin': 0,
    \     'right_margin': 0
    \   },
    \ 'd': {
    \     'pattern': ' \ze\S\+\s*[;=]',
    \     'left_margin': 0,
    \     'right_margin': 0
    \   }
    \ }
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
  xmap <Leader>ga <Plug>(LiveEasyAlign)
  xmap <Leader>gi :EasyAlign//ig['Comment']<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
  xmap <Leader>gs :EasyAlign//ig['String']<Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left><Left>
" }}} === easy align ===

" ============== lightline-buffer ============== {{{
Plug 'tyru/open-browser.vim'
  nmap <buffer> <silent> <cr> <Plug>(openbrowser-open)

" Plug 'sainnhe/tmuxline.vim', {'on': ['Tmuxline', 'TmuxlineSnapshot']}
Plug 'mengelbrecht/lightline-bufferline'
  " jump mapping
  nmap ,1 <Plug>lightline#bufferline#go(1)
  nmap ,2 <Plug>lightline#bufferline#go(2)
  nmap ,3 <Plug>lightline#bufferline#go(3)
  nmap ,4 <Plug>lightline#bufferline#go(4)
  nmap ,5 <Plug>lightline#bufferline#go(5)
  nmap ,6 <Plug>lightline#bufferline#go(6)
  nmap ,7 <Plug>lightline#bufferline#go(7)
  nmap ,8 <Plug>lightline#bufferline#go(8)
  nmap ,9 <Plug>lightline#bufferline#go(9)
  nmap ,0 <Plug>lightline#bufferline#go(10)

  " kill mapping
  nmap ;1 <Plug>lightline#bufferline#delete(1)
  nmap ;2 <Plug>lightline#bufferline#delete(2)
  nmap ;3 <Plug>lightline#bufferline#delete(3)
  nmap ;4 <Plug>lightline#bufferline#delete(4)
  nmap ;5 <Plug>lightline#bufferline#delete(5)
  nmap ;6 <Plug>lightline#bufferline#delete(6)
  nmap ;7 <Plug>lightline#bufferline#delete(7)
  nmap ;8 <Plug>lightline#bufferline#delete(8)
  nmap ;9 <Plug>lightline#bufferline#delete(9)
  nmap ;0 <Plug>lightline#bufferline#delete(10)

  let s:nbsp = ' '
  let g:lightline#bufferline#filename_modifier = ":t".s:nbsp
  let g:lightline#bufferline#shorten_path      = 1
  let g:lightline#bufferline#show_number       = 2
  let g:lightline#bufferline#min_buffer_count  = 0
  let g:lightline#bufferline#unnamed           = '[No Name]'
  let g:lightline#bufferline#read_only         = '  '
  let g:lightline#bufferline#modified          = " + "
  let g:lightline#bufferline#enable_devicons = 1
  let g:lightline#bufferline#unicode_symbols = 1
  let g:lightline#bufferline#number_map = {
  \ 0: '⁰', 1: '¹', 2: '²', 3: '³', 4: '⁴',
  \ 5: '⁵', 6: '⁶', 7: '⁷', 8: '⁸', 9: '⁹'}
  " \ 0: '₀', 1: '₁', 2: '₂', 3: '₃', 4: '₄',
  " \ 5: '₅', 6: '₆', 7: '₇', 8: '₈', 9: '₉'}
  let g:lightline#bufferline#unicode_symbols = 1

  let g:lightline#gitdiff#indicator_added = ': '
  let g:lightline#gitdiff#indicator_deleted = ': '
  let g:lightline#gitdiff#indicator_modified = 'ﰲ: '
  let g:lightline#gitdiff#separator = ' '
  " let g:lightline#gitdiff#show_empty_indicators = 1
" }}} === lightline-buffer ===

" ============== lightline ============== {{{
Plug 'itchyny/lightline.vim'
Plug 'josa42/vim-lightline-coc'
Plug 'niklaas/lightline-gitdiff'
function! CocDiagnosticError() abort "{{{
  let info = get(b:, 'coc_diagnostic_info', {})
  return get(info, 'error', 0) ==# 0 ? '' : ' ' . info['error'] "   
endfunction "}}}

function! CocDiagnosticWarning() abort "{{{
  let info = get(b:, 'coc_diagnostic_info', {})
  return get(info, 'warning', 0) ==# 0 ? '' : ' ' . info['warning'] "      !
endfunction "}}}

function! CocDiagnosticOK() abort "{{{
  let info = get(b:, 'coc_diagnostic_info', {})
  return get(info, 'error', 0) ==# 0 && get(info, 'warning', 0) ==# 0 ? '' : '' "  
endfunction "}}}

function! CocStatus() abort "{{{
  return get(g:, 'coc_status', '')
endfunction "}}}

function! GitGlobal() abort "{{{
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    if branch ==# ''
      return ' ' . fnamemodify(getcwd(), ':t')
    else
      return branch . ' '
    endif
  endif
  return ''
endfunction "}}}

function! DeviconsFiletype() "{{{
  return winwidth(0) > 80 ? (strlen(&filetype) ? WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : 'no ft') : ''
  " return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction "}}}

function! TabNum(n) abort "{{{
  return a:n." \ue0bb"
endfunction "}}}

" FIX: function
function! NumBufs() abort "{{{
  " let num = len(getbufinfo({'buflisted':1}))
  " let hid = len(filter(getbufinfo({'buflisted':1}), 'empty(v:val.windows)'))
  return len(filter(range(1, bufnr('$')), 'buflisted(v:val)'))
  " return hid ? num-hid."+".hid : num
endfunction "}}}

" function! FileSize() abort "{{{
"   let [ bytes, units, i ] = [ getfsize(expand(@%)), ['', 'Ki', 'Mi', 'Gi'], 0 ]
"   while bytes >= 1024 | let bytes = bytes / 1024.0 | let i += 1 | endwhile
"   return printf((i ? "~%.1f" : "%d")." %sB", bytes, units[i])
" endfunction "}}}

let g:ll_blacklist = '\v(help|nerdtree|quickmenu|startify|undotree|neoterm|'
  \ . 'fugitive|netrw|vim-plug|floaterm|qf)'

function! FileSize() abort " {{{
  let l:bytes = getfsize(expand('%:p'))
  if (l:bytes >= 1024)
    let l:kbytes = l:bytes / 1024
  endif
  if (exists('l:kbytes') && l:kbytes >= 1000)
    let l:mbytes = l:kbytes / 1000
  endif

  if l:bytes <= 0
    return &filetype !~# g:ll_blacklist ? ('0 B') : ''
  endif

  if (exists('l:mbytes'))
    return &filetype !~# g:ll_blacklist && winwidth(0) > 70 ? (l:mbytes . ' MB') : ''
  elseif (exists('l:kbytes'))
    return &filetype !~# g:ll_blacklist && winwidth(0) > 70 ? (l:kbytes . ' KB') : ''
  else
    return &filetype !~# g:ll_blacklist && winwidth(0) > 70 ? (l:bytes . ' B') : ''
  endif
endfunction "}}}

function! LightLineReadonly() abort "{{{
  return &readonly && &filetype !~# g:ll_blacklist ? '' : ''
endfunction "}}}

function! LightlineFilename() abort "{{{
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  return winwidth(0) > 40 ? filename . modified : ''
endfunction "}}}

function! LightlineGitStatus() abort "{{{
  let status = get(b:, 'coc_git_status', '')
  return winwidth(0) > 80 ? status : ''
endfunction "}}}

function! LightlineFileEncoding() "{{{
    " only show the file encoding if it's not 'utf-8'
    return &fileencoding == 'utf-8' ? '' : &fileencoding
endfunction "}}}

function! NearestMethodOrFunction() abort "{{{
  return get(b:, 'vista_nearest_method_or_function', '')
endfunction "}}}

autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

set showtabline=2
let g:lightline = {}
" let g:lightline.colorscheme = 'overcast'
let g:lightline.colorscheme = 'gruvbox_material'
" let g:lightline.colorscheme = 'everforest'
" let g:lightline.colorscheme = 'miramare'
" let g:lightline.colorscheme = 'nightowl'
" let g:lightline.colorscheme = 'spaceduck'
" let g:lightline.colorscheme = 'sonokai'
let g:lightline.separator = { 'left': "\ue0b8", 'right': "\ue0be" }
let g:lightline.subseparator = { 'left': "\ue0b9", 'right': "\ue0b9" }
let g:lightline.tabline_separator = { 'left': "\ue0bc", 'right': "\ue0ba" }
let g:lightline.tabline_subseparator = { 'left': "\ue0bb", 'right': "\ue0bb" }
" 'fileformat'
let g:lightline.active = {
    \ 'left':  [['mode', 'paste'],
    \           ['readonly', 'modified', 'devicons_filetype', 'fsize', 'fileencoding'],
    \           ['gitdiff', 'coc_status']],
    \ 'right': [['lineinfo'],
    \           ['linter_errors', 'linter_warnings', 'linter_ok']]
    \ }
let g:lightline.inactive = {
        \ 'left': [['filename', 'modified', 'fileformat']],
        \ 'right': [[ 'lineinfo' ]]
        \ }
" 'tabs'
let g:lightline.tabline = {
        \ 'right': [[ 'method', 'git_status' ]],
        \ 'left': [['vim_logo', 'nbufs', 'buffers']],
        \ }
let g:lightline.tab = {
        \ 'active': ['bufnum', 'filename'],
        \ 'inactive': ['bufnum', 'filename']
        \ }
" \ 'readonly': 'lightline#tab#readonly',
" \ 'filename': 'lightline#tab#filename',
" \ 'modified': 'lightline#tab#modified',
let g:lightline.tab_component_function = {
      \ 'tabnum': 'TabNum',
      \ 'filename': 'LightlineFilename',
      \ }
" \ 'fileencoding': '%{&fenc!=#""?&fenc:&enc}',
let g:lightline.component = {
      \ 'git_status' : '%{GitGlobal()}',
      \ 'nbufs': '%{NumBufs()}',
      \ 'bufinfo': '%{bufname("%")}:%{bufnr("%")}',
      \ 'vim_logo': "\ue7c5",
      \ 'mode': '%{lightline#mode()}',
      \ 'absolutepath': '%F',
      \ 'relativepath': '%f',
      \ 'filename': '%t',
      \ 'fileformat': '%{&fenc!=#""?&fenc:&enc}[%{&ff}]',
      \ 'filetype': '%{&ft!=#""?&ft:"no ft"}',
      \ 'modified': '%M',
      \ 'bufnum': '%n',
      \ 'paste': '%{&paste?"PASTE":""}',
      \ 'readonly': '%R',
      \ 'charvalue': '%b',
      \ 'charvaluehex': '%B',
      \ 'percent': '%2p%%',
      \ 'percentwin': '%P',
      \ 'spell': '%{&spell?&spelllang:""}',
      \ 'lineinfo': '%2p%% %3l:%-2v',
      \ 'line': '%l',
      \ 'column': '%c',
      \ 'close': '%999X X ',
      \ 'winnr': '%{winnr()}',
      \ 'method': '%{NearestMethodOrFunction()}',
      \ }
let g:lightline.component_function = {
      \ 'devicons_filetype': 'DeviconsFiletype',
      \ 'coc_status': 'CocStatus',
      \ 'fsize': 'FileSize',
      \ 'fileencoding': 'LightlineFileEncoding',
      \ }
let g:lightline.component_expand = {
      \ 'linter_warnings': 'CocDiagnosticWarning',
      \ 'linter_errors': 'CocDiagnosticError',
      \ 'linter_ok': 'CocDiagnosticOK',
      \ 'buffers': 'lightline#bufferline#buffers',
      \ 'readonly': 'LightLineReadonly',
      \ 'gitdiff': 'lightline#gitdiff#get',
      \ }
let g:lightline.component_type = {
      \ 'linter_warnings': 'warning',
      \ 'linter_errors': 'error',
      \ 'linter_info': 'info',
      \ 'linter_hints': 'hints',
      \ 'buffers': 'tabsel',
      \ 'gitdiff': 'middle',
      \ }
let g:lightline.mode_map = {
            \ 'n':      'N',
            \ 'i':      'I',
            \ 'R':      'R',
            \ 'v':      'V',
            \ 'V':      'V-L',
            \ "\<C-v>": 'V-B',
            \ 'c':      'C',
            \ 's':      'S',
            \ 'S':      'S-L',
            \ "\<C-s>": 'S-B',
            \ 't':      'T',
            \ }
" }}} === lightline ===

" ============== EasyEscape ============== {{{
imap jk <ESC>
imap kj <ESC>
cnoremap jk <ESC>
cnoremap kj <ESC>

  " Fix paste bug triggered by the above inoremaps
  set t_BE=
" }}} === EasyEscape ===

" ============== vim surround ============== {{{
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-endwise'
  nmap <Leader>ci cs`*
  nmap <Leader>o ysiw
  nmap mlw yss`
"}}} === vim surround ===

" ============== gutentag | vista ============== {{{ "
Plug 'ludovicchabant/vim-gutentags'
  " autocmd BufRead *.rs :setlocal tags=./rusty-tags.vi;/,$RUST_SRC_PATH/rusty-tags.vi
  " autocmd BufWritePost *.rs :silent! exec "!rusty-tags vi --quiet --start-dir=" . expand('%:p:h') . "&" | redraw!

  " autocmd BufRead *.c :setlocal tags=./tags;/
  " autocmd BufWritePost *.c :silent! exec "!ctags_gen" . expand('%:p:t') . "&" | redraw!

  let g:gutentags_project_root = ['.git']
  let g:gutentags_cache_dir = expand('~/.cache/tags')

  " set tags=./.tags;,.tags
  " let $GTAGSLABEL = 'native-pygments'
  " let $GTAGSCONF = '~/.gtags.conf'

  " if &ft=="rust"
  "   set tags=rusty-tags.vi,$RUST_SRC_PATH/rusty-tags.vi
  "   let g:gutentags_modules = ['rusty-tags']
  "   let g:gutentags_ctags_extra_args = ['vi', '--quiet', "--start-dir=" . expand("%:p:h")]
  "   let g:gutentags_ctags_tagfile = '.rusty-tags'
  " else
  set tags=tags
  " set tags+=~/.config/nvim/cpp_src/tags
  let g:gutentags_modules = ['ctags']
  let g:gutentags_cache_dir = expand('~/.cache/tags')
  let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extras=+q']
  let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
  let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
  let g:gutentags_ctags_tagfile = '.tags'
  let g:gutentags_gtags_dbpath = g:gutentags_cache_dir
  let g:gutentags_generate_on_new = 1
  let g:gutentags_generate_on_missing = 1
  let g:gutentags_generate_on_write = 1
  let g:gutentags_generate_on_empty_buffer = 0
  let g:gutentags_file_list_command = 'rg --files'

  " Disable connecting gtags database automatically (gutentags_plus will handle the database connection)
  " let g:gutentags_auto_add_gtags_cscope = 0
  " Disable default maps
  let g:gutentags_plus_nomap = 1

  " let g:gutentags_define_advanced_commands = 1
  let g:gutentags_ctags_exclude = [
    \  '*.git', '*.svn', '*.hg',
    \  'cache', 'build', 'dist', 'bin', 'node_modules', 'bower_components', 'target',
    \  '*-lock.json',  '*.lock',
    \  '*.min.*',
    \  '*.bak',
    \  '*.zip',
    \  '*.pyc',
    \  '*.class',
    \  '*.sln',
    \  '*.csproj', '*.csproj.user',
    \  '*.tmp',
    \  '*.cache',
    \  '*.vscode',
    \  '*.pdb',
    \  '*.exe', '*.dll', '*.bin',
    \  '*.mp3', '*.ogg', '*.flac',
    \  '*.swp', '*.swo',
    \  '.DS_Store', '*.plist',
    \  '*.bmp', '*.gif', '*.ico', '*.jpg', '*.png', '*.svg',
    \  '*.rar', '*.zip', '*.tar', '*.tar.gz', '*.tar.xz', '*.tar.bz2',
    \  '*.pdf', '*.doc', '*.docx', '*.ppt', '*.pptx', '*.xls',
    \]

  " if executable('gtags-cscope') && executable('gtags')
  "   let g:gutentags_modules += ['gtags_cscope'] "'cscopeprg' will be set to gtags-cscope
  " endif

  function! s:SetupCTags()
    let g:gutentags_ctags_extra_args += ['/usr/include', '/usr/local/include']
  endfunction

  function! s:SetupCPPTags()
    let g:gutentags_ctags_extra_args += ['/home/lucas/.config/nvim/cpp_src']
  endfunction

  function! s:SetupRubyTags()
    " let g:gutentags_ctags_extra_args += map(split($GEM_PATH, ':'), 'v:val."/gems/*/tags"')
    let g:gutentags_ctags_extra_args += ['/home/lucas/.local/share/rbenv/versions/3.1.0/lib/ruby/3.1.0']
  endfunction

  function! s:SetupPerlTags()
    let g:gutentags_ctags_extra_args += ['/home/lucas/.local/share/perl5/perlbrew/build/perl-5.35.4/perl-5.35.4']
  endfunction

  augroup gutentags
    autocmd!
    autocmd! User vim-gutentags call gutentags#setup_gutentags()
    autocmd! FileType cpp call <SID>SetupCPPTags()
    autocmd! FileType ruby call <SID>SetupRubyTags()
    autocmd! FileType perl call <SID>SetupPerlTags()
  augroup END
  " endif

Plug 'liuchengxu/vista.vim'
  let g:vista_sidebar_position = 'topleft vertical'
  let g:vista#renderer#enable_icon = 1

  nmap <A-\> :Vista finder coc<CR>
  nmap <A-]> :CocCommand fzf-preview.VistaBufferCtags<CR>
  " nmap <A-]> :<C-u>CocCommand fzf-preview.VistaBufferCtags --add-fzf-arg=--preview-window=':nohidden,bottom:50%'<CR>
  nmap <A-[> :CocCommand fzf-preview.VistaCtags<CR>

  nmap <silent> <Leader>T  :Tags<CR>
  nmap <silent> <A-t> :BTags<CR>
  nmap <silent> <LocalLeader>t  :CocCommand fzf-preview.BufferTags<CR>
  " nmap <C-S-\> :CocCommand fzf-preview.VistaCtags<CR>
  let g:vista_fzf_preview = ['down:50%']
  let g:vista_fzf_opt = ['--no-border']
  " 'markdown': 'toc',"
  let g:vista_default_executive = 'coc'
" }}} === gutentag | vista === "

  " nvim-blame-line {{{ "
  Plug 'tveskag/nvim-blame-line'
  augroup git_blame
      au!
      let g:blameLineVirtualTextHighlight = 'GitBlameVirtualText'
      let g:blameLineVirtualTextFormat = '  git: %s'
      let g:blameLineGitFormat = '%an | %ar | %s'
      nnoremap <silent> <leader>gb :ToggleBlameLine<CR>
      " autocmd BufEnter * EnableBlameLine
  augroup END
  " }}} nvim-blame-line "

" ============== Neoterm ============== {{{
Plug 'kassio/neoterm'
  let g:neoterm_default_mod='belowright' " open terminal in bottom split
  let g:neoterm_size=14                  " terminal split size
  let g:neoterm_autoscroll=1             " scroll to the bottom
  " nnoremap <Leader>rf :T ptipython<CR>
  " some modules do not work in ptpython
  nnoremap <Leader>rr :Tclear<CR>
  nnoremap <Leader>rt :Ttoggle<CR>
  nnoremap <Leader>ro :Ttoggle<CR> :Ttoggle<CR>
"}}} === Neoterm ===

" ============== Floaterm | lf | lazygit ============== {{{
Plug 'ptzz/lf.vim'
Plug 'voldikss/vim-floaterm'
Plug 'voldikss/fzf-floaterm'
Plug 'kdheepak/lazygit.nvim'
  nnoremap <silent> <Leader>lg :LazyGit<CR>
  nnoremap <Leader>fll :Floaterms<CR>
  nnoremap <Leader>flt :FloatermToggle<CR>
  let g:fzf_floaterm_newentries = {
    \ '+lazygit' : {
        \ 'title': 'lazygit',
        \ 'height': 0.9,
        \ 'width': 0.9,
        \ 'cmd' : 'lazygit' },
    \ '+gitui' : {
        \ 'title': 'gitui',
        \ 'height': 0.9,
        \ 'width': 0.9,
        \ 'cmd' : 'gitui' },
    \ '+taskwarrior-tui' : {
        \ 'title': 'taskwarrior-tui',
        \ 'height': 0.99,
        \ 'width': 0.99,
        \ 'cmd' : 'taskwarrior-tui' },
    \ '+flf' : {
        \ 'title': 'full screen lf',
        \ 'height': 0.9,
        \ 'width': 0.9,
        \ 'cmd' : 'lf' },
    \ '+slf' : {
        \ 'title': 'split screen lf',
        \ 'wintype': 'split',
        \ 'height': 0.5,
        \ 'cmd' : 'lf' },
    \ '+xplr' : {
        \ 'title': 'xplr',
        \ 'cmd' : 'xplr' },
    \ '+gpg-tui' : {
      \ 'title': 'gpg-tui',
      \ 'height': 0.9,
      \ 'width': 0.9,
      \ 'cmd': 'gpg-tui'},
    \ '+tokei' : {
      \ 'title': 'tokei',
      \ 'height': 0.9,
      \ 'width': 0.9,
      \ 'cmd': 'tokei'},
    \ '+dust' : {
      \ 'title': 'dust',
      \ 'height': 0.9,
      \ 'width': 0.9,
      \ 'cmd': 'dust'},
        \}
  let g:floaterm_shell = 'zsh'
  let g:floaterm_wintype = 'float'
  let g:floaterm_height=0.8
  let g:floaterm_width=0.8
  " Stackoverflow helper
  nmap <Leader>so : FloatermNew --autoclose=0 so<space>

  let g:lf_map_keys = 0
  let g:lf_replace_netrw = 1
  nnoremap <Leader>lf :Lf<CR>
  nnoremap <C-o> :Lf<CR>
" }}}  === Floaterm | lf ===

" ============== git  ============== {{{
" Plug 'airblade/vim-gitgutter'

" ============== fugitive ============== {{{
Plug 'tpope/vim-fugitive'
  nnoremap <Leader>gu :G<CR>3j
  nnoremap <Leader>gq :G<CR>:q<CR>
  nnoremap <Leader>gw :Gwrite<CR>
  nnoremap <Leader>gr :Gread<CR>
  nnoremap <Leader>gh :diffget //2<CR>
  nnoremap <Leader>gl :diffget //3<CR>
  nnoremap <Leader>gp :Git push<CR>

  nmap <silent> <LocalLeader>gg  :CocCommand fzf-preview.GitActions<CR>
  nmap <silent> <LocalLeader>gs  :CocCommand fzf-preview.GitStatus<CR>
  nmap <silent> <LocalLeader>gr  :CocCommand fzf-preview.GitLogs<CR>
  nmap <silent> <LocalLeader>gp  :<C-u>CocList --normal gstatus<CR>

  nmap <silent> <Leader>gD :CocCommand git.diffCached<CR>
  nmap <silent> <Leader>gu :<C-u>CocCommand git.chunkUndo<CR>
  nmap <silent> ,ga :<C-u>CocCommand git.chunkStage<CR>
  nmap <silent> <Leader>gF :<C-u>CocCommand git.foldUnchanged<CR>
  nmap <silent> <Leader>go :<C-u>CocCommand git.browserOpen<CR>
  nmap <silent> <Leader>gla :<C-u>CocList commits<cr>
  nmap <silent> <Leader>glc :<C-u>CocList bcommits<cr>
  nmap <silent> <Leader>gll <Plug>(coc-git-commit)

  nmap [q :cprev<CR>
  nmap ]q :cnext<CR>
  nmap [Q :cfirst<CR>
  nmap ]Q :clast<CR>
  nmap <Leader>d :Gdiff<CR>
" }}} === fugitive ===

" ============== vimagit ============== {{{
" Plug 'jreybert/vimagit'
  " nnoremap  <Leader>ma :MagitO<Cr>
  " Plug 'TimUntersberger/neogit'
" }}} === vimagit ===
" }}} === git ===

" ============== UndoTree ============== {{{
  Plug 'mbbill/undotree', { 'on':  'UndotreeToggle' } | nnoremap <Leader>ut :UndotreeToggle<CR>
  let g:undotree_RelativeTimestamp = 1
  let g:undotree_ShortIndicators = 1
  let g:undotree_HelpLine = 0
  let g:undotree_WindowLayout = 2
"}}} === UndoTree ===

" ============== nerdcommenter ============== {{{
Plug 'preservim/nerdcommenter'
  let NERDSpaceDelims = 1
  let g:NERDCreateDefaultMappings = 0
  let g:NERDTrimTrailingWhitespace = 1
  let g:NERDToggleCheckAllLines = 1
  let g:NERDCompactSexyComs = 1
  let g:NERDCommentEmptyLines = 1
  let g:NERDDefaultAlign = 'left'
  let g:NERDCustomDelimiters = { 'just': { 'left': '#'}}
  " vim registers <C-/> as <C-_>
  nnoremap <C-_> :call nerdcommenter#Comment(0, "toggle")<CR>j
  vnoremap <C-_> :call nerdcommenter#Comment(0, "toggle")<CR>'>j
  " copy & comment
  nnoremap <Leader>yc yyP<C-_>
  vnoremap <Leader>yc yPgp<C-_>
  map gc :call nerdcommenter#Comment(0, "toggle")<CR>
  " nmap gcc :call nerdcommenter#Comment(0, "toggle")<CR>
  map gcy :call nerdcommenter#Comment(0, "yank")<CR>
  nmap <Leader>gcy :call nerdcommenter#Comment(0, "yank")<CR>
" }}} === nerdcomment ===

" ============== indentline ============== {{{
Plug 'yggdroot/indentline'
  source ~/.vim/indentline.vim
" }}}

" ============ coc-nvim ============ {{{
" Plug 'tjdevries/coc-zsh'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-perl/vim-perl', { 'for': 'perl' }
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'}
" Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'antoinemadec/coc-fzf'
  " prettier command for coc
  command! -nargs=0 CocMarket :CocFzfList marketplace
  command! -nargs=0 Prettier :CocCommand prettier.formatFile

  " nnoremap <silent> <A-'>  :<C-u>CocList yank<CR>
  nnoremap <silent> <A-'> :CocFzfList yank<CR>

  nnoremap <LocalLeader>c :Telescope coc<CR>
  nnoremap <C-x><C-l> :CocFzfList<CR>
  nnoremap <A-s> :CocFzfList symbols<CR>
  " nnoremap <A-c> :CocFzfList commands<CR>
  nnoremap <A-c> :Telescope coc commands<CR>

  " nnoremap <C-x><C-r> :CocCommand fzf-preview.CocReferences<CR>
  nnoremap <C-x><C-d> :CocCommand fzf-preview.CocTypeDefinition<CR>
  nnoremap <C-x><C-]> :CocCommand fzf-preview.CocImplementations<CR>
  nnoremap <C-x><C-h> :CocCommand fzf-preview.CocDiagnostics<CR>
  " This seems to only do current buffer
  nnoremap <C-x>h :Telescope coc diagnostics<CR>

  " TODO: Use more!
  " remap for do codeAction of current line
  nmap <Leader>wc  <Plug>(coc-codeaction)
  xmap <Leader>w  <Plug>(coc-codeaction-selected)
  nmap <Leader>ww  <Plug>(coc-codeaction-selected)

  nnoremap <C-x><C-r> :Telescope coc references<CR>
  nnoremap <C-[> :Telescope coc definitions<CR>
  " nnoremap <C-x><C-]> :Telescope coc implementations<CR>
  " nnoremap <C-x><C-h> :Telescope coc diagnostics<CR>

  nnoremap ;s :Telescope coc workspace_symbols<CR>

  nnoremap ;n :Telescope coc locations<CR>
  " type_definitions

  " \  "coc-rls",
  let g:coc_fzf_opts = ['--no-border', '--layout=reverse-list']
  let g:coc_global_extensions = [
    \  "coc-sumneko-lua",
    \  "coc-json",
    \  "coc-clangd",
    \  "coc-css",
    \  "coc-go",
    \  "coc-html",
    \  "coc-markdownlint",
    \  "coc-java",
    \  "coc-perl",
    \  "coc-pyright",
    \  "coc-r-lsp",
    \  "coc-rust-analyzer",
    \  "coc-solargraph",
    \  "coc-solidity",
    \  "coc-sql",
    \  "coc-toml",
    \  "coc-vimlsp",
    \  "coc-xml",
    \  "coc-yaml",
    \  "coc-zig",
    \  "coc-tsserver",
    \  "coc-eslint",
    \  "coc-syntax",
    \  "coc-prettier",
    \  "coc-diagnostic",
    \  "coc-fzf-preview",
    \  "coc-marketplace",
    \  "coc-tabnine",
    \  "coc-tag",
    \  "coc-word"
    \ ]

    " \  "coc-yank",
    " \  "coc-lightbulb",
    " \ 'coc-clojure',
    " \ 'coc-nginx',
    " \ 'coc-toml',

  " use `[g` and `]g` to navigate diagnostics
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)
  nnoremap <silent> <leader>? :call CocAction('diagnosticInfo')<CR>
  " nmap <silent> )g :call CocAction('diagnosticNext')<CR>
  " nmap <silent> (g :call CocAction('diagnosticPrevious')<CR>

  " goto code navigation
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " remap for rename current word
  nmap <Leader>rn <Plug>(coc-rename)

  xmap <Leader>fm <Plug>(coc-format-selected)
  nmap <Leader>fm <Plug>(coc-format-selected)

  " fix autofix problem of current line
  nmap <Leader>qf  <Plug>(coc-fix-current)

  " create mappings for function text object
  xmap if <Plug>(coc-funcobj-i)
  xmap af <Plug>(coc-funcobj-a)
  omap if <Plug>(coc-funcobj-i)
  omap af <Plug>(coc-funcobj-a)

  " nmap {g <Plug>(coc-git-prevchunk)
  " nmap }g <Plug>(coc-git-nextchunk)
  " navigate conflicts of current buffer
  nmap [c <Plug>(coc-git-prevconflict)
  nmap ]c <Plug>(coc-git-nextconflict)
  " show chunk diff at current position
  nmap gs <Plug>(coc-git-chunkinfo)
  " show commit contains current position
  nmap gC <Plug>(coc-git-commit)

  nmap <silent> <Leader><Leader>o <Plug>(coc-openlink)
  " nmap <silent> <leader><space><space>l <Plug>(coc-codelens-action)

  " inoremap <silent><expr> <C-j>
  "       \ coc#jumpable() ? "\<C-R>=coc#rpc#request('snippetNext', [])\<cr>" :
  "       \ pumvisible() ? coc#_select_confirm() :
  "       \ "\<Down>"
  " inoremap <silent><expr> <C-k>
  "       \ coc#jumpable() ? "\<C-R>=coc#rpc#request('snippetPrev', [])\<cr>" :
  "       \ "\<Up>"

inoremap <silent><expr> <tab>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

  augroup cocgroup
      au!
      au FileType rust,scala,python,ruby,perl,lua,c,cpp,zig,d,javascript nmap <silent> <c-]> <Plug>(coc-definition)
      " Highlight symbol under cursor on CursorHold
      au CursorHold * silent call CocActionAsync('highlight')
      " Setup formatexpr specified filetype(s).
      au FileType typescript,json setl formatexpr=CocAction('formatSelected')
      " Update signature help on jump placeholder
      au User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
      au FileType log :let b:coc_enabled = 0
  augroup end

  " coc-snippets
  " imap <C-j> <Plug>(coc-snippets-expand-jump)

  " use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')
  " use `:Fold` to fold current buffer
  command! -nargs=? Fold :call CocAction('fold', <f-args>)
  " use `:OR` for organize import of current buffer
  command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

  let g:endwise_no_mappings = v:true

  " use K to show documentation in preview window.
  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

    " elseif (index(['rust'], &filetype) >= 0)
    "   execute 'set winblend=0 | FloatermNew --autoclose=0 rusty-man --viewer tui' . " " . expand('<cword>')

  nnoremap <silent> K :call <SID>show_documentation()<CR>

  " Make <CR> auto-select the first completion item
  " inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
  " \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " Use <c-space> to trigger completion
  inoremap <silent><expr> <C-'> coc#refresh()

  inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

  " inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

  " coc-pairs
  augroup CocPairs
    autocmd!
    autocmd FileType markdown let b:coc_pairs_disabled = ['`', "'"]
    autocmd FileType vim,vifm let b:coc_pairs_disabled = ['"']
    autocmd FileType *        let b:coc_pairs_disabled = ['<']
  augroup end
  " Highlight the symbol and its references when holding the cursor.
  autocmd CursorHold * silent call CocActionAsync('highlight')
" }}} === coc-nvim ===

" ============ formatting ============ {{{
" Plug 'karb94/neoscroll.nvim'
" Plug 'mhartington/formatter.nvim'

Plug 'sbdchd/neoformat'
let g:neoformat_basic_format_retab = 1
let g:neoformat_basic_format_trim = 1
let g:neoformat_basic_format_align = 1

 " Formatting options that are better than coc's :Format
  nnoremap ;ff :Format<CR>
  augroup formatting
      autocmd!
      autocmd FileType lua        nmap ;ff :Neoformat! lua    luaformat<CR>
      autocmd FileType java       nmap ;ff :Neoformat! java   prettier<CR>
      autocmd FileType perl       nmap ;ff :Neoformat! perl<CR>
      autocmd FileType sh         nmap ;ff :Neoformat! sh<CR>
      autocmd FileType python     nmap ;ff :Neoformat! python black<CR>
      autocmd FileType md,vimwiki nmap ;ff :Neoformat!<CR>
      autocmd FileType zsh        nmap ;ff :Neoformat  expand<CR>
  augroup end
" }}} === formatting ===

" ============= targets ============== {{{
Plug 'wellle/targets.vim'
  " Cheatsheet: https://github.com/wellle/targets.vim/blob/master/cheatsheet.md
  " vI) = contents inside pair
  " vAa = around alignment
  " in( an( In( An( il( al( Il( Al( ... next and last pair
  augroup define_object
    autocmd User targets#mappings#user call targets#mappings#extend({
          \ 'a': {'argument': [{'o':'(', 'c':')', 's': ','}]}
          \ })
  augroup END

" }}} === targets ===

" ============== vim-slime | python ============== {{{
Plug 'jpalardy/vim-slime', { 'for': 'python' }
" Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}
" let g:semshi#error_sign = v:false
  let g:slime_target = "neovim"
  let g:syntastic_python_pylint_post_args="--max-line-length=120"
  if !empty(glob('$XDG_DATA_HOME/pyenv/shims/python3'))
    let g:python3_host_prog = glob('$XDG_DATA_HOME/pyenv/shims/python')
  endif

  augroup repl
    autocmd!
    autocmd FileType python
      \ xmap <buffer> ,l <Plug>SlimeRegionSend|
      \ nmap <buffer> ,l <Plug>SlimeLineSend|
      \ nmap <buffer> ,p <Plug>SlimeParagraphSend|
      \ nnoremap <silent> ✠ :TREPLSendLine<CR><Esc><Home><Down>|
      \ inoremap <silent> ✠ <Esc>:TREPLSendLine<CR><Esc>A|
      \ xnoremap <silent> ✠ :TREPLSendSelection<CR><Esc><Esc>
      \ nnoremap <Leader>rF :T ptpython<CR>|
      \ nnoremap <Leader>rf :T ipython --no-autoindent --colors=Linux --matplotlib<CR>|
      \ nmap <buffer> <Leader>r<CR> :VT python %<CR>|
      \ nnoremap ,rp :SlimeSend1 <C-r><C-w><CR>|
      \ nnoremap ,rP :SlimeSend1 print(<C-r><C-w>)<CR>|
      \ nnoremap ,rs :SlimeSend1 print(len(<C-r><C-w>), type(<C-r><C-w>))<CR>|
      \ nnoremap ,rt :SlimeSend1 <C-r><C-w>.dtype<CR>|
      \ nnoremap 223 ::%s/^\(\s*print\)\s\+\(.*\)/\1(\2)<CR>|
      \ nnoremap ,rr :FloatermNew --autoclose=0 python %<space>|
      \ call <SID>IndentSize(4)
    autocmd FileType perl nmap <buffer> ,l <Plug>SlimeLineSend
  augroup END
" }}} === vim-slime | python ===

" ============== vim-rust ============== {{{
Plug 'nastevens/vim-cargo-make'
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
" FIX: visual selection
" \ nmap     <buffer> <Leader>d<CR> :VT cargo play $(pwd)/**.rs<CR>|
" Trying to decide which one is the best (play, eval, rust-script)
augroup rust_env
  autocmd!
  autocmd FileType rust
    \ nmap     <buffer> <Leader>h<CR> :VT cargo clippy<CR>|
    \ nmap     <buffer> <Leader>n<CR> :VT cargo run   -q<CR>|
    \ nmap     <buffer> <Leader><Leader>n :VT cargo run -q<space>|
    \ nmap     <buffer> <Leader>t<CR> :RustTest<CR>|
    \ nmap     <buffer> <Leader>b<CR> :VT cargo build -q<CR>|
    \ nmap     <buffer> <Leader>r<CR> :VT cargo play  %<CR>|
    \ nmap     <buffer> <Leader><Leader>r :VT cargo play % -- |
    \ nmap     <buffer> <Leader>v<CR> :VT rust-script %<CR>|
    \ nmap     <buffer> <Leader><Leader>v :VT rust-script % -- |
    \ nmap     <buffer> <Leader>e<CR> :VT cargo eval  %<CR>|
    \ vnoremap <a-f> <esc>`<O<esc>Sfn main() {<esc>`>o<esc>S}<esc>k$|
    \ nnoremap <Leader>K : set winblend=0 \| FloatermNew --autoclose=0 rusty-man --viewer tui<space>|
    \ nnoremap <Leader>k : set winblend=0 \| FloatermNew --autoclose=0 rusty-man <C-r><C-w> --viewer tui<CR>|
    \ nnoremap <buffer> ;ff           :RustFmt<cr>
augroup END
" \ nnoremap ;k : set winblend=0 \| FloatermNew --autoclose=0 rusty-man <C-R>0<CR>|
" }}} === vim-rust ===

" ================ zig ================= {{{
augroup zig_env
  autocmd!
  autocmd FileType zig
    \ nnoremap <Leader>r<CR> : FloatermNew --autoclose=0 zig run ./%<CR>|
    \ nnoremap <buffer> ;ff           :Format<cr>
augroup END
" }}} === zig ===

" ============== vim-go ============== {{{
Plug 'fatih/vim-go', { 'for': 'go' }
" run and view go output in floating or split window
  function! s:run_go(...)
    if filereadable(expand("%:r"))
      call delete(expand("%:r"))
    endif
    write
    let arg = get(a:, 1, 0)
    if arg == "split"
      execute 'FloatermNew --autoclose=0 --wintype=vsplit --width=0.5 '
        \ . ' go build ./% && ./%:r'
    elseif arg == "float"
      execute 'FloatermNew --autoclose=0 go build ./% && ./%:r'
    endif
  endfunction
  command! GORUNS :call s:run_go("split")
  command! GORUN :call s:run_go("float")
  augroup GoRunCust
    autocmd!
    autocmd FileType go nnoremap <Leader>rv :GORUNS<CR>
    autocmd FileType go nnoremap <Leader>ru :GORUN<CR>
  augroup END
  " au FileType go nmap <Leader>rp <Plug>(go-run)
  " au FileType go nmap <Leader>rv <Plug>(go-run-vertical)

  function! s:build_go_files()
    let l:file = expand('%')
    if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
    elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
    endif
  endfunction

  augroup go_env
    autocmd!
    " Note: Do not change the order!
    " Note: Do not comment lines inplace
    " nmap <buffer> <Leader>K <Plug>(go-doc)|
    " let g:go_doc_popup_window = 1
    let g:go_rename_command = 'gopls'
    autocmd FileType go
      \ setl nolist|
      \ nmap <buffer> <Leader>b<CR> :call <SID>build_go_files()<CR>|
      \ nmap <buffer> <Leader>r<CR> <Plug>(go-run)|
      \ nmap <buffer> <Leader>rr    :GoRun %<CR>|
      \ nmap <buffer> <Leader>ri    :GoRun %<space>|
      \ nmap <buffer> <Leader>t<CR> <Plug>(go-test)|
      \ nmap <buffer> <Leader>c<CR> <Plug>(go-coverage-toggle)|
      \ nmap <buffer> <Leader>gae <Plug>(go-alternate-edit)|
      \ nmap <buffer> <Leader>i <Plug>(go-info)|
      \ nmap <buffer> <Leader>sm :GoSameIdsToggle<CR>|
      \ nmap <buffer> <C-A-n> :cnext<CR>|
      \ nmap <buffer> <C-A-m> :cprevious<CR>|
      \ nmap <buffer> <Leader>f :GoDeclsDir<cr>|
      \ nmap <buffer> ;ff :GoFmt<CR>|
      \ let g:go_fmt_command = "goimports"|
      \ let g:go_list_type = "quickfix"|
      \ let g:go_highlight_types = 1|
      \ let g:go_highlight_fields = 1|
      \ let g:go_highlight_functions = 1|
      \ let g:go_highlight_methods = 1|
      \ let g:go_highlight_operators = 1|
      \ let g:go_highlight_build_constraints = 1|
      \ let g:go_highlight_generate_tags = 1|
      \ let g:go_gocode_propose_builtins = 1|
      \ let g:go_gocode_unimported_packages = 1|
      \ let g:go_doc_keywordprg_enabled = 0|
      \ let g:go_fmt_fail_silently = 1|
      \ command! -bang A call go#alternate#Switch(<bang>0, 'edit')|
      \ command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')|
      \ command! -bang AS call go#alternate#Switch(<bang>0, 'split')|
      "\ let g:go_auto_type_info = 1|
      "\ let g:go_updatetime = 100|
      "\ let g:go_auto_sameids = 1|
      "\ let g:go_play_open_browser = 1|
  augroup END
" }}} === vim-go ===

  nnoremap <Leader>mcs :vs ~/vimwiki/dotfiles/mkdx.md<CR>
  nnoremap <Leader>mdm :menu Plugin.mkdx<CR>
  nnoremap <Leader>ec :e ~/.config/nvim/coc-settings.json<CR>
  nnoremap <Leader>ev :e $VIMRC<CR>
  nnoremap <Leader>sv :so $VIMRC<CR>
  nnoremap <Leader>ez :e $ZDOTDIR/.zshrc<CR>

" ============== UltiSnips ============== {{{
" Plug 'SirVer/ultisnips'
" Plug 'honza/vim-snippets'
  " let g:UltiSnipsExpandTrigger='<C-S-1>'
  " let g:UltiSnipsJumpForwardTrigger='<C-j>'
  " let g:UltiSnipsJumpBackwardTrigger='<C-k>'
  " let g:UltiSnipsListSnippets="<C-u>"
  " let g:UltiSnipsEditSplit='horizontal'

" Plug 'vim-scripts/RltvNmbr.vim'
" nmap <Leader>rl :RltvNmbr<CR>

" }}} ==== UltiSnips ===

" ========= Syntax Highlighting ======== {{{
Plug 'sheerun/vim-polyglot'
let g:polyglot_disabled = ['markdown', 'python', 'rust', 'java', 'lua', 'ruby', 'zig', 'd']
Plug 'wfxr/dockerfile.vim'  | let g:polyglot_disabled += ['dockerfile']
Plug 'rhysd/vim-rustpeg'    | let g:polyglot_disabled += ['rustpeg']
Plug 'NoahTheDuke/vim-just' | let g:polyglot_disabled += ['just']
Plug 'camnw/lf-vim'         | let g:polyglot_disabled += ['lf']
Plug 'ron-rs/ron.vim'       | let g:polyglot_disabled += ['ron']
Plug 'mattn/vim-xxdcursor'  | Plug 'fidian/hexmode'     | let g:hexmode_patterns = '*.o,*.so,*.a,*.out,*.bin,*.exe'
Plug 'jamessan/vim-gnupg'

"}}} === Syntax Highlighting ===

Plug 'gelguy/wilder.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" ============== FZF & Ripgrep ============== {{{
" Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
" Plug 'yuki-yano/fzf-preview.vim', { 'branch': 'release/rpc' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } } | Plug 'junegunn/fzf.vim'
  command! -bang Colors
    \ call fzf#vim#colors(g:fzf_vim_opts, <bang>0)
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>,
    \ fzf#vim#with_preview(g:fzf_vim_opts, 'right:60%:default'), <bang>0)
  command! -bang Buffers
    \ call fzf#vim#buffers(
    \ fzf#vim#with_preview(g:fzf_vim_opts, 'right:60%:default'), <bang>0)
  command! -bang -complete=dir -nargs=? LS
    \ call fzf#run(fzf#wrap({'source': 'ls', 'dir': <q-args>}, <bang>0))
  command! -bang Conf
    \ call fzf#vim#files('~/.config', <bang>0)
  command! -bang Proj
    \ call fzf#vim#files('~/projects', fzf#vim#with_preview(), <bang>0)
  command! -nargs=? -complete=dir AF
    \ call fzf#run(fzf#wrap(fzf#vim#with_preview({
      \ 'source': 'fd --type f --hidden --follow --exclude .git --no-ignore
      \ . '.expand(<q-args>) })))

  " command! -bang -nargs=* Rg
  "   \ call fzf#vim#grep(
  "   \   'rg --column --line-number --no-heading '
  "     \ . '--color=always --smart-case -- '.shellescape(<q-args>), 1,
  "   \   fzf#vim#with_preview(g:fzf_vim_opts, 'right:60%:default'), <bang>0)

    " prevent from searching for file names as well
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
      \ 'rg --column --line-number --hidden --smart-case '
        \ . '--no-heading --color=always '
        \ . shellescape(<q-args>),
        \ 1,
        \ {'options':  '--delimiter : --nth 4..'},
        \ 0)

  " TODO: add option for trans -d
  " TODO: add option for uni-fzf
  " FIX: open line in current buffer only
    command! -bang -nargs=* Rgf call RGF()
    function! RGF()
      " . ' -F '.expand('%:t')"
      let fixmestr =
        \ '(FIXME|FIX|DISCOVER|NOTE|NOTES|INFO|OPTIMIZE|XXX|EXPLAIN|TODO|HACK|BUG|BUGS):'
      call fzf#vim#grep(
        \ 'rg --column --no-heading --line-number --color=always '.shellescape(fixmestr),
        \ 1,
        \ {'options':  '--delimiter : --nth 4..'}, 0)
    endfunction

  " RG with preview
  command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
  function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --line-number --no-heading '
      \ . '--color=always --smart-case -- %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options':
      \ ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1,
      \ fzf#vim#with_preview(spec, 'right:60%:default'), a:fullscreen)
  endfunction

  " dotbare (dotfile manager) - edit file
  command! Dots call fzf#run(fzf#wrap({
  \ 'source': 'dotbare ls-files --full-name --directory "${DOTBARE_TREE}" '
    \ . '| awk -v home="${DOTBARE_TREE}/" "{print home \$0}"',
  \ 'sink': 'e',
  \ 'options': [ '--multi', '--preview', 'cat {}' ]
  \ }))

  function! s:plug_help_sink(line)
    let dir = g:plugs[a:line].dir
    for pat in ['doc/*.txt', 'README.md']
      let match = get(split(globpath(dir, pat), "\n"), 0, '')
      if len(match)
        execute 'tabedit' match
        return
      endif
    endfor
    tabnew
    execute 'Explore' dir
  endfunction

  command! PlugHelp call fzf#run(fzf#wrap({
    \ 'source': sort(keys(g:plugs)),
    \ 'sink':   function('s:plug_help_sink')}))

  " TODO: Make like macho
  " nmap ... :Telescope man_pages
  command! -nargs=? Apropos call fzf#run(fzf#wrap({
      \ 'source': 'apropos '
          \ . (len(<q-args>) > 0 ? shellescape(<q-args>) : ".")
          \ .' | cut -d " " -f 1',
      \ 'sink': 'tab Man',
      \ 'options': [
          \ '--preview', 'MANPAGER=cat MANWIDTH='.(&columns/2-4).' man {}']}))

  " \ . '| grep -vE "^.+ \(0\)" | awk ''{print $2 "    " $1}'' | sed -E "s/^\((.+)\)/\1/"',

  " Line completion (same as :Bline)
  " imap <C-a> <C-x><C-l>
  imap <C-x><C-z> <Plug>(fzf-complete-line)
  " inoremap <expr> <C-x><c-d> fzf#vim#complete('cat /usr/share/dict/words')

    " word completion popup
  inoremap <expr> <C-x><C-w> fzf#vim#complete#word({
    \ 'window': { 'width': 0.2, 'height': 0.9, 'xoffset': 1 }})

  " word completion window
  inoremap <expr> <C-x><C-a> fzf#vim#complete({
    \ 'source':  'cat /usr/share/dict/words',
    \ 'options': '--multi --reverse --margin 15%,0',
    \ 'left':    20})

  " clipboard manager -- unsure why a direct mapping doesn't work
  inoremap <expr> <a-.> fzf#vim#complete({
    \ 'source': 'copyq eval -- "tab(\"&clipboard\"); for(i=size(); i>0; --i) print(str(read(i-1)) + \"\n\");" \| tac',
    \ 'options': '--no-border',
    \ 'reducer': { line -> substitute(line[0], '^ *[0-9]\+ ', '', '') },
    \ 'window': 'call FloatingFZF()'})

  inoremap <expr> <a-;> fzf#complete({
      \ 'source': 'greenclip print 2>/dev/null \| grep -v "^\s*$" \| nl -w2 -s" "',
      \ 'options': '--no-border',
      \ 'reducer': { line -> substitute(line[0], '^ *[0-9]\+ ', '', '') },
      \ 'window': 'call FloatingFZF()'})

  function! s:create_float(hl, opts)
    let buf = nvim_create_buf(v:false, v:true)
    let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
    let win = nvim_open_win(buf, v:true, opts)
    call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
    call setwinvar(win, '&colorcolumn', '')
    return buf
  endfunction

  function! FloatingFZF()
    " Size and position
    let width = float2nr(&columns * 0.9)
    let height = float2nr(&lines * 0.6)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)

    " Border
    let top = '┏━' . repeat('─', width - 4) . '━┓'
    let mid = '│'  . repeat(' ', width - 2) .  '│'
    let bot = '┗━' . repeat('─', width - 4) . '━┛'
    let border = [top] + repeat([mid], height - 2) + [bot]

    " Draw frame
    let s:frame = s:create_float('Comment',
      \ {'row': row, 'col': col, 'width': width, 'height': height})
    call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)

    " Draw viewport
    call s:create_float('Normal',
      \ {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})

    augroup fzf_floating
      au!
      au BufWipeout <buffer> execute 'bwipeout' s:frame
    augroup END
  endfunction

  " :Commands -- :GFiles? -- :Commits
  " change directory to buffers dir
  nmap <Leader>cd :lcd %:p:h<CR>
  nmap <Leader>Lo :Locate .<CR>
  nmap <C-f> :Rg<CR>

  map ;c :Telescope commands<CR>
  map ;B :Telescope bookmarks<CR>
  nnoremap ;b <cmd>Telescope builtin<CR>

  nmap <silent> <Leader>bu  :Telescope buffers<CR>
  nmap <silent> <LocalLeader>b :Telescope buffers theme=get_dropdown<CR>
  nmap <silent> <Leader>a  :CocCommand fzf-preview.AllBuffers<CR>
  nmap <silent> <Leader>A  :Windows<CR>

  nmap <silent> <Leader>C  :CocCommand fzf-preview.Changes<CR>

  " == Lines
  " nmap <silent> <Leader>;  :BLines<CR>
  " nmap <silent> <Leader>;  :CocCommand fzf-preview.BufferLines<CR>
  nmap <silent> <LocalLeader>;  :CocCommand fzf-preview.Lines<CR>
  nmap <Leader>; :Telescope current_buffer_fuzzy_find<CR>

  " == Grep
  nmap ;e :Telescope live_grep theme=get_ivy<CR>
  nmap ;r :Telescope git_grep<CR>
  nmap <LocalLeader>r :RG<CR>

  " == Files
  nmap <silent> <A-f>  :Files<CR>
  nmap <silent> <LocalLeader>d  :CocCommand fzf-preview.ProjectFiles<CR>
  " nmap <silent> ,d  :CocCommand fzf-preview.DirectoryFiles<CR>
  " nmap <silent> <LocalLeader>r  :CocCommand fzf-preview.MruFiles<CR>
  nmap <silent> <LocalLeader>g  :CocCommand fzf-preview.GitFiles<CR>
  nnoremap ;fd <cmd>Telescope fd<CR>
  nmap <LocalLeader>f :Telescope find_files<CR>
  nmap <A-.> :Telescope frecency<CR>
  " nmap <A-.> :Telescope oldfiles<CR>
  nmap ;g :Telescope git_files<CR>

  " nmap <silent> <LocalLeader>T  :CocCommand fzf-preview.TodoComments<CR>
  nmap <silent> <LocalLeader>T  :TodoTelescope<CR>

  nmap <silent> <Leader>gf :GFiles<CR>
  " nmap <silent> <Leader>hc :History:<CR>
  nmap <silent> <Leader>hc :Telescope command_history<CR>
  nmap <silent> <Leader>hf :History<CR>
  " nmap <silent> <Leader>hh :History/<CR>
  nmap <silent> <Leader>hs :Telescope search_history<CR>

  nmap <Leader>cs :Telescope colorscheme<CR>
  " nmap <silent> <Leader>cs :Colors<CR>

  " nmap <silent> <leader><space><space>so :<C-u>CocCommand snippets.openSnippetFiles<cr>
  " nmap <silent> <Leader>se :<C-u>CocCommand snippets.editSnippets<cr>
  " nmap <silent> <Leader>si :Snippets<CR>
  nmap <silent> <Leader>se :CocFzfList snippets<CR>
  nmap <silent> <Leader>si :Telescope ultisnips<CR>
  nmap <silent> <Leader>ls :LS<CR>
  nmap <silent> <Leader>cm :Commands<CR>
  nmap <silent> <Leader>ht :Helptags<CR>

  " nmap <silent> <Leader>mk :Marks<CR>
  nmap <silent> <m-/>  :CocCommand fzf-preview.Marks<CR>
  nmap <Leader>mlm :marks<CR>
  nmap <Leader>mfd :delm! | delm A-Z0-9<CR>
  nmap <Leader>mld :delmarks a-z<CR>

  " nmap <silent> <Leader>mm :Maps<CR>
  nnoremap ;k <cmd>Telescope keymaps<CR>
  nmap <C-l>m <plug>(fzf-maps-n)
  xmap <C-l>m <plug>(fzf-maps-x)
  imap <C-l>m <plug>(fzf-maps-i)
  omap <C-l>m <plug>(fzf-maps-o)

  " hide status and ruler for fzf
  au FileType fzf
    \ set laststatus& laststatus=0 |
    \ au BufLeave <buffer> set laststatus&

  " let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files
  " let g:rg_command = 'rg --vimgrep --hidden'
  let g:rg_highlight = 'true'
  let g:rg_format = '%f:%l:%c:%m,%f:%l:%m'

  " let g:fzf_preview_window = ''
  let g:fzf_preview_quit_map = 1
  let g:fzf_history_dir = '~/.local/share/fzf-history'
  let g:fzf_layout = { 'window': 'call FloatingFZF()' }
  " let g:fzf_layout         = { 'down': '~40%' }
  let g:fzf_vim_opts = {'options': ['--no-border']} "
  let g:fzf_buffers_jump = 1
  let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-m': 'edit',
    \ 'alt-v':  'vsplit',
    \ 'alt-t':  'nabnew',
    \ 'alt-x':  'split',
    \}

  let $FZF_PREVIEW_PREVIEW_BAT_THEME = 'kimbro'
  let g:fzf_preview_use_dev_icons = 1
  let g:fzf_preview_dev_icon_prefix_string_length = 3
  let g:fzf_preview_dev_icons_limit = 2000
  let g:fzf_preview_default_fzf_options = {
    \ '--no-border': v:true,
    \ '--reverse': v:true,
    \ '--preview-window': 'wrap' ,
    \}
" }}} === FZF & Ripgrep ===

" ============== Themes ============== {{{
  " Plug 'Rigellute/rigel'
  " Plug 'lifepillar/vim-gruvbox8'
  " Plug 'morhetz/gruvbox'
  " Plug 'gavinok/spaceway.vim'
  Plug 'sainnhe/gruvbox-material'
  Plug 'sainnhe/edge'
  Plug 'sainnhe/everforest'
  Plug 'sainnhe/sonokai'
  Plug 'marko-cerovac/material.nvim'

  " Plug 'kaicataldo/material.vim', { 'branch': 'main' }
  " Plug 'embark-theme/vim', { 'as': 'embark' }
  " Plug 'mhartington/oceanic-next'
  " Plug 'aswathkk/DarkScene.vim'
" }}} === Themes ===

call plug#end()

" ============== Theme Settings ============== {{{
  " let g:gruvbox_material_background = 'medium'
  let g:gruvbox_material_palette = 'mix'
  " let g:gruvbox_material_palette = 'material'
  let g:gruvbox_material_background = 'hard'
  let g:gruvbox_material_enable_bold = 1
  let g:gruvbox_material_disable_italic_comment = 1
  let g:gruvbox_material_current_word = 'grey background'
  let g:gruvbox_material_visual = 'grey background'
  let g:gruvbox_material_cursor = 'green'
  let g:gruvbox_material_sign_column_background = 'none'
  let g:gruvbox_material_statusline_style = 'mix'
  let g:gruvbox_material_better_performance = 1
  let g:gruvbox_material_diagnostic_text_highlight = 0
  let g:gruvbox_material_diagnostic_line_highlight = 0
  let g:gruvbox_material_diagnostic_virtual_text = 'colored'

  let g:overcast_allow_bold = 1

  let g:oceanic_material_background = "ocean"
  " let g:oceanic_material_background = "deep"
  " let g:oceanic_material_background = "medium"
  " let g:oceanic_material_background = "darker"
  let g:oceanic_material_allow_bold = 1
  let g:oceanic_material_allow_italic = 1
  let g:oceanic_material_allow_underline = 1

  let g:everforest_disable_italic_comment = 1
  let g:everforest_background = 'hard'
  let g:everforest_enable_italic = 0
  let g:everforest_sign_column_background = 'none'
  let g:everforest_better_performance = 1

  let g:edge_style = 'aura'
  let g:edge_cursor = 'blue'
  let g:edge_sign_column_background = 'none'
  let g:edge_better_performance = 1

  " let g:material_theme_style = 'darker-community'
  let g:material_theme_style = 'ocean-community'
  let g:material_terminal_italics = 1

  " maia atlantis era
  " let g:sonokai_style = 'andromeda'
  let g:sonokai_style = 'shusia'
  let g:sonokai_enable_italic = 1
  let g:sonokai_disable_italic_comment = 1
  let g:sonokai_cursor = 'blue'
  let g:sonokai_sign_column_background = 'none'
  let g:sonokai_better_performance = 1
  let g:sonokai_diagnostic_text_highlight = 0

  " let g:miramare_enable_italic = 1
  let g:miramare_enable_bold = 1
  let g:miramare_disable_italic_comment = 1
  let g:miramare_cursor = 'purple'
  let g:miramare_current_word = 'grey background'

  let g:gruvbox_contrast_dark = 'medium'
  let g:spacegray_use_italics = 1

  set t_Co=256
  " set termguicolors

  syntax enable
  colorscheme gruvbox-material
  " colorscheme overcast
  " colorscheme serenade
  " colorscheme everforest
  " colorscheme gruvbox-material
  " colorscheme sonokai
  " colorscheme oceanic_material
  " colorscheme spaceduck
  " colorscheme bogster
  " colorscheme material
  " colorscheme miramare
  " colorscheme night-owl
  " colorscheme jellybeans
  " colorscheme deep-space
  " colorscheme melange
  " colorscheme iceberg
  " coloscheme OceanicNext
  " colorscheme deus
  " colorscheme onedark
  " colorscheme neodark
  " colorscheme spaceway    " needs work
  " colorscheme alduin      " needs work
  " colorscheme spacegray
  " colorscheme tokyonight

  " colorscheme material
  " edge daycula srcery dogrun palenight

" }}} === Theme Settings ===

" ============== Spell Check ============== {{{
  " set completeopt+=menuone,preview
  " set complete+=kspell complete-=w complete-=b complete-=u complete-=t
  " set spelllang=en_us
  " set spellsuggest+=10
  " set spellfile=~/.config/nvim/spell/en.utf-8.add
  " " nnoremap <silent> <F10> :set spell!<cr>
  " " inoremap <silent> <F10> <C-O>:set spell!<cr>
  " noremap <Leader>ss :setlocal spell!<CR>
  " noremap <Leader>sn ]s
  " noremap <Leader>sp [s
  " noremap <Leader>sa zg
  " noremap <Leader>s? z=
  " noremap <Leader>su zuw
  " noremap <Leader>su1 zug
  " augroup spell
  "   " add markdown
  "   autocmd!
  "   autocmd FileType text,gitcommit,markdown,mail setlocal spell
  "   autocmd BufRead,BufNewFile neomutt-void* setlocal spell
  " augroup END
" }}} === Spell Check ===

" ============== General Mappings ============== {{{
  nnoremap q: <Nop>
  nnoremap q/ <Nop>
  nnoremap q? <Nop>

  cnoreabbrev W! w!
  cnoreabbrev Q! q!
  cnoreabbrev Qall! qall!
  cnoreabbrev Wq wq
  cnoreabbrev Wa wa
  cnoreabbrev wQ wq
  cnoreabbrev WQ wq
  cnoreabbrev W w
  cnoreabbrev Qall qall


  nnoremap ;w :update<CR>
  " nnoremap w; :update<CR>
  nnoremap ;q :q<CR>
  nnoremap q; :q<CR>
  " replace command history with quit
  " map q: :MinimapToggle<CR> :q<CR>
  " map q: :q<CR>
  map Q: :q
  command! -bang -nargs=* Q q

  " use qq to record, q to stop, Q to play a macro
  " noremap Q gq
  nnoremap Q @q
  vnoremap Q :normal @q

  " easier navigation in normal / visual / operator pending mode
  noremap gkk   {
  noremap gjj   }
  noremap H     g^
  xnoremap H    g^
  noremap L     g_
  xnoremap L    g_

  " quit
  " noremap <C-c> :q<cr>
  " save write
  noremap <C-s> :update<cr>
  " save & quit
  " noremap <C-x> :x<cr>

  " save with root
  " cnoremap w!! w !sudo tee % >/dev/null<cr>
  cnoremap w!! execute ':silent w !sudo tee % > /dev/null' <bar> edit!
  cnoremap W!! w !sudo tee % >/dev/null<cr>

  " Replace all
  nnoremap S :%s//g<Left><Left>
  " Replace under cursor
  nnoremap <Leader>sr :%s/\<<C-r><C-w>\>/
  " Replace quotes on the line
  nnoremap <Leader>Q :s/'/"/g<CR>:nohlsearch<CR>
  " Title case enitre line
  nnoremap <Leader>sc :s/\v<(\w)(\S*)/\u\1\L\2/g<CR>:nohlsearch<CR>
  " s/\v<(.)(\w*)/\u\1\L\2/g

  " use tab and shift tab to indent and de-indent code
  nnoremap <Tab>   >>
  nnoremap <S-Tab> <<
  vnoremap <Tab>   >><Esc>gv
  vnoremap <S-Tab> <<<Esc>gv
  inoremap <S-Tab> <C-d>

  " Don't lose selection when shifting sidewards
  xnoremap < <gv
  xnoremap > >gv

  " use `u` to undo, use `U` to redo, mind = blown
  nnoremap U <C-r>

  " make deleting line not go to clipbard
  nnoremap d "_d
  vnoremap d "_d
  nnoremap D "_D
  " delete line without copying
  nnoremap E ^"_D
  " yank line without newline character
  nnoremap Y y$
  " make cut not go to clipboard
  nnoremap x "_x
  " reselect the text that has just been pasted
  nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'
  " select characters of line (no new line)
  nnoremap vv ^vg_
  " make visual yanks place the cursor back where started
  vnoremap y ygv<Esc>
  " insert a space after current character
  " nnoremap <Leader>sa a<Space><ESC>h

  " paste over selected text
  xnoremap p "_c<Esc>p

  " inserts a line above or below
  nnoremap <expr> zj printf('m`%so<ESC>``', v:count1)
  nnoremap <expr> zk printf('m`%sO<ESC>``', v:count1)
  nnoremap <silent> oo o<Esc>k
  nnoremap <silent> OO O<Esc>j

  " move through folded lines
  nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
  nnoremap   <expr> k (v:count == 0 ? 'gk' : 'k')
  " nnoremap <expr> j v:count ? (v:count > 5 ? "m'" . v:count : '') . 'j' : 'gj'
  " nnoremap <expr> k v:count ? (v:count > 5 ? "m'" . v:count : '') . 'k' : 'gk'

  " move selected text up down
  vnoremap J :m '>+1<CR>gv=gv
  vnoremap K :m '<-2<CR>gv=gv
  " inoremap <C-J> <Esc>:m .+1<CR>==a
  " inoremap <C-K> <Esc>:m .-2<CR>==a

  " move between windows
  noremap <C-j> <C-W>j
  noremap <C-k> <C-W>k
  noremap <C-h> <C-W>h
  noremap <C-l> <C-W>l

  " Using <ff> to fold or unfold
  nnoremap <silent> ff @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
  " nnoremap <silent> <SPACE><CR> zi
  nnoremap <silent><expr> fl &foldlevel ? 'zM' :'zR'

  " Remap mark jumping
  noremap ' `
  noremap ` '
  " g'" = last known position

  " buffer switching
  nnoremap gt :bnext<CR>
  nnoremap gT :bprevious<CR>
  nnoremap <C-S-Right> :bnext<CR>
  nnoremap <C-S-Left> :bprevious<CR>
  " new buffer
  nnoremap <Leader>bn :enew<cr>
  " close buffer
  nnoremap <Leader>bq :bp <bar> bd! #<cr>
  " close all buffers
  nnoremap <Leader>bQ :bufdo bd! #<cr>
  " list buffers
  nnoremap <silent> <Leader>bl :Telescope buffers<cr>

  " resize windows
  " nnoremap + :vertical resize +5<CR>
  " nnoremap - :vertical resize -5<CR>
  " nnoremap s+ :resize +5<CR>
  " nnoremap s- :resize -5<CR>

  map <C-Up> :resize +1<CR>
  map <C-Down> :resize -1<CR>
  map <C-Right> :vertical resize +1<CR>
  map <C-Left> :vertical resize -1<CR>

  " Change vertical to horizontal
  nnoremap <Leader>w- <C-w>t<C-w>K
  " Change horizontal to vertical
  nnoremap <Leader>w\ <C-w>t<C-w>H

  " perform dot commands over visual blocks
  vnoremap . :normal .<CR>

  " change tabs
  nnoremap <Leader>nt :setlocal noexpandtab<CR>
  xnoremap <Leader>re :retab!<CR>
  " close quickfix  TODO: delete one
  nnoremap <Leader>cc :cclose<CR>
  nnoremap <silent> \q :call toggle#ToggleQuickFix()<CR>
  nnoremap <silent> \l :call toggle#ToggleLocationList()<CR>

  " keep focused in center of screen when searching
  nnoremap <expr> n (v:searchforward ? 'nzzzv' : 'Nzzzv')
  nnoremap <expr> N (v:searchforward ? 'Nzzzv' : 'nzzzv')

  " insert a place holder
  inoremap ,p <++>

  " jump to the next '<++>' and edit it
  nnoremap <silent> <Leader>fe <Esc>/<++><CR>:nohlsearch<CR>c4l
  nnoremap <silent> <Leader>fi <Esc>/<++><CR>:nohlsearch<CR>
  inoremap <silent> ;f <Esc>/<++><CR>:nohlsearch<CR>"_c4l
  " }}} === General Mappings ===

" ============== docs ============== {{{
  " set filetypes
  " au Filetype *vim,*tmux setl foldenable | setl foldmethod=marker
  autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
  augroup cust_ft
    au!
    au BufRead,BufNewFile *.ztst            setl ft=ztst
    au BufRead,BufNewFile *pre-commit       setl ft=sh
    au BufNewFile,BufRead coc-settings.json setl ft=jsonc
    au FileType json syntax match Comment +\/\/.\+$+
    au BufRead,BufNewFile calcurse-note*,~/.local/share/calcurse/notes/* set filetype=markdown
    au BufRead,BufNewFile *.ms,*.me,*.mom,*.man set filetype=groff
    au BufRead,BufNewFile *.tex set filetype=tex
    au FileType nroff setl wrap textwidth=85 colorcolumn=+1
    au Filetype *json setl shiftwidth=2

    " Disable automatic comment
    au FileType * setl formatoptions-=cro
    au BufWritePre * %s/\s\+$//e            " End of lines
    au BufWritePre * %s#\($\n\s*\)\+\%$##e  " End of file

    au BufReadPre   *.docx silent set ro
    au BufEnter     *.docx silent set modifiable
    au BufEnter     *.docx silent  %!pandoc --columns=78 -f docx -t markdown "%"
    au BufWritePost *.docx :!pandoc -f markdown -t docx % > tmp.docx

    au BufReadPre *.odt silent set ro
    au BufEnter   *.odt silent  %!pandoc --columns=78 -f odt -t markdown "%"

    autocmd BufReadPre *.rtf silent set ro
    autocmd BufReadPost *.rtf silent %!unrtf --text
  augroup END
" }}} === General Mappings ===

" ============== Syntax ============== {{{
  map <F9> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
  \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
  \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

  nmap <c-a> :call <SID>SynStack()<CR>
  function! <SID>SynStack()
    if !exists("*synstack")
      return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunction

  ":verbose hi <name>
  " SyntaxQuery: Display the syntax stack at current cursor position
  function! s:syntax_query() abort
    for id in synstack(line("."), col("."))
      execute 'hi' synIDattr(id, "name")
    endfor
  endfunction
  command! SQ call s:syntax_query()
  nnoremap <Leader>sll :syn list
  nnoremap <Leader>slo :verbose hi

  " === custom syntax groups ===
  " \ cmTitle /\v(#|--|\/\/|\%)\s*\u\w*(\s+\u\w*)*:/
  " FIX: allow punctuation
  augroup ccommtitle
    autocmd!
    autocmd Syntax * syn match
      \ cmTitle /\v(#|--|\/\/|\%)\s*(\u\w*|\=+)(\s+\u\w*)*(:|\s*\w*\s*\=+)/
      \ contained containedin=.*Comment,vimCommentTitle,rustCommentLine
    autocmd Syntax * syn match myTodo
      \ /\v(#|--|\/\/|")\s(FIXME|FIX|DISCOVER|NOTE|NOTES|INFO|OPTIMIZE|XXX|EXPLAIN|TODO|CHECK|HACK|BUG|BUGS):/
      \ contained containedin=.*Comment.*,vimCommentTitle
    " perlLabel
    autocmd Syntax * syn keyword cmTitle contained=Comment
    autocmd Syntax * syn keyword myTodo contained=Comment
  augroup END
  " hi def link cmLineComment Comment
  hi def link cmTitle vimCommentTitle
  hi def link myTodo Todo
" }}} === Syntax ===

" ============== wilder.nvim ============== {{{ "
  function! s:shouldDisable(x)
    let l:cmd = wilder#cmdline#parse(a:x).cmd
    return l:cmd ==# 'Man' || a:x =~# 'Git fetch origin '
  endfunction

  call wilder#enable_cmdline_enter()
  set wildcharm=<Tab>
  " cmap <expr> <Tab> wilder#in_context() ? wilder#next() : "\<Tab>"
  " cmap <expr> <S-Tab> wilder#in_context() ? wilder#previous() : "\<S-Tab>"

  call wilder#setup({
      \ 'modes': [':', '/', '?'],
      \ 'next_key': '<Tab>',
      \ 'previous_key': '<S-Tab>',
      \ 'accept_key': '<A-,>',
      \ 'reject_key': '<A-.>',
      \ })

  call wilder#set_option('renderer', wilder#renderer_mux({
        \ ':': wilder#popupmenu_renderer(wilder#popupmenu_border_theme({
        \   'highlighter': wilder#basic_highlighter(),
        \   'border': 'rounded',
        \   'max_height': 15,
        \   'highlights': {
        \     'border': 'Normal',
        \     'default': 'Normal',
        \     'accent': wilder#make_hl(
        \       'PopupmenuAccent', 'Normal', [{}, {}, {'foreground': '#A06469'}]),
        \   },
        \   'left': [
        \     ' ', wilder#popupmenu_devicons(),
        \   ],
        \   'right': [
        \     ' ', wilder#popupmenu_scrollbar(),
        \   ],
        \ })),
        \
        \ '/': wilder#wildmenu_renderer({
        \   'highlighter': wilder#basic_highlighter(),
        \   'highlights': {
        \     'accent': wilder#make_hl(
        \       'WildmenuAccent', 'StatusLine', [{}, {}, {'foreground': '#A06469'}]),
        \   },
        \ }),
        \ }))

  call wilder#set_option('pipeline', [
             \  wilder#branch(
             \    [
             \      wilder#check({-> getcmdtype() ==# ':'}),
             \      {ctx, x -> s:shouldDisable(x) ? v:true : v:false},
             \    ],
             \    wilder#python_file_finder_pipeline({
             \      'file_command': {_, arg -> arg[0] ==# '.' ? ['rg', '--files', '--hidden'] : ['rg', '--files']},
             \      'dir_command':  {_, arg -> arg[0] ==# '.' ? ['fd', '-tf', '-H'] : ['fd', '-tf']},
             \      'filters': ['difflib_sorter'],
             \    }),
             \    wilder#cmdline_pipeline({
             \      'language': 'python',
             \      'set_pcre2_pattern': 1,
             \    }),
             \    wilder#python_search_pipeline({
             \      'pattern': wilder#python_fuzzy_pattern(),
             \      'sorter': wilder#python_difflib_sorter(),
             \      'engine': 're',
             \    }),
             \   ),
             \ ])

  " call wilder#set_option('renderer', wilder#popupmenu_renderer({
  "       \ 'highlighter': wilder#basic_highlighter(),
  "       \ 'highlights': {
  "       \     'accent': wilder#make_hl(
  "       \       'PopupmenuAccent', 'Normal', [{}, {}, {'foreground': '#A06469'}]),
  "       \ },
  "       \ }))
 " }}} === wilder ===

" ============== vim-clang ============== {{{
autocmd FileType c nnoremap <Leader>r<CR> :FloatermNew --autoclose=0 gcc % -o %< && ./%< <CR>

augroup cpp_env
  autocmd!
  autocmd FileType cpp
    \ nnoremap <Leader>r<CR> :FloatermNew --autoclose=0 g++ % -o %:r && ./%:r <CR>|
    \ nnoremap <buffer> <Leader>kk :Fcman<CR>
augroup END

function! s:FullCppMan()
    let old_isk = &iskeyword
    setl iskeyword+=:
    let str = expand("<cword>")
    let &l:iskeyword = old_isk
    execute 'Man ' . str
endfunction
command! Fcman :call s:FullCppMan()
" }}} === vim-clang ===

" ============== Default Terminal ============== {{{
command! -nargs=* TP botright sp | resize 20 | term <args>
command! -nargs=* VT vsp | term <args>
noremap <A-i> :TP<cr>A

let g:term_buf = 0
let g:term_win = 0
function! TermToggle(height)
  if win_gotoid(g:term_win)
      hide
  else
      botright new
      exec "resize " . a:height
      try
          exec "buffer " . g:term_buf
      catch
          call termopen("zsh", {"detach": 0})
          let g:term_buf = bufnr("")
          set nonumber
          set norelativenumber
          set signcolumn=no
      endtry
      startinsert!
      let g:term_win = win_getid()
  endif
endfunction

" Toggle terminal on/off (neovim)
nnoremap <C-t> :call TermToggle(12)<CR>
inoremap <C-t> <Esc>:call TermToggle(12)<CR>
tnoremap <C-t> <C-\><C-n>:call TermToggle(12)<CR>

" Terminal go back to normal mode
tnoremap <Esc> <C-\><C-n>
tnoremap :q! <C-\><C-n>:q!<CR>
" }}} === Default Terminal ===

" ============== background transparent / colors ============== {{{
highlight TelescopeNormal         guibg=#000000
highlight TelescopeSelection      guifg=#FF9500 gui=bold
highlight TelescopeSelectionCaret guifg=#819C3B
highlight TelescopeMultiSelection guifg=#4C96A8
highlight TelescopeBorder         guifg=#A06469
highlight TelescopePromptBorder   guifg=#A06469
highlight TelescopeResultsBorder  guifg=#A06469
highlight TelescopePreviewBorder  guifg=#A06469
highlight TelescopeMatching       guifg=#FF5813
highlight TelescopePromptPrefix   guifg=#EF1D55

highlight DiffAdd      ctermfg=white ctermbg=NONE guifg=#5F875F guibg=NONE
highlight DiffChange   ctermfg=white ctermbg=NONE guifg=#5F5F87 guibg=NONE
highlight DiffDelete   ctermfg=white ctermbg=NONE guifg=#cc6666 guibg=NONE
highlight DiffText     cterm=bold ctermfg=white ctermbg=DarkRed

" highlight HighlightedyankRegion ctermbg=Red   guibg=#A06469
highlight GitBlameVirtualText   cterm=italic  ctermfg=245   gui=italic guifg=#665c54

hi MatchParen guifg=#088649
hi vimOperParen guifg=#088649
hi vimSep guifg=#088649
hi Delimiter guifg=#088649
hi Operator guifg=#088649
" }}} === transparent ===

" ============== Other Functions ============== {{{
  augroup jump_last_position
    autocmd!
    autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
      \| exe "normal! g'\"" | endif
  augroup END

  " Toggle between {non,}relative numbers
  " augroup numbertoggle
  "   autocmd!
  "   autocmd BufEnter,FocusGained,InsertLeave,WinEnter * if &nu | set rnu   | endif
  "   autocmd BufLeave,FocusLost,InsertEnter,WinLeave   * if &nu | set nornu | endif
  " augroup END

  " automatically reload buffer if changed outside current buffer
  augroup auto_read
    autocmd!
    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
      \ if mode() == 'n' && getcmdwintype() == '' | checktime | endif
    autocmd FileChangedShellPost * echohl WarningMsg
      \ | echo "File changed on disk. Buffer reloaded!" | echohl None
  augroup END

  " go_github: open in browser {{{
  function! s:go_github()
      let s:repo = matchstr(expand('<cWORD>'), '\v[0-9A-Za-z\-\.\_]+/[0-9A-Za-z\-\.\_]+')
      if empty(s:repo)
          echo 'GoGithub: No repository found.'
      else
          let s:url = 'https://github.com/' . s:repo
          " call netrw#BrowseX(s:url, 0)
          call openbrowser#open(s:url)
      end
  endfunction

  augroup gogithub
      au!
      au FileType *vim,*bash,*tmux,zsh nnoremap <buffer> <silent> <leader><cr> :call <sid>go_github()<cr>
  augroup END

  " Sources neovim first
  command! PluginUpdate source $VIMRC | :PlugUpdate
  command! PluginClean  source $VIMRC | :PlugClean
  " }}}

  " IndentSize: Change indent size depending on file type {{{
  function! <SID>IndentSize(amount)
    exe "setlocal expandtab"
       \ . " ts="  . a:amount
       \ . " sts=" . a:amount
  endfunction

  " Filetype specific indents
  autocmd FileType typescript nnoremap <Leader>r<CR> :FloatermNew tsc % && node %:r.js <CR>
  autocmd FileType javascript nnoremap <Leader>r<CR> :FloatermNew node % <CR>
  autocmd FileType markdown,json,javascript call <SID>IndentSize(4)
  autocmd BufRead,BufNewFile *.htm,*.html call <SID>IndentSize(2)
  " }}} IndentSize

  " DiffSaved: Show diff since last save {{{
  function! s:DiffSaved()
    let filetype=&filetype
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe 'setl bt=nofile bh=wipe nobl noswf ro ft=' . filetype
  endfunction
  command! DS call s:DiffSaved()
  " }}} DiffSaved

" ExecuteBuffer: execute current buffer === {{{ "
  function! s:execute_buffer()
    if !empty(expand('%'))
        write
        call system('chmod +x '.expand('%'))
        silent e
        vsplit | terminal ./%
    else
        echohl WarningMsg
        echo 'Save the file first'
        echohl None
    endif
  endfunction
  command! RUN :call s:execute_buffer()

  augroup ExecuteBuffer
      au!
      au FileType sh,bash,zsh,python,ruby,perl,lua nnoremap <Leader>r<CR> :RUN<cr>
      au FileType sh,bash,zsh,python,ruby,perl,lua nnoremap <Leader>lru
        \ :FloatermNew --autoclose=0 ./%<cr>
  augroup END
" }}} ExecuteBuffer

" ============== tmux ============== {{{
function! s:tmux_copy_mode_toggle()
    setlocal number!
    if &signcolumn ==? 'no'
        setlocal signcolumn=auto
    else
        setlocal signcolumn=no
    endif
endfunction
command! TmuxCopyModeToggle call s:tmux_copy_mode_toggle()

" autocmd BufEnter * let &titlestring = '' . expand("%:t")
" set title

" au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif

if exists('$TMUX') && !exists('$NORENAME')
  augroup rename_tmux
    au!
    au BufEnter * if empty(&buftype) | let &titlestring = '' . expand('%:t') | endif
    au VimLeave * call system('tmux set-window automatic-rename on')
  augroup END
endif

nnoremap <silent> <Leader>. :call system('tmux select-pane -t :.+')<cr>
" }}} === tmux ===

" PreserveClipboard: Fixes clearing of clipboard when using copyq {{{
if executable('xsel')
    function! PreserveClipboard()
        call system('xsel -ib', getreg('+'))
    endfunction
    function! PreserveClipboadAndSuspend()
        call PreserveClipboard()
        suspend
    endfunction
    augroup preserve_clipboard
      au!
      au VimLeave * call PreserveClipboard()
    augroup END
    nnoremap <silent> <c-z> :call PreserveClipboadAndSuspend()<cr>
    vnoremap <silent> <c-z> :<c-u>call PreserveClipboadAndSuspend()<cr>
endif
" }}}
"}}} === Other Functions ===

" vim: ft=vim:et:sw=0:ts=2:sts=2:tw=78:fdm=marker:fmr={{{,}}}:
