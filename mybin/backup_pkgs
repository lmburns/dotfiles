#!/usr/bin/env zsh

# Desc: backup packages from PACMAN, cargo, gem, go, npm, pip

emulate -L zsh -o extendedglob -o noshortloops -o warncreateglobal
zmodload -Fa zsh/parameter p:commands

local dest; dest="${HOME}/backup/packages"
[[ ! -d "$dest" ]] && command mkdir -p "$dest"

local pkg
for pkg (pacman cargo gem go npm pip pipx cpan cran) {
  local ${pkg}_file; eval "${pkg}_file=${pkg}_$(date +'%Y%m%d')"
}

local cmd
for cmd (paru ruby npm pip-chill pipx R) {
  (( ! $+commands[$cmd] )) && {
    builtin print -Pr -- "%F{1}%BError:%b %F{2}${cmd}%f isn't installed"; exit 1
  }
}

function print_success() {
  local pkg="$1"
  builtin print -Pr -- "Finished %F{6}${(l:6:: :)pkg}%f in $SECONDS"
}

builtin print -Pr -- "%F{14}${(l:COLUMNS::=:):-}%f"

typeset -F 3 SECONDS=0
command paru -Qeq > "${dest}/${pacman_file}" && print_success "pacman"

SECONDS=0
command ls "${CARGO_HOME}/bin" | rg "^(cargo|rust)" -v > "${dest}/${cargo_file}" && print_success "cargo"

SECONDS=0
# gem list > "${dest}/${gem_file}"
command ruby -rrubygems -e \
  "puts(Gem::Specification.sort_by { |g| [g.name.downcase, g.version] }.group_by(&:name).map do |name, specs|
    [name, specs.map { |spec| spec.version.to_s }.join(',')].join(' ')
  end)" \
  > "${dest}/${gem_file}" \
  && print_success "ruby"

SECONDS=0
command ls ${HOME}/go/${${(s. .)${:-"$(goenv version)"}}[1]}/bin > "${dest}/${go_file}" && print_success "go"

SECONDS=0
command npm list -g --depth=0 > "${dest}/${npm_file}" && print_success "npm"

SECONDS=0
command pip-chill > "${dest}/${pip_file}" && print_success "pip"

SECONDS=0
command pipx list > "${dest}/${pipx_file}" && print_success "pipx"

SECONDS=0
# cpan -l > "${dest}/${cpan_file}"
command perl -MExtUtils::Installed \
  -e '$i=ExtUtils::Installed->new(); @mod=$i->modules(); print join "\n", @mod' \
  > "${dest}/${cpan_file}" \
  && print_success "cpan"

SECONDS=0
command R --quiet \
  -e 'ip=as.data.frame(installed.packages()[,c(1,3:4)]); ip=ip[is.na(ip$Priority),1:2,drop=FALSE]; ip' \
    | tail -n +2 \
    | sd '^\$.*\n' '' \
    > "${dest}/${cran_file}" \
    && print_success "cran"

builtin print -Pr -- "%F{14}${(l:COLUMNS::=:):-}%f"

command cp -f "${dest}/${pacman_file}" "${XDG_CONFIG_HOME}/packages/pacman_pkgs"
command cp -f "${dest}/${cargo_file}" "${XDG_CONFIG_HOME}/packages/cargo_pkgs"
command cp -f "${dest}/${gem_file}" "${XDG_CONFIG_HOME}/packages/gem_pkgs"
command cp -f "${dest}/${go_file}" "${XDG_CONFIG_HOME}/packages/go_pkgs"
command cp -f "${dest}/${npm_file}" "${XDG_CONFIG_HOME}/packages/npm_pkgs"
command cp -f "${dest}/${pip_file}" "${XDG_CONFIG_HOME}/packages/pip_pkgs"
command cp -f "${dest}/${pipx_file}" "${XDG_CONFIG_HOME}/packages/pipx_pkgs"
command cp -f "${dest}/${cpan_file}" "${XDG_CONFIG_HOME}/packages/cpan_pkgs"
command cp -f "${dest}/${cran_file}" "${XDG_CONFIG_HOME}/packages/cran_pkgs"

command dotbare add "${XDG_CONFIG_HOME}/packages/pacman_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/cargo_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/gem_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/go_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/npm_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/pip_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/pipx_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/cpan_pkgs"
command dotbare add "${XDG_CONFIG_HOME}/packages/cran_pkgs"
