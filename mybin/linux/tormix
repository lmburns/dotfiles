#!/usr/bin/env bash
#
# tormix - minimal tui for transmission-daemon.

reset_terminal() {
  # Code copied from fff script
  # Reset the terminal to a useable state (undo all changes).
  # '\e[?6l':  Unrestrict cursor movement (full window).
  # '\e[?7h':  Re-enable line wrapping.
  # '\e[?25h': Unhide the cursor.
  # '\e[2J':   Clear the terminal.
  # '\e[;r':   Set the scroll region to its default value.
  #            Also sets cursor to (0,0).
  printf '\e[?6l\e[?7h\e[?25h\e[2J\e[;r'
  # Show user input.
  stty echo
}

refresh() {
  printf '\e[?1049h\e[?6h\e[?7l\e[?25l\e[2J\e[H'
  shopt -s checkwinsize
  (
    :
    :
  )
  [[ -z "$LINES" ]] && read -r LINES COLUMNS < <(stty size)
  # max_t is maximum torrents to be displayed in view
  # change number of lines to use in the end of the screen to 4
  # to provide space for the color line and the line of pressed spaced after input
  ((max_t = (LINES - 3) / 3))
  # start from 1st torrent if they all fit
  ((top = max_t < ${#t[@]} ? top : 0))
  stty -echo
}

status() {
  # I reset formatting after every word in case some color has more attributes than fg color
  # color info
  printf '\e[%sH\e[1m\e[%smReady\e[m\e[1m   \e[1m\e[%smSeeding\e[m\e[1m   ' "$((LINES - 2))" \
    "$TM_COL_READY" "$TM_COL_SEEDING"
  printf '\e[%smDownloading\e[m\e[1m   \e[%smStopped\e[m\n' \
    "$TM_COL_DOWNLOADING" "$TM_COL_STOPPED"
  # '\e[2m': Turn low intensity mode on (shadow letters)
  # '\e[%s;H%s'    "$((LINES-1))": move cursor to line $lines-1
  # '\e[m': Turn off character attributes (no more shadow letters)
  printf '\e[2m\e[%sH%s\e[m' "$((LINES - 1))" "$1"
}

get_torrents() {
  # Create an array with the lines from the output of the command
  IFS=$'\n' read -d "" -ra t < <(transmission-remote -l)
  # unset/Delete the first and last element of the array created

  unset 't[0]' 't[-1]' 2>/dev/null

  t=("${t[@]//[0-9] [a-z][a-z][a-z]?/.}")
  t=("${t[@]//Up & Down/Active}")
  t=("${t[@]//Downloading/Active}")
  t=("${t[@]//     None/0 MB}")
  t=("${t[@]/n\/a/0}")

  # new j is max of old j and number of torrents
  ids=""
  ((limit = top + max_t > ${#t[@]} ? ${#t[@]} : top + max_t))
  for ((i = top; i < limit; i++)); do
    t_print "${t[i]}"
  done
  ((show = max_t < ${#t[@]} ? max_t : ${#t[@]} - top))
  status "[s]tart [p]ause [r]emove [o]pen [t]heme [q]uit [j/k] scroll ($show/${#t[@]})"$'\e[H'
}

t_print() {
  IFS=" %" read -r num perc have unit time up down _ stat name <<<"$1"
  ids+="$num "
  read -d "" -ra info <<<$(transmission-remote -t $num -i)

  # Info comes in this order:
  # ETA, Down Speed, Up Speed, Total size, Uploaded
  cnt=0
  found=0
  while [ $found == 0 ] && [ $cnt -lt ${#info[@]} ]; do
    ((cnt++))
    if [ "${info[$cnt]}" == "ETA:" ]; then
      ((cnt++))
      eta="${info[$cnt]} ${info[$cnt + 1]}"
      #if last character is comma we have to add the next field
      #because we have more time units
      while [ "${eta:$((${#eta} - 1))}" == "," ]; do
        ((cnt += 2))
        eta="$eta ${info[$cnt]} ${info[$cnt + 1]}"
      done
      ((cnt += 1))
    elif [ "${info[$cnt]}" == "Download" ] && [ "${info[$cnt + 1]}" == "Speed:" ]; then
      down="${info[$cnt + 2]} ${info[$cnt + 3]}"
      ((cnt += 3))
    elif [ "${info[$cnt]}" == "Upload" ] && [ "${info[$cnt + 1]}" == "Speed:" ]; then
      up="${info[$cnt + 2]} ${info[$cnt + 3]}"
      ((cnt += 3))
    elif [ "${info[$cnt]}" == "Total" ] && [ "${info[$cnt + 1]}" == "size:" ]; then
      size="${info[$cnt + 2]} ${info[$cnt + 3]}"
      ((cnt += 3))
    elif [ "${info[$cnt]}" == "Uploaded:" ]; then
      if [ "${info[$cnt + 1]}" == "None" ]; then
        sent="0 MB"
      else
        sent="${info[$cnt + 1]} ${info[$cnt + 2]}"
      fi
      found=1
    fi
  done

  if [ "$time" == "Done" ]; then
    eta="Done"
  elif [ "$eta" == "0 seconds" ]; then
    eta=""
  fi

  # Colors
  # green: if ready and not seeding
  # yellow: downloading
  # red: stopped and not ready
  # blue: seeding
  if [ $perc == 100 ] && [ "$stat" == "Stopped" ]; then
    #color
    c=$TM_COL_READY
    #unicode
    u=2713
    #next char
    l=40
  elif [ $perc == 100 ] && [ "$stat" == "Idle" ]; then
    c=$TM_COL_READY
    u=2713
    l=40
  elif [ $perc == 100 ] && [ "$stat" == "Seeding" ]; then
    c=$TM_COL_SEEDING
    u=2713
    l=40
  elif [ $perc -lt $((100)) ] && [ "$stat" == "Stopped" ]; then
    c=$TM_COL_STOPPED
    u=0000
    l=00
  elif [ $perc -lt $((100)) ] && [ "$stat" == "Idle" ]; then
    c=$TM_COL_DOWNLOADING
    u=0000
    l=00
  elif [ $perc -lt $((100)) ] && [ "$stat" == "Active" ]; then
    c=$TM_COL_DOWNLOADING
    u=0000
    l=00
  else
    #default
    c=$TM_COL_DOWNLOADING
    u=0000
    l=00

  fi
  # '\e[K' : clear line right of the cursor
  # '\e[2m': low intensity mode on
  # '\e[m': Turn off character attributes (no more low intensity)
  # '\e[1m': bold mode on
  printf '\e[K\e[2m\e7%s\e8\e[4C\e[m\e[1m\e[%s%b%s\e[m\n' \
    "$num:" "${c}m" "\\u${u}\\${l}" "$name"
  # '\e7' save cursor position and attributes
  # '\e8' restore cursor position and attributes
  # 'e[xC' move x columns right

  printf '\e[K\e7%s\e8\e[14C%s\e8\e[32C%s\e8\e[40C%s\e8\e[55C%s\e8\e[70C%s\e8\e[80C%s\n\e[K\n' \
    "    $stat: " "$have / $size" "(${perc}%)" "⇣ $down" "| ⇡ $up" "$sent" "| ⌚$eta"
}

prompt() {
  send() { transmission-remote "$@" &>/dev/null; }
  # I hide output in all other cases in order to prevent screen
  # tearing from excessive number of inputs
  line() { status $'\e[B\e[?25h'; }

  suggest=""
  autocomp() {
    if [ "$1" == "o" ]; then
      IFS=$'\n' read -d "" -ra comp <<<$(compgen -f "$input")
      IFS=$'\n' read -d "" -ra dir <<<$(compgen -d "$input")
      dptr=0
      #we will check what files of comp are directories to append "/"
      for ((cptr = 0; cptr < ${#comp[*]}; cptr++)); do
        if [ "${comp[$cptr]}" == "${dir[$dptr]}" ]; then
          comp[$cptr]+="/"
          if [ $dptr == $((${#dir[*]} - 1)) ]; then
            break
          else
            ((dptr++))
          fi
        fi
      done
    elif [ "$1" == "t" ]; then
      IFS=$'\n' read -d "" -ra comp <<<$(compgen -f $HOME/.config/tormix/themes/$input)
      comp=("${comp[@]%.theme}")
      comp=("${comp[@]##*themes/}")
    elif [[ "$1" =~ (s|p|r|) ]]; then
      #comp=("${ids[@]}")
      read -ra comp <<<$(echo $ids)
    fi
    comp=("${comp[@]}" "$input")
    if [ -z "$suggest" ]; then
      ((suggest = ${#comp[*]} - 1))
    fi
    # if shift-tab I want reverse everything
    if [ "$2" == "rev" ]; then
      ((suggest = suggest == 0 ? ${#comp[*]} - 1 : suggest - 1))
    else
      ((suggest = (suggest + 1) % ${#comp[*]}))
    fi
    auto="${comp[$suggest]}"
  }

  input=""
  auto=""
  read_input() {
    printf "${1}\e7"
    for (( ; ; )); do
      # fix print of '%' in magnet link
      printf "\e8\e[K"
      echo -n "${auto}"
      read -N1 -r char
      # read special characters
      read -sN1 -t 0.0001 k1
      read -sN1 -t 0.0001 k2
      read -sN1 -t 0.0001 k3
      key="${char}${k1}${k2}${k3}"
      case "$key" in
      $'\e[B')
        input="$auto"
        suggest=
        continue
        ;;
      $'\e[Z')
        autocomp "$2" "rev"
        continue
        ;;
      esac
      case "$char" in
      $'\b')
        input="$auto"
        input="${input%?}"
        auto="$input"
        suggest=""
        ;;
      "" | $'\n')
        input="$auto"
        break
        ;;
      $'\e')
        input=""
        break
        ;;
      $'\t')
        autocomp "$2"
        ;;
      *)
        input="$auto"
        input+="$key"
        auto="$input"
        suggest=""
        ;;
      esac
    done
  }

  case "$1" in
  s)
    line
    read_input "start torrent: #" "a"
    send -t "$input" -s
    ;;
  p)
    line
    read_input "pause torrent: #" "p"
    send -t "$input" -S
    ;;
  r)
    line
    read_input "remove torrent: #" "r"
    send -t "$input" -r
    top=0
    ;;
  # if I add something I want to see it
  o)
    line
    read_input "load magnet: " "o"
    send -a "${input/#~/${HOME}}"
    ((top = top + max_t > ${#t[@]} + 1 ? top : ${#t[@]} + 1 - max_t))
    ;;
  j) ((max_t >= ${#t[@]})) || ((top = top + max_t < ${#t[@]} ? ++top : top)) ;;
  k) ((top == 0)) || ((top--)) ;;
  t)
    line
    read_input "change theme: " "t"
    source $HOME/.config/tormix/themes/$input.theme &>/dev/null
    cp -f $HOME/.config/tormix/{themes/$input,.saved}.theme &>/dev/null
    ;;
  q) exit ;;
  esac

  [[ "$1" =~ (s|p|q|t|o|r) ]] && printf "\e[%sH\e[K\e[?25l\e[H" "$((LINES))"
  # if user deletes an entry refresh is required
  [[ "$1" =~ (r) ]] && [ ! "$input" == "" ] && refresh
}

main() {
  refresh
  top=0

  trap 'reset_terminal; printf "\e[?1049l"' EXIT
  trap 'refresh' SIGWINCH

  for (( ; ; )); do
    get_torrents
    read -rsN1 -t1 && prompt "$REPLY"
  done
}

# saved theme goes in the parent directory to help with the autocomplete
# of option 't'
if [ ! -f $HOME/.config/tormix/.saved.theme ]; then
  cp -f $HOME/.config/tormix/{themes/default,.saved}.theme
fi
source $HOME/.config/tormix/.saved.theme

if [ "$#" == 1 ]; then
  transmission-remote -a "$1"
fi
main
