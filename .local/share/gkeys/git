aliases    = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort | bat
alias-grep = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#"
a          = add
# Add origin url
addurl     = remote set-url --add origin
# Ammed to last commit
amend      = commit --amend --reuse-message=HEAD
b          = branch
# List all branches - sorted
branches   = branch -a --sort=-authordate --color=always
# Show all local and remote branches & commits within them
sba        = show-branch --color=always -a --more=10 --no-name
# Create new branch off of default origin branch (origin/master or origin/main)
newbranch  = "!f() { [[ -n $@ ]] && git fetch origin && git checkout -b \"$@\" origin/$(git main) && git branch --unset-upstream; }; f"
bclone     = clone --bare
# Rebase interactive for all commits on feature branch
rebase-branch = !git rebase -i `git merge-base master HEAD`
# Get remote url
origin        = remote get-url origin
# Get name of default head branch
main          = !git remote show $(git upstream) | awk '/HEAD branch/ {print $NF}'
unstage       = reset -q HEAD --
uncommit      = reset --mixed HEAD~
# Repeat last commit message
recommit      = commit --reuse-message=HEAD
# when Git loses upstream tracking branch (haven't figured out why exactly) run:
# git set-upstream
# git pull
set-upstream  = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

root = rev-parse --show-toplevel
croot = !cd $(git rev-parse --show-toplevel)

cl  = clone
co  = checkout
c   = commit
cm  = commit -m
csm = commit -S -m
cs  = commit -S

conflicts = !git --no-pager diff --name-only --diff-filter=U | xargs grep -c '^=======$'

d       = diff
dc      = diff --cached

l       = log -p
lc      = log ORIG_HEAD.. --stat --no-merges
lo      = log --oneline --decorate --stat --graph
; lp    = log --pretty=format:"%hCred %a%Cgreen | %s%C(yellow)%d%C(magenta) [%an]" --graph --date=short
lp      = log --graph --pretty=format:'%Cred%h%Creset %Cblue%an%Creset: %s%Creset%C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
lgo     = log --pretty='format:%h %G? %aN  %s'
hist    = log --pretty=format:"%h%Cred %ad%Cgreen | %s%C(yellow)%d%C(magenta) [%an%C(blue)]" --graph --date=short
# preferred git log view
lg      = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(white)%s%C(reset) %C(dim white)-%C(reset) %ar %C(dim white)<%an>%C(reset)%C(auto)%d%C(reset)' --all
lg2     = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(white)%s%C(reset) %C(dim white)-%C(reset) %ar %C(dim white)<%an>%C(reset)%C(auto)%d%C(reset)%n' --all --stat
lss     = log --show-signature
# View the log and diff for a commit (previous if no SHA1 provided)
details = log -n1 -p --format=fuller

m        = merge
ms       = merge --squash
pl       = pull
# Push to all remotes
pa       = !git remote | xargs -L1 git push --all
ps       = push
pom      = push origin master
psf      = push --force
rao      = remote add origin
remotes  = remote -v
rmc      = rm --cached
s        = status -sb
st       = status
sh       = stash
shp      = stash pop
stashes  = stash list
tags     = tag --list
# List tracked files
tr       = ls-tree -r master --name-only
# List tracked files in an actual tree with 'as-tree'
trr      = !git ls-tree -r master --name-only | as-tree --color always
# List untracked files
utr      = ls-files --other
# Get name of default remote
upstream = !git remote | egrep -o '(upstream|origin)' | tail -1
# Use difftool
vd       = difftool --tool=nvimdiff --no-prompt
vdc      = difftool --tool=nvimdiff --no-prompt --cached
# Generate changelog
chg      = !git changelog -x > CHANGELOG.md
# Fzfgit
fs       = !fstat
fad      = !fadd
fun      = !funtrack
# Grab a pull request
pro      = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
# Open repository in the browser
open     = "!handlr open $(git remote get-url origin)"

# vim: ft=bash:et:sw=0:ts=2:sts=2:fdm=marker:fmr={{{,}}}:
