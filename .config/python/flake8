[flake8]
max-line-length = 110

# select =
#     E1,
#     E3,
#     E502,
#     E7,
#     # SyntaxError or IndentationError   IOError
#     E9,
#     # warning
#     W1,
#     W5,
#     W6,

ignore =
    E305,
    # E305: 2 lines after function definition
    E302,
    # E302: expected 2 blank lines, found 1
    E501,
    # E501: line too long
    E101,
    # E101: mixed-spaces-and-tabs: Indentation contains mixed spaces and tabs (Ruff: E101)
    E401,
    # E401: multiple-imports-on-one-line: Multiple imports on one line (Ruff: E401)
    E402,
    # E402: module-import-not-at-top-of-file: Module level import not at top of file (Ruff: E402)
    E501,
    # E501: line-too-long: Line too long ({length} > {limit} characters) (Ruff: E501)
    E701,
    # E701: multiple-statements-on-one-line-colon: Multiple statements on one line (colon) (Ruff: E701)
    E702,
    # E702: multiple-statements-on-one-line-semicolon: Multiple statements on one line (semicolon) (Ruff: E702)
    E703,
    # E703: useless-semicolon: Statement ends with an unnecessary semicolon (Ruff: E703)
    E711,
    # E711: none-comparison: Comparison to None should be cond is None (Ruff: E711)
    E712,
    # E712: true-false-comparison: Comparison to True should be cond is True (Ruff: E712)
    E713,
    # E713: not-in-test: Test for membership should be not in (Ruff: E713)
    E714,
    # E714: not-is-test: Test for object identity should be is not (Ruff: E714)
    E721,
    # E721: type-comparison: Do not compare types, use isinstance() (Ruff: E721)
    E722,
    # E722: bare-except: Do not use bare except (Ruff: E722)
    E731,
    # E731: lambda-assignment: Do not assign a lambda expression, use a def (Ruff: E731)
    E741,
    # E741: ambiguous-variable-name: Ambiguous variable name: {name} (Ruff: E741)
    E742,
    # E742: ambiguous-class-name: Ambiguous class name: {name} (Ruff: E742)
    E743,
    # E743: ambiguous-function-name: Ambiguous function name: {name} (Ruff: E743)
    E902,
    # E902: io-error: {message} (Ruff: E902)
    E999,
    # E999: syntax-error: SyntaxError: (Ruff: E999)
    H401,
    # H401: docstring should not start with a space
    H403,
    # H403: multi line docstrings should end on a new line
    H404,
    # H404: multi line docstring should start without a leading new line
    H405,
    # H405: multi line docstring summary not separated with an empty line
    ANN,
    # ANN: type-checking (TODO: TURN ON WHEN WRITING OWN PROJECT)
    C4,
    # C4: flake8-comprehensions (Ruff takes care of this)
    G,
    # G: flake8-logging (Ruff takes care of this)
    PIE803,
    # PIE803: prefer-logging-interpolation (Ruff UP032, G001) covers this
    PIE790,
    # PIE790: unnecessary-pass: Unnecessary pass statement (Ruff)
    PIE794,
    # PIE794: dupe-class-field-definitions: Class field {name} is defined multiple times (Ruff)
    PIE796,
    # PIE796: prefer-unique-enums: Enum contains duplicate value: {value} (Ruff)
    PIE800,
    # PIE800: unnecessary-spread: Unnecessary spread (Ruff)
    PIE804,
    # PIE804: unnecessary-dict-kwargs: Unnecessary dict kwargs (Ruff)
    PIE807,
    # PIE807: prefer-list-builtin: Prefer list over useless lambda (Ruff)
    PIE810,
    # PIE810: single-starts-ends-with: Call {attr} once with a tuple (Ruff)
    W503,
    # W504: line break before binary operator (black formats like this)
    S101,
    # S101: assert: Use of assert detected (Ruff)
    S102,
    # S102: exec-builtin: Use of exec detected (Ruff)
    S103,
    # S103: bad-file-permissions: os.chmod setting a permissive mask {mask:#o} on file or directory (Ruff)
    S104,
    # S104: hardcoded-bind-all-interfaces: Possible binding to all interfaces (Ruff)
    S105,
    # S105: hardcoded-password-string: Possible hardcoded password: "{}" (Ruff)
    S106,
    # S106: hardcoded-password-func-arg: Possible hardcoded password: "{}" (Ruff)
    S107,
    # S107: hardcoded-password-default: Possible hardcoded password: "{}" (Ruff)
    S108,
    # S108: hardcoded-temp-file: Probable insecure usage of temporary file or directory: "{}" (Ruff)
    S110,
    # S110: try-except-pass: try-except-pass detected, consider logging the exception (Ruff)
    S112,
    # S112: try-except-continue: try-except-continue detected, consider logging the exception (Ruff)
    S113,
    # S113: request-without-timeout: Probable use of requests call with timeout set to {value} (Ruff)
    S324,
    # S324: hashlib-insecure-hash-function: Probable use of insecure hash functions in hashlib: {string} (Ruff)
    S501,
    # S501: request-with-no-cert-validation: Probable use of {string} call with verify=False disabling SSL certificate checks (Ruff)
    S506,
    # S506: unsafe-yaml-load: Probable use of unsafe loader {name} with yaml.load. Consider yaml.safe_load. (Ruff)
    S508,
    # S508: snmp-insecure-version: The use of SNMPv1 and SNMPv2 is insecure. Use SNMPv3 if able. (Ruff)
    S509,
    # S509: snmp-weak-cryptography: You should not use SNMPv3 without encryption. noAuthNoPriv & authNoPriv is insecure. (Ruff)
    S608,
    # S608: hardcoded-sql-expression: Possible SQL injection vector through string-based query construction (Ruff)
    S612,
    # S612: logging-config-insecure-listen: Use of insecure logging.config.listen detected (Ruff)
    S701,
    # S701: jinja2-autoescape-false: Ensure autoescape=True   or use the select_autoescape function. (Ruff)
    A001,
    # A001: builtin-variable-shadowing: Variable {name} is shadowing a python builtin (Ruff)
    A002,
    # A002: builtin-argument-shadowing: Argument {name} is shadowing a python builtin (Ruff)
    A003,
    # A003: builtin-attribute-shadowing: Class attribute {name} is shadowing a python builtin (Ruff)
    R501,
    # R501: unnecessary-return-none: Do not explicitly return None in function if it is the only possible return value (RET501)
    R502,
    # R502: implicit-return-value: Do not implicitly return None in function able to return non-None value (RET502)
    R503,
    # R503: implicit-return: Missing explicit return at the end of function able to return non-None value (Ruff: RET503)
    R504,
    # R504: unnecessary-assign: Unnecessary variable assignment before return statement (Ruff: RET504)
    R505,
    # R505: superfluous-else-return: Unnecessary {branch} after return statement (Ruff: RET505)
    R506,
    # R506: superfluous-else-raise: Unnecessary {branch} after raise statement (Ruff: RET506)
    R507,
    # R507: superfluous-else-continue: Unnecessary {branch} after continue statement (Ruff: RET507)
    R508,
    # R508: superfluous-else-break: Unnecessary {branch} after break statement (Ruff: RET504)
    PL100,
    # PL100: pathlib-abspath: os.path.abspath should be replaced by .resolve() (PTH100)
    PL101,
    # PL101: pathlib-chmod: os.chmod should be replaced by .chmod() (PTH101)
    PL102,
    # PL102: pathlib-mkdir: os.mkdir should be replaced by .mkdir() (PTH102)
    PL103,
    # PL103: pathlib-makedirs: os.makedirs should be replaced by .mkdir(parents=True) (PTH103)
    PL104,
    # PL104: pathlib-rename: os.rename should be replaced by .rename() (PTH104)
    PL105,
    # PL105: pathlib-replace: os.replaceshould be replaced by .replace() (PTH105)
    PL106,
    # PL106: pathlib-rmdir: os.rmdir should be replaced by .rmdir() (PTH106)
    PL107,
    # PL107: pathlib-remove: os.remove should be replaced by .unlink() (PTH107)
    PL108,
    # PL108: pathlib-unlink: os.unlink should be replaced by .unlink() (PTH108)
    PL109,
    # PL109: pathlib-getcwd: os.getcwd should be replaced by Path.cwd() (PTH109)
    PL110,
    # PL110: pathlib-exists: os.path.exists should be replaced by .exists() (PTH110)
    PL111,
    # PL111: pathlib-expanduser: os.path.expanduser should be replaced by .expanduser() (PTH111)
    PL112,
    # PL112: pathlib-is-dir: os.path.isdir should be replaced by .is_dir() (PTH112)
    PL113,
    # PL113: pathlib-is-file: os.path.isfile should be replaced by .is_file() (PTH113)
    PL114,
    # PL114: pathlib-is-link: os.path.islink should be replaced by .is_symlink() (PTH114)
    PL115,
    # PL115: pathlib-readlink: os.readlink should be replaced by .readlink() (PTH115)
    PL116,
    # PL116: pathlib-stat: os.stat should be replaced by .stat() or .owner() or .group() (PTH116)
    PL117,
    # PL117: pathlib-is-abs: os.path.isabs should be replaced by .is_absolute() (PTH117)
    PL118,
    # PL118: pathlib-join: os.path.join should be replaced by foo_path / "bar" (PTH118)
    # PL119,
    # PL119: pathlib-basename: os.path.basename should be replaced by .name (PTH119)
    PL120,
    # PL120: pathlib-dirname: os.path.dirname should be replaced by .parent (PTH120)
    PL121,
    # PL121: pathlib-samefile: os.path.samefile should be replaced by .samefile() (PTH121)
    PL122,
    # PL122: pathlib-splitext: os.path.splitext should be replaced by .suffix (PTH122)
    PL123,
    # PL123: pathlib-open: open("foo") should be replaced by Path("foo").open() (PTH123)
    PL124,
    # PL124: pathlib-py-path: py.path is in maintenance mode, use pathlib instead (PTH124)
    B002,
    # B002: unary-prefix-increment: Python does not support the unary prefix increment (Ruff: B002)
    B003,
    # B003: assignment-to-os-environ: Assigning to os.environ doesn't clear the environment (Ruff: B003)
    B004,
    # B004: unreliable-callable-check: Using hasattr(x, '__call__') to test. Use callable(x) (Ruff: B004)
    B005,
    # B005: strip-with-multi-characters: Using .strip() with multi-character strings is misleading (Ruff: B005)
    B006,
    # B006: mutable-argument-default: Do not use mutable data structures for argument defaults (Ruff: B006)
    B007,
    # B007: unused-loop-control-variable: Loop control variable {name} not used within loop body (Ruff: B007)
    B008,
    # B008: function-call-argument-default: Do not perform function call {name} in argument defaults (Ruff: B008)
    B009,
    # B009: get-attr-with-constant: Do not call getattr with a constant attribute value. (Ruff: B009)
    B010,
    # B010: set-attr-with-constant: Do not call setattr with a constant attribute value. (Ruff: B010)
    B011,
    # B011: assert-false: Do not assert False (python -O removes these calls), raise AssertionError() (Ruff: B011)
    B012,
    # B012: jump-statement-in-finally: {name} inside finally blocks cause exceptions to be silenced (Ruff: B012)
    B013,
    # B013: redundant-tuple-in-exception-handler: A length-one tuple literal is redundant. (Ruff: B013)
    B014,
    # B014: duplicate-handler-exception: Exception handler with duplicate exception: {name} (Ruff: B014)
    B015,
    # B015: useless-comparison: Comparison does nothing but waste CPU instructions. Either prepend assert or remove it. (Ruff: B015)
    B016,
    # B016: cannot-raise-literal: Cannot raise a literal. Did you intend to return it or raise an Exception? (Ruff: B016)
    B017,
    # B017: assert-raises-exception: assertRaises(Exception) should be considered evil (Ruff: B017)
    B018,
    # B018: useless-expression: Found useless expression. Either assign it to a variable or remove it. (Ruff: B018)
    B019,
    # B019: cached-instance-method: Use of functools.lru_cache or functools.cache on methods can lead to memory leaks (Ruff: B019)
    B020,
    # B020: loop-variable-overrides-iterator: Loop control variable {name} overrides iterable it iterates (Ruff: B020)
    B021,
    # B021: f-string-docstring: f-string used as docstring is interpreted as a joined string rather (Ruff: B021)
    B022,
    # B022: useless-contextlib-suppress: No arguments passed to contextlib.suppress. (Ruff: B022)
    B023,
    # B023: function-uses-loop-variable: Function definition does not bind loop variable {name} (Ruff: B023)
    B024,
    # B024: abstract-base-class-without-abstract-method: {name} is an abstract base class, but it has no abstract methods (Ruff: B024)
    B025,
    # B025: duplicate-try-block-exception: try-except block with duplicate exception {name} (Ruff: B025)
    B026,
    # B026: star-arg-unpacking-after-keyword-arg: Star-arg unpacking after a keyword argument is strongly discouraged (Ruff: B026)
    B027,
    # B027: empty-method-without-abstract-decorator: {name} is an empty method in an abstract base class (Ruff: B027)
    B904,
    # B904: raise-without-from-inside-except: Within an except clause, raise exceptions with raise ... from err/None (Ruff: B904)
    B905,
    # B905: zip-without-explicit-strict: zip() without an explicit strict= parameter (Ruff: B905)


# code  sample message
# E1    Indentation
# E101  indentation contains mixed spaces and tabs
# E111  indentation is not a multiple of four
# E112  expected an indented block
# E113  unexpected indentation
# E114  indentation is not a multiple of four (comment)
# E115  expected an indented block (comment)
# E116  unexpected indentation (comment)
# E117  over-indented
# E121 (*^) continuation line under-indented for hanging indent
# E122 (^)  continuation line missing indentation or outdented
# E123 (*)  closing bracket does not match indentation of opening bracket’s line
# E124 (^)  closing bracket does not match visual indentation
# E125 (^)  continuation line with same indent as next logical line
# E126 (*^) continuation line over-indented for hanging indent
# E127 (^)  continuation line over-indented for visual indent
# E128 (^)  continuation line under-indented for visual indent
# E129 (^)  visually indented line with same indent as next logical line
# E131 (^)  continuation line unaligned for hanging indent
# E133 (*)  closing bracket is missing indentation
#
# E2    Whitespace
# E201  whitespace after ‘(’
# E202  whitespace before ‘)’
# E203  whitespace before ‘:’
#
# E211  whitespace before ‘(’
#
# E221  multiple spaces before operator
# E222  multiple spaces after operator
# E223  tab before operator
# E224  tab after operator
# E225  missing whitespace around operator
# E226 (*)  missing whitespace around arithmetic operator
# E227  missing whitespace around bitwise or shift operator
# E228  missing whitespace around modulo operator
#
# E231  missing whitespace after ‘,’, ‘;’, or ‘:’
#
# E241 (*)  multiple spaces after ‘,’
# E242 (*)  tab after ‘,’
#
# E251  unexpected spaces around keyword / parameter equals
#
# E261  at least two spaces before inline comment
# E262  inline comment should start with ‘# ‘
# E265  block comment should start with ‘# ‘
# E266  too many leading ‘#’ for block comment
#
# E271  multiple spaces after keyword
# E272  multiple spaces before keyword
# E273  tab after keyword
# E274  tab before keyword
# E275  missing whitespace after keyword
#
# E3    Blank line
# E301  expected 1 blank line, found 0
# E302  expected 2 blank lines, found 0
# E303  too many blank lines (3)
# E304  blank lines found after function decorator
# E305  expected 2 blank lines after end of function or class
# E306  expected 1 blank line before a nested definition
#
# E4    Import
# E401  multiple imports on one line
# E402  module level import not at top of file
#
# E5    Line length
# E501 (^)  line too long (82 > 79 characters)
# E502  the backslash is redundant between brackets
#
# E7    Statement
# E701  multiple statements on one line (colon)
# E702  multiple statements on one line (semicolon)
# E703  statement ends with a semicolon
# E704 (*)  multiple statements on one line (def)
# E711 (^)  comparison to None should be ‘if cond is None:’
# E712 (^)  comparison to True should be ‘if cond is True:’ or ‘if cond:’
# E713  test for membership should be ‘not in’
# E714  test for object identity should be ‘is not’
# E721 (^)  do not compare types, use ‘isinstance()’
# E722  do not use bare except, specify exception instead
# E731  do not assign a lambda expression, use a def
# E741  do not use variables named ‘l’, ‘O’, or ‘I’
# E742  do not define classes named ‘l’, ‘O’, or ‘I’
# E743  do not define functions named ‘l’, ‘O’, or ‘I’
#
# E9    Runtime
# E901  SyntaxError or IndentationError
# E902  IOError
#
# W1    Indentation warning
# W191  indentation contains tabs
#
# W2    Whitespace warning
# W291  trailing whitespace
# W292  no newline at end of file
# W293  blank line contains whitespace
#
# W3    Blank line warning
# W391  blank line at end of file
#
# W5    Line break warning
# W503 (*)  line break before binary operator
# W504 (*)  line break after binary operator
# W505 (*^) doc line too long (82 > 79 characters)
#
# W6    Deprecation warning
# W601  .has_key() is deprecated, use ‘in’
# W602  deprecated form of raising exception
# W603  ‘<>’ is deprecated, use ‘!=’
# W604  backticks are deprecated, use ‘repr()’
# W605  invalid escape sequence ‘x’
# W606  ‘async’ and ‘await’ are reserved keywords starting with Python 3.7

# vim: ft=dosini:et:sw=4:ts=4:sts=-1:tw=100
