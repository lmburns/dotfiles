---
# https://rubystyle.guide/#underscore-unused-vars

# Overall indentation width
Layout/IndentationWidth:
  Width: 2
  IgnoredPatterns: []

Layout/ArgumentAlignment:
  Description: "Align arugments of method call if they span more than one line"
  Enabled: true

Layout/ArrayAlignment:
  Description: "Align elements of array literal if they span more than one line"
  Enabled: true

Layout/AssignmentIndentation:
  Description: "Check indentation of first line of the RHS of a multi-line assignment"
  Enabled: true

Layout/BeginEndAlignment:
  Description: "Align ends corresponding to begins correctly."
  Enabled: true

Layout/BlockAlignment:
  Description: "Align block ends correctly."
  Enabled: true

Layout/BlockEndNewline:
  Description: "Put end statement of multiline block on its own line."
  Enabled: true

Layout/CaseIndentation:
  Description: "Indentation of when in a case/(when|in)/[else/]end."
  Enabled: true

Layout/ClassStructure:
  Description: "Enforces a configured order of definitions within a class body."
  Enabled: false

Layout/ClosingHeredocIndentation:
  Description: "Checks the indentation of here document closings."
  Enabled: true

Layout/ClosingParenthesisIndentation:
  Description: "Checks the indentation of hanging closing parentheses."
  Enabled: true

Layout/CommentIndentation:
  Description: "Indentation of comments."
  Enabled: true

Layout/ConditionPosition:
  Description: >-
    Checks for condition placed in a confusing position relative to
    the keyword.
  Enabled: true

Layout/DefEndAlignment:
  Description: "Align ends corresponding to defs correctly."
  Enabled: true

Layout/DotPosition:
  Description: "Checks the position of the dot in multi-line method calls."
  Enabled: true

Layout/ElseAlignment:
  Description: "Align elses and elsifs correctly."
  Enabled: true

# CHANGED
Layout/EmptyComment:
  Description: "Checks empty comment."
  Enabled: false

Layout/EmptyLineAfterMagicComment:
  Description: "Add an empty line after magic comments to separate them from code."
  Enabled: true

Layout/EmptyLineAfterMultilineCondition:
  Description: "Enforces empty line after multiline condition."
  Enabled: false

Layout/EmptyLineBetweenDefs:
  Description: "Use empty lines between class/module/method defs."
  Enabled: true

Layout/EmptyLines:
  Description: "Don't use several empty lines in a row."
  Enabled: true

Layout/EmptyLinesAroundAccessModifier:
  Description: "Keep blank lines around access modifiers."
  Enabled: true

Layout/EmptyLinesAroundAttributeAccessor:
  Description: "Keep blank lines around attribute accessors."
  Enabled: true

Layout/EmptyLinesAroundBeginBody:
  Description: "Keeps track of empty lines around begin-end bodies."
  Enabled: true

Layout/EmptyLinesAroundBlockBody:
  Description: "Keeps track of empty lines around block bodies."
  Enabled: true

Layout/EmptyLinesAroundArguments:
  Description: "Keeps track of empty lines around method arguments."
  Enabled: true

Layout/EmptyLinesAroundClassBody:
  Description: "Keeps track of empty lines around class bodies."
  Enabled: true

Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Description: "Keeps track of empty lines around exception handling keywords."
  Enabled: true

Layout/EmptyLinesAroundMethodBody:
  Description: "Keeps track of empty lines around method bodies."
  Enabled: true

Layout/EmptyLineAfterGuardClause:
  Description: "Add empty line after guard clause."
  Enabled: true

Layout/EmptyLinesAroundModuleBody:
  Description: "Keeps track of empty lines around module bodies."
  Enabled: true

Layout/EndAlignment:
  Description: "Align ends correctly."
  Enabled: true
  EnforcedStyleAlignWith: keyword
  SupportedStylesAlignWith:
    - keyword
    - variable
    - start_of_line

Layout/EndOfLine:
  Description: "Use Unix-style line endings."
  Enabled: true

Layout/ExtraSpacing:
  Description: "Do not use unnecessary spacing."
  Enabled: true
  # When true, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true
  # When true, allows things like 'obj.meth(arg)  # comment',
  # rather than insisting on 'obj.meth(arg) # comment'.
  # If done for alignment, either this OR AllowForAlignment will allow it.
  AllowBeforeTrailingComments: false
  # When true, forces the alignment of `=` in assignments on consecutive lines.
  ForceEqualSignAlignment: false

Layout/FirstArgumentIndentation:
  Description: "Checks the indentation of the first argument in a method call."
  Enabled: true
  EnforcedStyle: special_for_inner_method_call_in_parentheses
  SupportedStyles:
    # The first parameter should always be indented one step more than the
    # preceding line.
    - consistent
    # The first parameter should always be indented one level relative to the
    # parent that is receiving the parameter
    - consistent_relative_to_receiver
    # The first parameter should normally be indented one step more than the
    # preceding line, but if it's a parameter for a method call that is itself
    # a parameter in a method call, then the inner parameter should be indented
    # relative to the inner method.
    - special_for_inner_method_call
    # Same as `special_for_inner_method_call` except that the special rule only
    # applies if the outer method call encloses its arguments in parentheses.
    - special_for_inner_method_call_in_parentheses
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/FirstArrayElementIndentation:
  Description: >-
    Checks the indentation of the first element in an array
    literal.
  Enabled: true
  # The value `special_inside_parentheses` means that array literals with
  # brackets that have their opening bracket on the same line as a surrounding
  # opening round parenthesis, shall have their first element indented relative
  # to the first position inside the parenthesis.
  #
  # The value `consistent` means that the indentation of the first element shall
  # always be relative to the first position of the line where the opening
  # bracket is.
  #
  # The value `align_brackets` means that the indentation of the first element
  # shall always be relative to the position of the opening bracket.
  EnforcedStyle: special_inside_parentheses
  SupportedStyles:
    - special_inside_parentheses
    - consistent
    - align_brackets
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/FirstArrayElementLineBreak:
  Description: >-
    Checks for a line break before the first element in a
    multi-line array.
  Enabled: false

Layout/FirstHashElementIndentation:
  Description: "Checks the indentation of the first key in a hash literal."
  Enabled: true
  # The value `special_inside_parentheses` means that hash literals with braces
  # that have their opening brace on the same line as a surrounding opening
  # round parenthesis, shall have their first key indented relative to the
  # first position inside the parenthesis.
  #
  # The value `consistent` means that the indentation of the first key shall
  # always be relative to the first position of the line where the opening
  # brace is.
  #
  # The value `align_braces` means that the indentation of the first key shall
  # always be relative to the position of the opening brace.
  EnforcedStyle: special_inside_parentheses
  SupportedStyles:
    - special_inside_parentheses
    - consistent
    - align_braces
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/FirstHashElementLineBreak:
  Description: >-
    Checks for a line break before the first element in a
    multi-line hash.
  Enabled: false

Layout/FirstMethodArgumentLineBreak:
  Description: >-
    Checks for a line break before the first argument in a
    multi-line method call.
  Enabled: false

Layout/FirstMethodParameterLineBreak:
  Description: >-
    Checks for a line break before the first parameter in a
    multi-line method parameter definition.
  Enabled: false

Layout/FirstParameterIndentation:
  Description: >-
    Checks the indentation of the first parameter in a
    method definition.
  Enabled: true
  EnforcedStyle: consistent
  SupportedStyles:
    - consistent
    - align_parentheses
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/HashAlignment:
  Description: >-
    Align the elements of a hash literal if they span more than
    one line.
  Enabled: true
  AllowMultipleStyles: true
  # Alignment of entries using hash rocket as separator. Valid values are:
  #
  # key - left alignment of keys
  #   'a' => 2
  #   'bb' => 3
  # separator - alignment of hash rockets, keys are right aligned
  #    'a' => 2
  #   'bb' => 3
  # table - left alignment of keys, hash rockets, and values
  #   'a'  => 2
  #   'bb' => 3
  EnforcedHashRocketStyle: key
  SupportedHashRocketStyles:
    - key
    - separator
    - table
  # Alignment of entries using colon as separator. Valid values are:
  #
  # key - left alignment of keys
  #   a: 0
  #   bb: 1
  # separator - alignment of colons, keys are right aligned
  #    a: 0
  #   bb: 1
  # table - left alignment of keys and values
  #   a:  0
  #   bb: 1
  EnforcedColonStyle: key
  SupportedColonStyles:
    - key
    - separator
    - table
  # Select whether hashes that are the last argument in a method call should be
  # inspected? Valid values are:
  #
  # always_inspect - Inspect both implicit and explicit hashes.
  #   Registers an offense for:
  #     function(a: 1,
  #       b: 2)
  #   Registers an offense for:
  #     function({a: 1,
  #       b: 2})
  # always_ignore - Ignore both implicit and explicit hashes.
  #   Accepts:
  #     function(a: 1,
  #       b: 2)
  #   Accepts:
  #     function({a: 1,
  #       b: 2})
  # ignore_implicit - Ignore only implicit hashes.
  #   Accepts:
  #     function(a: 1,
  #       b: 2)
  #   Registers an offense for:
  #     function({a: 1,
  #       b: 2})
  # ignore_explicit - Ignore only explicit hashes.
  #   Accepts:
  #     function({a: 1,
  #       b: 2})
  #   Registers an offense for:
  #     function(a: 1,
  #       b: 2)
  EnforcedLastArgumentHashStyle: always_inspect
  SupportedLastArgumentHashStyles:
    - always_inspect
    - always_ignore
    - ignore_implicit
    - ignore_explicit

Layout/HeredocArgumentClosingParenthesis:
  Description: >-
    Checks for the placement of the closing parenthesis in a
    method call that passes a HEREDOC string as an argument.
  Enabled: false

Layout/HeredocIndentation:
  Description: "This cop checks the indentation of the here document bodies."
  Enabled: true

Layout/IndentationConsistency:
  Description: "Keep indentation straight."
  StyleGuide: "#spaces-indentation"
  Enabled: true
  # The difference between `indented` and `normal` is that the `indented_internal_methods`
  # style prescribes that in classes and modules the `protected` and `private`
  # modifier keywords shall be indented the same as public methods and that
  # protected and private members shall be indented one step more than the
  # modifiers. Other than that, both styles mean that entities on the same
  # logical depth shall have the same indentation.
  EnforcedStyle: normal
  SupportedStyles:
    - normal
    - indented_internal_methods
  Reference:
    # A reference to `EnforcedStyle: indented_internal_methods`.
    - https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions

Layout/IndentationStyle:
  Description: "Consistent indentation either with tabs only or spaces only."
  StyleGuide: "#spaces-indentation"
  Enabled: true
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  # It is used during auto-correction to determine how many spaces should
  # replace each tab.
  IndentationWidth: ~
  EnforcedStyle: spaces
  SupportedStyles:
    - spaces
    - tabs

Layout/InitialIndentation:
  Description: >-
    Checks the indentation of the first non-blank non-comment line in a file.
  Enabled: true

Layout/LeadingCommentSpace:
  Description: "Comments should start with a space."
  StyleGuide: "#hash-space"
  Enabled: true
  AllowDoxygenCommentStyle: false
  AllowGemfileRubyComment: false

Layout/LeadingEmptyLines:
  Description: Check for unnecessary blank lines at the beginning of a file.
  # CHANGED
  Enabled: false

Layout/LineEndStringConcatenationIndentation:
  Description: >-
    Checks the indentation of the next line after a line that
    ends with a string literal and a backslash.
  Enabled: pending
  EnforcedStyle: aligned
  SupportedStyles:
    - aligned
    - indented
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/LineLength:
  Description: "Checks that line length does not exceed the configured limit."
  Enabled: true
  Max: 120
  # To make it possible to copy or click on URIs in the code, we allow lines
  # containing a URI to be longer than Max.
  AllowHeredoc: true
  AllowURI: true
  URISchemes:
    - http
    - https
  # The IgnoreCopDirectives option causes the LineLength rule to ignore cop
  # directives like '# rubocop: enable ...' when calculating a line's length.
  IgnoreCopDirectives: true
  # The IgnoredPatterns option is a list of !ruby/regexp and/or string
  # elements. Strings will be converted to Regexp objects. A line that matches
  # any regular expression listed in this option will be ignored by LineLength.
  IgnoredPatterns: []

Layout/MultilineArrayBraceLayout:
  Description: >-
    Checks that the closing brace in an array literal is
    either on the same line as the last array element, or
    a new line.
  Enabled: true
  EnforcedStyle: symmetrical
  SupportedStyles:
    # symmetrical: closing brace is positioned in same way as opening brace
    # new_line: closing brace is always on a new line
    # same_line: closing brace is always on the same line as last element
    - symmetrical
    - new_line
    - same_line

Layout/MultilineArrayLineBreaks:
  Description: >-
    Checks that each item in a multi-line array literal
    starts on a separate line.
  Enabled: false

Layout/MultilineAssignmentLayout:
  Description: "Check for a newline after the assignment operator in multi-line assignments."
  Enabled: false
  SupportedTypes:
    - block
    - case
    - class
    - if
    - kwbegin
    - module
  EnforcedStyle: new_line
  SupportedStyles:
    # Ensures that the assignment operator and the rhs are on the same line for
    # the set of supported types.
    - same_line
    # Ensures that the assignment operator and the rhs are on separate lines
    # for the set of supported types.
    - new_line

Layout/MultilineBlockLayout:
  Description: "Ensures newlines after multiline block do statements."
  Enabled: true

Layout/MultilineHashBraceLayout:
  Description: >-
    Checks that the closing brace in a hash literal is
    either on the same line as the last hash element, or
    a new line.
  Enabled: true
  EnforcedStyle: symmetrical
  SupportedStyles:
    # symmetrical: closing brace is positioned in same way as opening brace
    # new_line: closing brace is always on a new line
    # same_line: closing brace is always on same line as last element
    - symmetrical
    - new_line
    - same_line

Layout/MultilineHashKeyLineBreaks:
  Description: >-
    Checks that each item in a multi-line hash literal
    starts on a separate line.
  Enabled: false

Layout/MultilineMethodArgumentLineBreaks:
  Description: >-
    Checks that each argument in a multi-line method call
    starts on a separate line.
  Enabled: false

Layout/MultilineMethodCallBraceLayout:
  Description: >-
    Checks that the closing brace in a method call is
    either on the same line as the last method argument, or
    a new line.
  Enabled: true
  EnforcedStyle: symmetrical
  SupportedStyles:
    # symmetrical: closing brace is positioned in same way as opening brace
    # new_line: closing brace is always on a new line
    # same_line: closing brace is always on the same line as last argument
    - symmetrical
    - new_line
    - same_line

Layout/MultilineMethodCallIndentation:
  Description: >-
    Checks indentation of method calls with the dot operator
    that span more than one line.
  Enabled: true
  EnforcedStyle: aligned
  SupportedStyles:
    - aligned
    - indented
    - indented_relative_to_receiver
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/MultilineMethodDefinitionBraceLayout:
  Description: >-
    Checks that the closing brace in a method definition is
    either on the same line as the last method parameter, or
    a new line.
  Enabled: true
  EnforcedStyle: symmetrical
  SupportedStyles:
    # symmetrical: closing brace is positioned in same way as opening brace
    # new_line: closing brace is always on a new line
    # same_line: closing brace is always on the same line as last parameter
    - symmetrical
    - new_line
    - same_line

Layout/MultilineOperationIndentation:
  Description: >-
    Checks indentation of binary operations that span more than
    one line.
  Enabled: true
  EnforcedStyle: aligned
  SupportedStyles:
    - aligned
    - indented
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/ParameterAlignment:
  Description: >-
    Align the parameters of a method definition if they span more
    than one line.
  Enabled: true
  # Alignment of parameters in multi-line method calls.
  #
  # The `with_first_parameter` style aligns the following lines along the same
  # column as the first parameter.
  #
  #     def method_foo(a,
  #                    b)
  #
  # The `with_fixed_indentation` style aligns the following lines with one
  # level of indentation relative to the start of the line with the method call.
  #
  #     def method_foo(a,
  #       b)
  EnforcedStyle: with_first_parameter
  SupportedStyles:
    - with_first_parameter
    - with_fixed_indentation
  # By default the indentation width from `Layout/IndentationWidth` is used,
  # but it can be overridden by setting this parameter.
  IndentationWidth: ~

Layout/RedundantLineBreak:
  Description: >-
    Do not break up an expression into multiple lines when it fits
    on a single line.
  Enabled: false
  InspectBlocks: false

Layout/RescueEnsureAlignment:
  Description: "Align rescues and ensures correctly."
  Enabled: true

Layout/SingleLineBlockChain:
  Description: "Put method call on a separate line if chained to a single line block."
  Enabled: false

Layout/SpaceAfterColon:
  Description: "Use spaces after colons."
  Enabled: true

Layout/SpaceAfterComma:
  Description: "Use spaces after commas."
  Enabled: true

Layout/SpaceAfterMethodName:
  Description: >-
    Do not put a space between a method name and the opening
    parenthesis in a method definition.
  Enabled: true

Layout/SpaceAfterNot:
  Description: Tracks redundant space after the ! operator.
  Enabled: true

Layout/SpaceAfterSemicolon:
  Description: "Use spaces after semicolons."
  Enabled: true

Layout/SpaceAroundBlockParameters:
  Description: "Checks the spacing inside and after block parameters pipes."
  Enabled: true
  EnforcedStyleInsidePipes: no_space
  SupportedStylesInsidePipes:
    - space
    - no_space

# POSSIBLE CHANGE
Layout/SpaceAroundEqualsInParameterDefault:
  Description: >-
    Checks that the equals signs in parameter default assignments
    have or don't have surrounding space depending on
    configuration.
  StyleGuide: "#spaces-around-equals"
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space

Layout/SpaceAroundKeyword:
  Description: "Use a space around keywords if appropriate."
  Enabled: true

Layout/SpaceAroundMethodCallOperator:
  Description: "Checks method call operators to not have spaces around them."
  Enabled: true

Layout/SpaceAroundOperators:
  Description: "Use a single space around operators."
  Enabled: true
  # When `true`, allows most uses of extra spacing if the intent is to align
  # with an operator on the previous or next line, not counting empty lines
  # or comment lines.
  AllowForAlignment: true
  EnforcedStyleForExponentOperator: no_space
  SupportedStylesForExponentOperator:
    - space
    - no_space

Layout/SpaceBeforeBlockBraces:
  Description: >-
    Checks that the left block brace has or doesn't have space
    before it.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
  EnforcedStyleForEmptyBraces: space
  SupportedStylesForEmptyBraces:
    - space
    - no_space

Layout/SpaceBeforeBrackets:
  Description: "Checks for receiver with a space before the opening brackets."
  Enabled: pending

Layout/SpaceBeforeComma:
  Description: "No spaces before commas."
  Enabled: true

Layout/SpaceBeforeComment:
  Description: >-
    Checks for missing space between code and a comment on the
    same line.
  Enabled: true

Layout/SpaceBeforeFirstArg:
  Description: >-
    Checks that exactly one space is used between a method name
    and the first argument for method calls without parentheses.
  Enabled: true
  # When `true`, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true

Layout/SpaceBeforeSemicolon:
  Description: "No spaces before semicolons."
  Enabled: true

Layout/SpaceInLambdaLiteral:
  Description: "Checks for spaces in lambda literals."
  Enabled: true
  EnforcedStyle: require_no_space
  SupportedStyles:
    - require_no_space
    - require_space

Layout/SpaceInsideArrayLiteralBrackets:
  Description: "Checks the spacing inside array literal brackets."
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - no_space
    # 'compact' normally requires a space inside the brackets, with the exception
    # that successive left brackets or right brackets are collapsed together
    - compact
  EnforcedStyleForEmptyBrackets: no_space
  SupportedStylesForEmptyBrackets:
    - space
    - no_space

Layout/SpaceInsideArrayPercentLiteral:
  Description: "No unnecessary additional spaces between elements in %i/%w literals."
  Enabled: true

Layout/SpaceInsideBlockBraces:
  Description: >-
    Checks that block braces have or don't have surrounding space.
    For blocks taking parameters, checks that the left brace has
    or doesn't have trailing space.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
  EnforcedStyleForEmptyBraces: no_space
  SupportedStylesForEmptyBraces:
    - space
    - no_space
  # Space between `{` and `|`. Overrides `EnforcedStyle` if there is a conflict.
  SpaceBeforeBlockParameters: true

Layout/SpaceInsideHashLiteralBraces:
  Description: "Use spaces inside hash literal braces - or don't."
  StyleGuide: "#spaces-braces"
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
    # 'compact' normally requires a space inside hash braces, with the exception
    # that successive left braces or right braces are collapsed together
    - compact
  EnforcedStyleForEmptyBraces: no_space
  SupportedStylesForEmptyBraces:
    - space
    - no_space

Layout/SpaceInsideParens:
  Description: "No spaces after ( or before )."
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - compact
    - no_space

Layout/SpaceInsidePercentLiteralDelimiters:
  Description: "No unnecessary spaces inside delimiters of %i/%w/%x literals."
  Enabled: true

Layout/SpaceInsideRangeLiteral:
  Description: "No spaces inside range literals."
  Enabled: true

Layout/SpaceInsideReferenceBrackets:
  Description: "Checks the spacing inside referential brackets."
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - no_space
  EnforcedStyleForEmptyBrackets: no_space
  SupportedStylesForEmptyBrackets:
    - space
    - no_space

Layout/SpaceInsideStringInterpolation:
  Description: "Checks for padding/surrounding spaces inside string interpolation."
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - no_space

Layout/TrailingEmptyLines:
  Description: "Checks trailing blank lines and final newline."
  # CHANGED
  Enabled: false
  EnforcedStyle: final_newline
  SupportedStyles:
    - final_newline
    - final_blank_line

Layout/TrailingWhitespace:
  Description: "Avoid trailing whitespace."
  Enabled: true
  AllowInHeredoc: false

#################### Lint ##################################
### Warnings

Lint/AmbiguousAssignment:
  Description: "Checks for mistyped shorthand assignments."
  Enabled: pending

Lint/AmbiguousBlockAssociation:
  Description: >-
    Checks for ambiguous block association with method when param passed without
    parentheses.
  Enabled: true
  IgnoredMethods: []

Lint/AmbiguousOperator:
  Description: >-
    Checks for ambiguous operators in the first argument of a
    method invocation without parentheses.
  Enabled: true

Lint/AmbiguousOperatorPrecedence:
  Description: >-
    Checks for expressions containing multiple binary operations with
    ambiguous precedence.
  Enabled: pending

# -----------------------------------
# -----------------------------------

Lint/AmbiguousRange:
  Description: Checks for ranges with ambiguous boundaries.
  Enabled: pending
  SafeAutoCorrect: false
  RequireParenthesesForMethodChains: false

Lint/AmbiguousRegexpLiteral:
  Description: >-
    Checks for ambiguous regexp literals in the first argument of
    a method invocation without parentheses.
  Enabled: true

Lint/AssignmentInCondition:
  Description: "Don't use assignment in conditions."
  StyleGuide: "#safe-assignment-in-condition"
  Enabled: true
  AllowSafeAssignment: true

Lint/BigDecimalNew:
  Description: "`BigDecimal.new()` is deprecated. Use `BigDecimal()` instead."
  Enabled: true

Lint/BinaryOperatorWithIdenticalOperands:
  Description: "This cop checks for places where binary operator has identical operands."
  Enabled: true
  Safe: false

Lint/BooleanSymbol:
  Description: "Check for `:true` and `:false` symbols."
  Enabled: true
  SafeAutoCorrect: false

Lint/CircularArgumentReference:
  Description: "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument."
  Enabled: true

Lint/ConstantDefinitionInBlock:
  Description: "Do not define constants within a block."
  StyleGuide: "#no-constant-definition-in-block"
  Enabled: true
  # `enums` for Typed Enums via T::Enum in Sorbet.
  # https://sorbet.org/docs/tenum
  AllowedMethods:
    - enums

Lint/ConstantResolution:
  Description: "Check that constants are fully qualified with `::`."
  Enabled: false
  # Restrict this cop to only looking at certain names
  Only: []
  # Restrict this cop from only looking at certain names
  Ignore: []

Lint/Debugger:
  Description: "Check for debugger calls."
  Enabled: true
  DebuggerReceivers: [] # deprecated
  DebuggerMethods:
    # Groups are available so that a specific group can be disabled in
    # a user's configuration, but are otherwise not significant.
    Kernel:
      - binding.irb
    Byebug:
      - byebug
      - remote_byebug
      - Kernel.byebug
      - Kernel.remote_byebug
    Capybara:
      - save_and_open_page
      - save_and_open_screenshot
    debug.rb:
      - binding.b
      - binding.break
      - Kernel.binding.b
      - Kernel.binding.break
    Pry:
      - binding.pry
      - binding.remote_pry
      - binding.pry_remote
      - Pry.rescue
    Rails:
      - debugger
      - Kernel.debugger
    RubyJard:
      - jard
    WebConsole:
      - binding.console

Lint/DeprecatedClassMethods:
  Description: "Check for deprecated class method calls."
  Enabled: true

Lint/DeprecatedConstants:
  Description: "Checks for deprecated constants."
  Enabled: pending
  # You can configure deprecated constants.
  # If there is an alternative method, you can set alternative value as `Alternative`.
  # And you can set the deprecated version as `DeprecatedVersion`.
  # These options can be omitted if they are not needed.
  #
  # DeprecatedConstants:
  #   'DEPRECATED_CONSTANT':
  #     Alternative: 'alternative_value'
  #     DeprecatedVersion: 'deprecated_version'
  #
  DeprecatedConstants:
    "NIL":
      Alternative: "nil"
      DeprecatedVersion: "2.4"
    "TRUE":
      Alternative: "true"
      DeprecatedVersion: "2.4"
    "FALSE":
      Alternative: "false"
      DeprecatedVersion: "2.4"
    "Net::HTTPServerException":
      Alternative: "Net::HTTPClientException"
      DeprecatedVersion: "2.6"
    "Random::DEFAULT":
      Alternative: "Random.new"
      DeprecatedVersion: "3.0"

Lint/DeprecatedOpenSSLConstant:
  Description: "Don't use algorithm constants for `OpenSSL::Cipher` and `OpenSSL::Digest`."
  Enabled: true

Lint/DisjunctiveAssignmentInConstructor:
  Description: "In constructor, plain assignment is preferred over disjunctive."
  Enabled: true
  Safe: false

Lint/DuplicateBranch:
  Description: Checks that there are no repeated bodies within `if/unless`, `case-when` and `rescue` constructs.
  Enabled: pending
  IgnoreLiteralBranches: false
  IgnoreConstantBranches: false

Lint/DuplicateCaseCondition:
  Description: "Do not repeat values in case conditionals."
  Enabled: true

Lint/DuplicateElsifCondition:
  Description: "Do not repeat conditions used in if `elsif`."
  Enabled: true

Lint/DuplicateHashKey:
  Description: "Check for duplicate keys in hash literals."
  Enabled: true

Lint/DuplicateMethods:
  Description: "Check for duplicate method definitions."
  Enabled: true

Lint/DuplicateRegexpCharacterClassElement:
  Description: "Checks for duplicate elements in Regexp character classes."
  Enabled: pending

Lint/DuplicateRequire:
  Description: "Check for duplicate `require`s and `require_relative`s."
  Enabled: true

Lint/DuplicateRescueException:
  Description: "Checks that there are no repeated exceptions used in `rescue` expressions."
  Enabled: true

Lint/EachWithObjectArgument:
  Description: "Check for immutable argument given to each_with_object."
  Enabled: true

Lint/ElseLayout:
  Description: "Check for odd code arrangement in an else block."
  Enabled: true

Lint/EmptyBlock:
  Description: "This cop checks for blocks without a body."
  Enabled: pending
  AllowComments: true
  AllowEmptyLambdas: true

Lint/EmptyClass:
  Description: "Checks for classes and metaclasses without a body."
  Enabled: pending
  AllowComments: false

Lint/EmptyConditionalBody:
  Description: "This cop checks for the presence of `if`, `elsif` and `unless` branches without a body."
  Enabled: true
  AllowComments: true

Lint/EmptyEnsure:
  Description: "Checks for empty ensure block."
  Enabled: true

Lint/EmptyExpression:
  Description: "Checks for empty expressions."
  Enabled: true

Lint/EmptyFile:
  Description: "Enforces that Ruby source files are not empty."
  Enabled: true
  AllowComments: true

Lint/EmptyInPattern:
  Description: "Checks for the presence of `in` pattern branches without a body."
  Enabled: pending
  AllowComments: true

Lint/EmptyInterpolation:
  Description: "Checks for empty string interpolation."
  Enabled: true

Lint/EmptyWhen:
  Description: "Checks for `when` branches with empty bodies."
  Enabled: true
  AllowComments: true

Lint/EnsureReturn:
  Description: "Do not use return in an ensure block."
  StyleGuide: "#no-return-ensure"
  Enabled: true

Lint/ErbNewArguments:
  Description: "Use `:trim_mode` and `:eoutvar` keyword arguments to `ERB.new`."
  Enabled: true

Lint/FlipFlop:
  Description: "Checks for flip-flops."
  StyleGuide: "#no-flip-flops"
  Enabled: true

Lint/FloatComparison:
  Description: "Checks for the presence of precise comparison of floating point numbers."
  StyleGuide: "#float-comparison"
  Enabled: true

Lint/FloatOutOfRange:
  Description: >-
    Catches floating-point literals too large or small for Ruby to
    represent.
  Enabled: true

Lint/FormatParameterMismatch:
  Description: "The number of parameters to format/sprint must match the fields."
  Enabled: true

Lint/HashCompareByIdentity:
  Description: "Prefer using `Hash#compare_by_identity` than using `object_id` for keys."
  StyleGuide: "#identity-comparison"
  Enabled: true
  Safe: false

Lint/HeredocMethodCallPosition:
  Description: >-
    Checks for the ordering of a method call where
    the receiver of the call is a HEREDOC.
  Enabled: false
  StyleGuide: "#heredoc-method-calls"

Lint/IdentityComparison:
  Description: "Prefer `equal?` over `==` when comparing `object_id`."
  Enabled: true
  StyleGuide: "#identity-comparison"

Lint/ImplicitStringConcatenation:
  Description: >-
    Checks for adjacent string literals on the same line, which
    could better be represented as a single string literal.
  Enabled: true

Lint/IncompatibleIoSelectWithFiberScheduler:
  Description: "Checks for `IO.select` that is incompatible with Fiber Scheduler."
  Enabled: pending
  SafeAutoCorrect: false

Lint/IneffectiveAccessModifier:
  Description: >-
    Checks for attempts to use `private` or `protected` to set
    the visibility of a class method, which does not work.
  Enabled: true

Lint/InheritException:
  Description: "Avoid inheriting from the `Exception` class."
  Enabled: true
  # The default base class in favour of `Exception`.
  EnforcedStyle: runtime_error
  SupportedStyles:
    - runtime_error
    - standard_error

Lint/InterpolationCheck:
  Description: "Raise warning for interpolation in single q strs."
  Enabled: true
  Safe: false

Lint/LambdaWithoutLiteralBlock:
  Description: "Checks uses of lambda without a literal block."
  Enabled: pending

Lint/LiteralAsCondition:
  Description: "Checks of literals used in conditions."
  Enabled: true

Lint/LiteralInInterpolation:
  Description: "Checks for literals used in interpolation."
  Enabled: true

Lint/Loop:
  Description: >-
    Use Kernel#loop with break rather than begin/end/until or
    begin/end/while for post-loop tests.
  StyleGuide: "#loop-with-break"
  Enabled: true
  Safe: false

Lint/MissingCopEnableDirective:
  Description: "Checks for a `# rubocop:enable` after `# rubocop:disable`."
  Enabled: true
  # Maximum number of consecutive lines the cop can be disabled for.
  # 0 allows only single-line disables
  # 1 would mean the maximum allowed is the following:
  #   # rubocop:disable SomeCop
  #   a = 1
  #   # rubocop:enable SomeCop
  # .inf for any size
  MaximumRangeSize: .inf

Lint/MissingSuper:
  Description: >-
    This cop checks for the presence of constructors and lifecycle callbacks
    without calls to `super`.
  Enabled: true

Lint/MixedRegexpCaptureTypes:
  Description: "Do not mix named captures and numbered captures in a Regexp literal."
  Enabled: true

Lint/MultipleComparison:
  Description: "Use `&&` operator to compare multiple values."
  Enabled: true

Lint/NestedMethodDefinition:
  Description: "Do not use nested method definitions."
  StyleGuide: "#no-nested-methods"
  Enabled: true

Lint/NestedPercentLiteral:
  Description: "Checks for nested percent literals."
  Enabled: true

Lint/NextWithoutAccumulator:
  Description: >-
    Do not omit the accumulator when calling `next`
    in a `reduce`/`inject` block.
  Enabled: true

Lint/NoReturnInBeginEndBlocks:
  Description: "Do not `return` inside `begin..end` blocks in assignment contexts."
  Enabled: pending

Lint/NonDeterministicRequireOrder:
  Description: "Always sort arrays returned by Dir.glob when requiring files."
  Enabled: true
  Safe: false

Lint/NonLocalExitFromIterator:
  Description: "Do not use return in iterator to cause non-local exit."
  Enabled: true

Lint/NumberConversion:
  Description: "Checks unsafe usage of number conversion methods."
  Enabled: false
  SafeAutoCorrect: false
  IgnoredMethods: []
  IgnoredClasses:
    - Time
    - DateTime

Lint/NumberedParameterAssignment:
  Description: "Checks for uses of numbered parameter assignment."
  Enabled: pending

Lint/OrAssignmentToConstant:
  Description: "Checks unintended or-assignment to constant."
  Enabled: pending
  Safe: false

Lint/OrderedMagicComments:
  Description: "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang."
  Enabled: true

Lint/OutOfRangeRegexpRef:
  Description: "Checks for out of range reference for Regexp because it always returns nil."
  Enabled: true
  Safe: false

Lint/ParenthesesAsGroupedExpression:
  Description: >-
    Checks for method calls with a space before the opening
    parenthesis.
  StyleGuide: "#parens-no-spaces"
  Enabled: true

Lint/PercentStringArray:
  Description: >-
    Checks for unwanted commas and quotes in %w/%W literals.
  Enabled: true
  Safe: false

Lint/PercentSymbolArray:
  Description: >-
    Checks for unwanted commas and colons in %i/%I literals.
  Enabled: true

Lint/RaiseException:
  Description: Checks for `raise` or `fail` statements which are raising `Exception` class.
  StyleGuide: "#raise-exception"
  Enabled: true
  Safe: false
  AllowedImplicitNamespaces:
    - "Gem"

Lint/RandOne:
  Description: >-
    Checks for `rand(1)` calls. Such calls always return `0`
    and most likely a mistake.
  Enabled: true

Lint/RedundantCopDisableDirective:
  Description: >-
    Checks for rubocop:disable comments that can be removed.
    Note: this cop is not disabled when disabling all cops.
    It must be explicitly disabled.
  Enabled: true

Lint/RedundantCopEnableDirective:
  Description: Checks for rubocop:enable comments that can be removed.
  Enabled: true

Lint/RedundantDirGlobSort:
  Description: "Checks for redundant `sort` method to `Dir.glob` and `Dir[]`."
  Enabled: pending

Lint/RedundantRequireStatement:
  Description: "Checks for unnecessary `require` statement."
  Enabled: true

Lint/RedundantSafeNavigation:
  Description: "Checks for redundant safe navigation calls."
  Enabled: true
  AllowedMethods:
    - instance_of?
    - kind_of?
    - is_a?
    - eql?
    - respond_to?
    - equal?
  Safe: false

Lint/RedundantSplatExpansion:
  Description: "Checks for splat unnecessarily being called on literals."
  Enabled: true
  AllowPercentLiteralArrayArgument: true

Lint/RedundantStringCoercion:
  Description: "Checks for Object#to_s usage in string interpolation."
  StyleGuide: "#no-to-s"
  Enabled: true

Lint/RedundantWithIndex:
  Description: "Checks for redundant `with_index`."
  Enabled: true

Lint/RedundantWithObject:
  Description: "Checks for redundant `with_object`."
  Enabled: true

Lint/RegexpAsCondition:
  Description: >-
    Do not use regexp literal as a condition.
    The regexp literal matches `$_` implicitly.
  Enabled: true

Lint/RequireParentheses:
  Description: >-
    Use parentheses in the method call to avoid confusion
    about precedence.
  Enabled: true

Lint/RequireRelativeSelfPath:
  Description: "Checks for uses a file requiring itself with `require_relative`."
  Enabled: pending

Lint/RescueException:
  Description: "Avoid rescuing the Exception class."
  StyleGuide: "#no-blind-rescues"
  Enabled: true

Lint/RescueType:
  Description: "Avoid rescuing from non constants that could result in a `TypeError`."
  Enabled: true

Lint/ReturnInVoidContext:
  Description: "Checks for return in void context."
  Enabled: true

Lint/SafeNavigationChain:
  Description: "Do not chain ordinary method call after safe navigation operator."
  Enabled: true
  AllowedMethods:
    - present?
    - blank?
    - presence
    - try
    - try!
    - in?

Lint/SafeNavigationConsistency:
  Description: >-
    Check to make sure that if safe navigation is used for a method
    call in an `&&` or `||` condition that safe navigation is used
    for all method calls on that same object.
  Enabled: true
  AllowedMethods:
    - present?
    - blank?
    - presence
    - try
    - try!

Lint/SafeNavigationWithEmpty:
  Description: "Avoid `foo&.empty?` in conditionals."
  Enabled: true

Lint/ScriptPermission:
  Description: "Grant script file execute permission."
  Enabled: true

Lint/SelfAssignment:
  Description: "Checks for self-assignments."
  Enabled: true

Lint/SendWithMixinArgument:
  Description: "Checks for `send` method when using mixin."
  Enabled: true

Lint/ShadowedArgument:
  Description: "Avoid reassigning arguments before they were used."
  Enabled: true
  IgnoreImplicitReferences: false

Lint/ShadowedException:
  Description: >-
    Avoid rescuing a higher level exception
    before a lower level exception.
  Enabled: true

Lint/ShadowingOuterLocalVariable:
  Description: >-
    Do not use the same name as outer local variable
    for block arguments or block local variables.
  Enabled: true

Lint/StructNewOverride:
  Description: "Disallow overriding the `Struct` built-in methods via `Struct.new`."
  Enabled: true

Lint/SuppressedException:
  Description: "Don't suppress exceptions."
  StyleGuide: "#dont-hide-exceptions"
  Enabled: true
  AllowComments: true
  AllowNil: true

Lint/SymbolConversion:
  Description: "Checks for unnecessary symbol conversions."
  Enabled: pending
  EnforcedStyle: strict
  SupportedStyles:
    - strict
    - consistent

Lint/Syntax:
  Description: "Checks for syntax errors."
  Enabled: true

Lint/ToEnumArguments:
  Description: "This cop ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments."
  Enabled: pending

Lint/ToJSON:
  Description: "Ensure #to_json includes an optional argument."
  Enabled: true

Lint/TopLevelReturnWithArgument:
  Description: "This cop detects top level return statements with argument."
  Enabled: true

Lint/TrailingCommaInAttributeDeclaration:
  Description: "This cop checks for trailing commas in attribute declarations."
  Enabled: true

Lint/TripleQuotes:
  Description: "Checks for useless triple quote constructs."
  Enabled: pending

Lint/UnderscorePrefixedVariableName:
  Description: "Do not use prefix `_` for a variable that is used."
  Enabled: true
  AllowKeywordBlockArguments: false

Lint/UnexpectedBlockArity:
  Description: "Looks for blocks that have fewer arguments that the calling method expects."
  Enabled: pending
  Safe: false
  Methods:
    chunk_while: 2
    each_with_index: 2
    each_with_object: 2
    inject: 2
    max: 2
    min: 2
    minmax: 2
    reduce: 2
    slice_when: 2
    sort: 2

Lint/UnifiedInteger:
  Description: "Use Integer instead of Fixnum or Bignum."
  Enabled: true

Lint/UnmodifiedReduceAccumulator:
  Description: Checks for `reduce` or `inject` blocks that do not update the accumulator each iteration.
  Enabled: pending

Lint/UnreachableCode:
  Description: "Unreachable code."
  Enabled: true

Lint/UnreachableLoop:
  Description: "This cop checks for loops that will have at most one iteration."
  Enabled: true
  IgnoredPatterns:
    # RSpec uses `times` in its message expectations
    # eg. `exactly(2).times`
    - !ruby/regexp /(exactly|at_least|at_most)\(\d+\)\.times/

Lint/UnusedBlockArgument:
  Description: "Checks for unused block arguments."
  StyleGuide: "#underscore-unused-vars"
  Enabled: true
  IgnoreEmptyBlocks: true
  AllowUnusedKeywordArguments: false

Lint/UnusedMethodArgument:
  Description: "Checks for unused method arguments."
  StyleGuide: "#underscore-unused-vars"
  Enabled: true
  AllowUnusedKeywordArguments: false
  IgnoreEmptyMethods: true
  IgnoreNotImplementedMethods: true

Lint/UriEscapeUnescape:
  Description: >-
    `URI.escape` method is obsolete and should not be used. Instead, use
    `CGI.escape`, `URI.encode_www_form` or `URI.encode_www_form_component`
    depending on your specific use case.
    Also `URI.unescape` method is obsolete and should not be used. Instead, use
    `CGI.unescape`, `URI.decode_www_form` or `URI.decode_www_form_component`
    depending on your specific use case.
  Enabled: true

Lint/UriRegexp:
  Description: "Use `URI::DEFAULT_PARSER.make_regexp` instead of `URI.regexp`."
  Enabled: true

Lint/UselessAccessModifier:
  Description: "Checks for useless access modifiers."
  Enabled: true
  ContextCreatingMethods: []
  MethodCreatingMethods: []

Lint/UselessAssignment:
  Description: "Checks for useless assignment to a local variable."
  StyleGuide: "#underscore-unused-vars"
  Enabled: true

Lint/UselessElseWithoutRescue:
  Description: "Checks for useless `else` in `begin..end` without `rescue`."
  Enabled: true

Lint/UselessMethodDefinition:
  Description: "Checks for useless method definitions."
  Enabled: true
  Safe: false
  AllowComments: true

Lint/UselessRuby2Keywords:
  Description: "Finds unnecessary uses of `ruby2_keywords`."
  Enabled: pending

Lint/UselessSetterCall:
  Description: "Checks for useless setter call to a local variable."
  Enabled: true
  SafeAutoCorrect: false
  Safe: false

Lint/UselessTimes:
  Description: "Checks for useless `Integer#times` calls."
  Enabled: true
  Safe: false

Lint/Void:
  Description: "Possible use of operator/literal/variable in void context."
  Enabled: true
  CheckForMethodsWithNoSideEffects: false

#################### Metrics ###############################

Metrics/AbcSize:
  Description: >-
    A calculated magnitude based on number of assignments,
    branches, and conditions.
  Reference:
    - http://c2.com/cgi/wiki?AbcMetric
    - https://en.wikipedia.org/wiki/ABC_Software_Metric
  Enabled: true
  # The ABC size is a calculated magnitude, so this number can be an Integer or
  # a Float.
  IgnoredMethods: []
  CountRepeatedAttributes: true
  Max: 17

Metrics/BlockLength:
  Description: "Avoid long blocks with many lines."
  Enabled: true
  CountComments: false # count full line comments?
  Max: 25
  CountAsOne: []
  ExcludedMethods: [] # deprecated, retained for backwards compatibility
  IgnoredMethods:
    # By default, exclude the `#refine` method, as it tends to have larger
    # associated blocks.
    - refine
  Exclude:
    - "**/*.gemspec"

Metrics/BlockNesting:
  Description: "Avoid excessive block nesting."
  StyleGuide: "#three-is-the-number-thou-shalt-count"
  Enabled: true
  CountBlocks: false
  Max: 3

Metrics/ClassLength:
  Description: "Avoid classes longer than 100 lines of code."
  Enabled: true
  CountComments: false # count full line comments?
  Max: 100
  CountAsOne: []

# Avoid complex methods.
Metrics/CyclomaticComplexity:
  Description: >-
    A complexity metric that is strongly correlated to the number
    of test cases needed to validate a method.
  Enabled: true
  IgnoredMethods: []
  Max: 7

Metrics/MethodLength:
  Description: "Avoid methods longer than 10 lines of code."
  StyleGuide: "#short-methods"
  Enabled: true
  CountComments: false # count full line comments?
  Max: 10
  CountAsOne: []
  ExcludedMethods: [] # deprecated, retained for backwards compatibility
  IgnoredMethods: []

Metrics/ModuleLength:
  Description: "Avoid modules longer than 100 lines of code."
  Enabled: true
  CountComments: false # count full line comments?
  Max: 100
  CountAsOne: []

Metrics/ParameterLists:
  Description: "Avoid parameter lists longer than three or four parameters."
  StyleGuide: "#too-many-params"
  Enabled: true
  Max: 5
  CountKeywordArgs: true
  MaxOptionalParameters: 3

Metrics/PerceivedComplexity:
  Description: >-
    A complexity metric geared towards measuring complexity for a
    human reader.
  Enabled: true
  IgnoredMethods: []
  Max: 8

################## Migration #############################

Migration/DepartmentName:
  Description: >-
    Check that cop names in rubocop:disable (etc) comments are
    given with department name.
  Enabled: true

#################### Naming ##############################

Naming/AccessorMethodName:
  Description: Check the naming of accessor methods for get_/set_.
  StyleGuide: "#accessor_mutator_method_names"
  Enabled: true

Naming/AsciiIdentifiers:
  Description: "Use only ascii symbols in identifiers and constants."
  StyleGuide: "#english-identifiers"
  Enabled: true
  AsciiConstants: true

Naming/BinaryOperatorParameterName:
  Description: "When defining binary operators, name the argument other."
  StyleGuide: "#other-arg"
  Enabled: true

Naming/BlockForwarding:
  Description: "Use anonymous block forwarding."
  StyleGuide: "#block-forwarding"
  Enabled: pending
  EnforcedStyle: anonymous
  SupportedStyles:
    - anonymous
    - explicit
  BlockForwardingName: block

Naming/BlockParameterName:
  Description: >-
    Checks for block parameter names that contain capital letters,
    end in numbers, or do not meet a minimal length.
  Enabled: true
  # Parameter names may be equal to or greater than this value
  MinNameLength: 1
  AllowNamesEndingInNumbers: true
  # Allowed names that will not register an offense
  AllowedNames: []
  # Forbidden names that will register an offense
  ForbiddenNames: []

Naming/ClassAndModuleCamelCase:
  Description: "Use CamelCase for classes and modules."
  StyleGuide: "#camelcase-classes"
  Enabled: true
  # Allowed class/module names can be specified here.
  # These can be full or part of the name.
  AllowedNames:
    - module_parent

Naming/ConstantName:
  Description: "Constants should use SCREAMING_SNAKE_CASE."
  StyleGuide: "#screaming-snake-case"
  Enabled: true

Naming/FileName:
  Description: "Use snake_case for source file names."
  StyleGuide: "#snake-case-files"
  Enabled: true
  # Camel case file names listed in `AllCops:Include` and all file names listed
  # in `AllCops:Exclude` are excluded by default. Add extra excludes here.
  Exclude: []
  # When `true`, requires that each source file should define a class or module
  # with a name which matches the file name (converted to ... case).
  # It further expects it to be nested inside modules which match the names
  # of subdirectories in its path.
  ExpectMatchingDefinition: false
  # When `false`, changes the behavior of ExpectMatchingDefinition to match only
  # whether each source file's class or module name matches the file name --
  # not whether the nested module hierarchy matches the subdirectory path.
  CheckDefinitionPathHierarchy: true
  # paths that are considered root directories, for example "lib" in most ruby projects
  # or "app/models" in rails projects
  CheckDefinitionPathHierarchyRoots:
    - lib
    - spec
    - test
    - src
  # If non-`nil`, expect all source file names to match the following regex.
  # Only the file name itself is matched, not the entire file path.
  # Use anchors as necessary if you want to match the entire name rather than
  # just a part of it.
  Regex: ~
  # With `IgnoreExecutableScripts` set to `true`, this cop does not
  # report offending filenames for executable scripts (i.e. source
  # files with a shebang in the first line).
  IgnoreExecutableScripts: true
  AllowedAcronyms:
    - CLI
    - DSL
    - ACL
    - API
    - ASCII
    - CPU
    - CSS
    - DNS
    - EOF
    - GUID
    - HTML
    - HTTP
    - HTTPS
    - ID
    - IP
    - JSON
    - LHS
    - QPS
    - RAM
    - RHS
    - RPC
    - SLA
    - SMTP
    - SQL
    - SSH
    - TCP
    - TLS
    - TTL
    - UDP
    - UI
    - UID
    - UUID
    - URI
    - URL
    - UTF8
    - VM
    - XML
    - XMPP
    - XSRF
    - XSS

Naming/HeredocDelimiterCase:
  Description: "Use configured case for heredoc delimiters."
  StyleGuide: "#heredoc-delimiters"
  Enabled: true
  EnforcedStyle: uppercase
  SupportedStyles:
    - lowercase
    - uppercase

Naming/HeredocDelimiterNaming:
  Description: "Use descriptive heredoc delimiters."
  StyleGuide: "#heredoc-delimiters"
  Enabled: true
  ForbiddenDelimiters:
    - !ruby/regexp '/(^|\s)(EO[A-Z]{1}|END)(\s|$)/'

Naming/InclusiveLanguage:
  Description: "Recommend the use of inclusive language instead of problematic terms."
  Enabled: false
  CheckIdentifiers: true
  CheckConstants: true
  CheckVariables: true
  CheckStrings: false
  CheckSymbols: true
  CheckComments: true
  CheckFilepaths: true
  FlaggedTerms:
    whitelist:
      Regex: !ruby/regexp '/white[-_\s]?list/'
      Suggestions:
        - allowlist
        - permit
    blacklist:
      Regex: !ruby/regexp '/black[-_\s]?list/'
      Suggestions:
        - denylist
        - block
    slave:
      WholeWord: true
      Suggestions: ["replica", "secondary", "follower"]

Naming/MemoizedInstanceVariableName:
  Description: >-
    Memoized method name should match memo instance variable name.
  Enabled: true
  EnforcedStyleForLeadingUnderscores: disallowed
  SupportedStylesForLeadingUnderscores:
    - disallowed
    - required
    - optional
  Safe: false

Naming/MethodName:
  Description: "Use the configured style when naming methods."
  StyleGuide: "#snake-case-symbols-methods-vars"
  Enabled: true
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase
  # Method names matching patterns are always allowed.
  #
  #   IgnoredPatterns:
  #     - '\A\s*onSelectionBulkChange\s*'
  #     - '\A\s*onSelectionCleared\s*'
  #
  IgnoredPatterns: []

Naming/MethodParameterName:
  Description: >-
    Checks for method parameter names that contain capital letters,
    end in numbers, or do not meet a minimal length.
  Enabled: true
  # Parameter names may be equal to or greater than this value
  MinNameLength: 3
  AllowNamesEndingInNumbers: true
  # Allowed names that will not register an offense
  AllowedNames:
    - at
    - by
    - db
    - id
    - in
    - io
    - ip
    - of
    - "on"
    - os
    - pp
    - to
  # Forbidden names that will register an offense
  ForbiddenNames: []

Naming/PredicateName:
  Description: "Check the names of predicate methods."
  StyleGuide: "#bool-methods-qmark"
  Enabled: true
  # Predicate name prefixes.
  NamePrefix:
    - is_
    - has_
    - have_
  # Predicate name prefixes that should be removed.
  ForbiddenPrefixes:
    - is_
    - has_
    - have_
  # Predicate names which, despite having a forbidden prefix, or no `?`,
  # should still be accepted
  AllowedMethods:
    - is_a?
  # Method definition macros for dynamically generated methods.
  MethodDefinitionMacros:
    - define_method
    - define_singleton_method
  # Exclude Rspec specs because there is a strong convention to write spec
  # helpers in the form of `have_something` or `be_something`.
  Exclude:
    - "spec/**/*"

Naming/RescuedExceptionsVariableName:
  Description: "Use consistent rescued exceptions variables naming."
  Enabled: true
  PreferredName: e

Naming/VariableName:
  Description: "Use the configured style when naming variables."
  StyleGuide: "#snake-case-symbols-methods-vars"
  Enabled: true
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase
  AllowedIdentifiers: []

Naming/VariableNumber:
  Description: "Use the configured style when numbering symbols, methods and variables."
  StyleGuide: "#snake-case-symbols-methods-vars-with-numbers"
  Enabled: true
  EnforcedStyle: normalcase
  SupportedStyles:
    - snake_case
    - normalcase
    - non_integer
  CheckMethodNames: true
  CheckSymbols: true
  AllowedIdentifiers:
    - capture3 # Open3.capture3
    - iso8601 # Time#iso8601
    - rfc1123_date # CGI.rfc1123_date
    - rfc822 # Time#rfc822
    - rfc2822 # Time#rfc2822
    - rfc3339 # DateTime.rfc3339

#################### Security ##############################

Security/Eval:
  Description: "The use of eval represents a serious security risk."
  Enabled: true

Security/IoMethods:
  Description: >-
    Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`,
    `IO.foreach`, and `IO.readlines`.
  Enabled: pending
  Safe: false

Security/JSONLoad:
  Description: >-
    Prefer usage of `JSON.parse` over `JSON.load` due to potential
    security issues. See reference for more information.
  Reference: "https://ruby-doc.org/stdlib-2.7.0/libdoc/json/rdoc/JSON.html#method-i-load"
  Enabled: true
  # Autocorrect here will change to a method that may cause crashes depending
  # on the value of the argument.
  SafeAutoCorrect: false

Security/MarshalLoad:
  Description: >-
    Avoid using of `Marshal.load` or `Marshal.restore` due to potential
    security issues. See reference for more information.
  Reference: "https://ruby-doc.org/core-2.7.0/Marshal.html#module-Marshal-label-Security+considerations"
  Enabled: true

Security/Open:
  Description: "The use of `Kernel#open` and `URI.open` represent a serious security risk."
  Enabled: true
  Safe: false

Security/YAMLLoad:
  Description: >-
    Prefer usage of `YAML.safe_load` over `YAML.load` due to potential
    security issues. See reference for more information.
  Reference: "https://ruby-doc.org/stdlib-2.7.0/libdoc/yaml/rdoc/YAML.html#module-YAML-label-Security"
  Enabled: true
  SafeAutoCorrect: false

#################### Style ###############################

Style/AccessModifierDeclarations:
  Description: "Checks style of how access modifiers are used."
  Enabled: true
  EnforcedStyle: group
  SupportedStyles:
    - inline
    - group
  AllowModifiersOnSymbols: true

Style/AccessorGrouping:
  Description: "Checks for grouping of accessors in `class` and `module` bodies."
  Enabled: true
  EnforcedStyle: grouped
  SupportedStyles:
    # separated: each accessor goes in a separate statement.
    # grouped: accessors are grouped into a single statement.
    - separated
    - grouped

Style/Alias:
  Description: "Use alias instead of alias_method."
  StyleGuide: "#alias-method-lexically"
  Enabled: true
  EnforcedStyle: prefer_alias
  SupportedStyles:
    - prefer_alias
    - prefer_alias_method

Style/AndOr:
  Description: "Use &&/|| instead of and/or."
  StyleGuide: "#no-and-or-or"
  Enabled: true
  SafeAutoCorrect: false
  # Whether `and` and `or` are banned only in conditionals (conditionals)
  # or completely (always).
  EnforcedStyle: conditionals
  SupportedStyles:
    - always
    - conditionals

Style/ArgumentsForwarding:
  Description: "Use arguments forwarding."
  StyleGuide: "#arguments-forwarding"
  Enabled: pending
  AllowOnlyRestArgument: true

Style/ArrayCoercion:
  Description: >-
    Use Array() instead of explicit Array check or [*var], when dealing
    with a variable you want to treat as an Array, but you're not certain it's an array.
  StyleGuide: "#array-coercion"
  Safe: false
  Enabled: false

Style/ArrayJoin:
  Description: "Use Array#join instead of Array#*."
  StyleGuide: "#array-join"
  Enabled: true

Style/AsciiComments:
  Description: "Use only ascii symbols in comments."
  StyleGuide: "#english-comments"
  Enabled: false
  AllowedChars:
    - ©

Style/Attr:
  Description: "Checks for uses of Module#attr."
  StyleGuide: "#attr"
  Enabled: true

Style/AutoResourceCleanup:
  Description: "Suggests the usage of an auto resource cleanup version of a method (if available)."
  Enabled: false

Style/BarePercentLiterals:
  Description: "Checks if usage of %() or %Q() matches configuration."
  StyleGuide: "#percent-q-shorthand"
  Enabled: true
  EnforcedStyle: bare_percent
  SupportedStyles:
    - percent_q
    - bare_percent

Style/BeginBlock:
  Description: "Avoid the use of BEGIN blocks."
  StyleGuide: "#no-BEGIN-blocks"
  Enabled: true

Style/BisectedAttrAccessor:
  Description: >-
    Checks for places where `attr_reader` and `attr_writer`
    for the same method can be combined into single `attr_accessor`.
  Enabled: true

Style/BlockComments:
  Description: "Do not use block comments."
  StyleGuide: "#no-block-comments"
  Enabled: true

Style/BlockDelimiters:
  Description: >-
    Avoid using {...} for multi-line blocks (multiline chaining is
    always ugly).
    Prefer {...} over do...end for single-line blocks.
  StyleGuide: "#single-line-blocks"
  Enabled: true
  EnforcedStyle: line_count_based
  SupportedStyles:
    # The `line_count_based` style enforces braces around single line blocks and
    # do..end around multi-line blocks.
    - line_count_based
    # The `semantic` style enforces braces around functional blocks, where the
    # primary purpose of the block is to return a value and do..end for
    # multi-line procedural blocks, where the primary purpose of the block is
    # its side-effects. Single-line procedural blocks may only use do-end,
    # unless AllowBracesOnProceduralOneLiners has a truthy value (see below).
    #
    # This looks at the usage of a block's method to determine its type (e.g. is
    # the result of a `map` assigned to a variable or passed to another
    # method) but exceptions are permitted in the `ProceduralMethods`,
    # `FunctionalMethods` and `IgnoredMethods` sections below.
    - semantic
    # The `braces_for_chaining` style enforces braces around single line blocks
    # and do..end around multi-line blocks, except for multi-line blocks whose
    # return value is being chained with another method (in which case braces
    # are enforced).
    - braces_for_chaining
    # The `always_braces` style always enforces braces.
    - always_braces
  ProceduralMethods:
    # Methods that are known to be procedural in nature but look functional from
    # their usage, e.g.
    #
    #   time = Benchmark.realtime do
    #     foo.bar
    #   end
    #
    # Here, the return value of the block is discarded but the return value of
    # `Benchmark.realtime` is used.
    - benchmark
    - bm
    - bmbm
    - create
    - each_with_object
    - measure
    - new
    - realtime
    - tap
    - with_object
  FunctionalMethods:
    # Methods that are known to be functional in nature but look procedural from
    # their usage, e.g.
    #
    #   let(:foo) { Foo.new }
    #
    # Here, the return value of `Foo.new` is used to define a `foo` helper but
    # doesn't appear to be used from the return value of `let`.
    - let
    - let!
    - subject
    - watch
  IgnoredMethods:
    # Methods that can be either procedural or functional and cannot be
    # categorised from their usage alone, e.g.
    #
    #   foo = lambda do |x|
    #     puts "Hello, #{x}"
    #   end
    #
    #   foo = lambda do |x|
    #     x * 100
    #   end
    #
    # Here, it is impossible to tell from the return value of `lambda` whether
    # the inner block's return value is significant.
    - lambda
    - proc
    - it
  # The AllowBracesOnProceduralOneLiners option is ignored unless the
  # EnforcedStyle is set to `semantic`. If so:
  #
  # If AllowBracesOnProceduralOneLiners is unspecified, or set to any
  # falsey value, then semantic purity is maintained, so one-line
  # procedural blocks must use do-end, not braces.
  #
  #   # bad
  #   collection.each { |element| puts element }
  #
  #   # good
  #   collection.each do |element| puts element end
  #
  # If AllowBracesOnProceduralOneLiners is set to any truthy value,
  # then one-line procedural blocks may use either style.
  #
  #   # good
  #   collection.each { |element| puts element }
  #
  #   # also good
  #   collection.each do |element| puts element end
  AllowBracesOnProceduralOneLiners: false
  # The BracesRequiredMethods overrides all other configurations except
  # IgnoredMethods. It can be used to enforce that all blocks for specific
  # methods use braces. For example, you can use this to enforce Sorbet
  # signatures use braces even when the rest of your codebase enforces
  # the `line_count_based` style.
  BracesRequiredMethods: []

Style/CaseEquality:
  Description: "Avoid explicit use of the case equality operator(===)."
  StyleGuide: "#no-case-equality"
  Enabled: true
  # If `AllowOnConstant` option is enabled, the cop will ignore violations when the receiver of
  # the case equality operator is a constant.
  #
  #   # bad
  #   /string/ === "string"
  #
  #   # good
  #   String === "string"
  AllowOnConstant: false

Style/CaseLikeIf:
  Description: "This cop identifies places where `if-elsif` constructions can be replaced with `case-when`."
  StyleGuide: "#case-vs-if-else"
  Enabled: true
  Safe: false

Style/CharacterLiteral:
  Description: "Checks for uses of character literals."
  StyleGuide: "#no-character-literals"
  Enabled: true

Style/ClassAndModuleChildren:
  Description: "Checks style of children classes and modules."
  StyleGuide: "#namespace-definition"
  # Moving from compact to nested children requires knowledge of whether the
  # outer parent is a module or a class. Moving from nested to compact requires
  # verification that the outer parent is defined elsewhere. Rubocop does not
  # have the knowledge to perform either operation safely and thus requires
  # manual oversight.
  SafeAutoCorrect: false
  Enabled: true
  #
  # Basically there are two different styles:
  #
  # `nested` - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # `compact` - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # The compact style is only forced, for classes or modules with one child.
  EnforcedStyle: nested
  SupportedStyles:
    - nested
    - compact

Style/ClassCheck:
  Description: "Enforces consistent use of `Object#is_a?` or `Object#kind_of?`."
  StyleGuide: "#is-a-vs-kind-of"
  Enabled: true
  EnforcedStyle: is_a?
  SupportedStyles:
    - is_a?
    - kind_of?

Style/ClassEqualityComparison:
  Description: "Enforces the use of `Object#instance_of?` instead of class comparison for equality."
  StyleGuide: "#instance-of-vs-class-comparison"
  Enabled: true
  IgnoredMethods:
    - ==
    - equal?
    - eql?

Style/ClassMethods:
  Description: "Use self when defining module/class methods."
  StyleGuide: "#def-self-class-methods"
  Enabled: true

Style/ClassMethodsDefinitions:
  Description: "Enforces using `def self.method_name` or `class << self` to define class methods."
  StyleGuide: "#def-self-class-methods"
  Enabled: false
  EnforcedStyle: def_self
  SupportedStyles:
    - def_self
    - self_class

Style/ClassVars:
  Description: "Avoid the use of class variables."
  StyleGuide: "#no-class-vars"
  Enabled: true

Style/CollectionCompact:
  Description: "Use `{Array,Hash}#{compact,compact!}` instead of custom logic to reject nils."
  Enabled: pending
  Safe: false

# Align with the style guide.
Style/CollectionMethods:
  Description: "Preferred collection methods."
  StyleGuide: "#map-find-select-reduce-include-size"
  Enabled: false
  Safe: false
  # Mapping from undesired method to desired method
  # e.g. to use `detect` over `find`:
  #
  # Style/CollectionMethods:
  #   PreferredMethods:
  #     find: detect
  PreferredMethods:
    collect: "map"
    collect!: "map!"
    inject: "reduce"
    detect: "find"
    find_all: "select"
    member?: "include?"
  # Methods in this array accept a final symbol as an implicit block
  # eg. `inject(:+)`
  MethodsAcceptingSymbol:
    - inject
    - reduce

Style/ColonMethodCall:
  Description: "Do not use :: for method call."
  StyleGuide: "#double-colons"
  Enabled: true

Style/ColonMethodDefinition:
  Description: "Do not use :: for defining class methods."
  StyleGuide: "#colon-method-definition"
  Enabled: true

Style/CombinableLoops:
  Description: >-
    Checks for places where multiple consecutive loops over the same data
    can be combined into a single loop.
  Enabled: true
  Safe: false

Style/CommandLiteral:
  Description: "Use `` or %x around command literals."
  StyleGuide: "#percent-x"
  Enabled: true
  EnforcedStyle: backticks
  # backticks: Always use backticks.
  # percent_x: Always use `%x`.
  # mixed: Use backticks on single-line commands, and `%x` on multi-line commands.
  SupportedStyles:
    - backticks
    - percent_x
    - mixed
  # If `false`, the cop will always recommend using `%x` if one or more backticks
  # are found in the command string.
  AllowInnerBackticks: false

# Checks formatting of special comments
Style/CommentAnnotation:
  Description: >-
    Checks formatting of special comments
    (TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE).
  StyleGuide: "#annotate-keywords"
  Enabled: true
  Keywords:
    - TODO
    - FIXME
    - OPTIMIZE
    - HACK
    - REVIEW
    - NOTE
  RequireColon: true

Style/CommentedKeyword:
  Description: "Do not place comments on the same line as certain keywords."
  Enabled: true
  SafeAutoCorrect: false

Style/ConditionalAssignment:
  Description: >-
    Use the return value of `if` and `case` statements for
    assignment to a variable and variable comparison instead
    of assigning that variable inside of each branch.
  Enabled: true
  EnforcedStyle: assign_to_condition
  SupportedStyles:
    - assign_to_condition
    - assign_inside_condition
  # When configured to `assign_to_condition`, `SingleLineConditionsOnly`
  # will only register an offense when all branches of a condition are
  # a single line.
  # When configured to `assign_inside_condition`, `SingleLineConditionsOnly`
  # will only register an offense for assignment to a condition that has
  # at least one multiline branch.
  SingleLineConditionsOnly: true
  IncludeTernaryExpressions: true

Style/ConstantVisibility:
  Description: >-
    Check that class- and module constants have
    visibility declarations.
  Enabled: false
  IgnoreModules: false

# Checks that you have put a copyright in a comment before any code.
#
# You can override the default Notice in your .rubocop.yml file.
#
# In order to use autocorrect, you must supply a value for the
# `AutocorrectNotice` key that matches the regexp Notice. A blank
# `AutocorrectNotice` will cause an error during autocorrect.
#
# Autocorrect will add a copyright notice in a comment at the top
# of the file immediately after any shebang or encoding comments.
#
# Example rubocop.yml:
#
# Style/Copyright:
#   Enabled: true
#   Notice: 'Copyright (\(c\) )?2015 Yahoo! Inc'
#   AutocorrectNotice: '# Copyright (c) 2015 Yahoo! Inc.'
#
Style/Copyright:
  Description: "Include a copyright notice in each file before any code."
  Enabled: false
  Notice: '^Copyright (\(c\) )?2[0-9]{3} .+'
  AutocorrectNotice: ""

Style/DateTime:
  Description: "Use Time over DateTime."
  StyleGuide: "#date--time"
  Enabled: false
  SafeAutoCorrect: false
  AllowCoercion: false

Style/DefWithParentheses:
  Description: "Use def with parentheses when there are arguments."
  StyleGuide: "#method-parens"
  Enabled: true

Style/Dir:
  Description: >-
    Use the `__dir__` method to retrieve the canonicalized
    absolute path to the current file.
  Enabled: true

Style/DisableCopsWithinSourceCodeDirective:
  Description: >-
    Forbids disabling/enabling cops within source code.
  Enabled: false
  AllowedCops: []

Style/DocumentDynamicEvalDefinition:
  Description: >-
    When using `class_eval` (or other `eval`) with string interpolation,
    add a comment block showing its appearance if interpolated.
  StyleGuide: "#eval-comment-docs"
  Enabled: pending

Style/Documentation:
  Description: "Document classes and non-namespace modules."
  Enabled: true
  AllowedConstants: []
  Exclude:
    - "spec/**/*"
    - "test/**/*"

Style/DocumentationMethod:
  Description: "Checks for missing documentation comment for public methods."
  Enabled: false
  Exclude:
    - "spec/**/*"
    - "test/**/*"
  RequireForNonPublicMethods: false

Style/DoubleCopDisableDirective:
  Description: "Checks for double rubocop:disable comments on a single line."
  Enabled: true

Style/DoubleNegation:
  Description: "Checks for uses of double negation (!!)."
  StyleGuide: "#no-bang-bang"
  Enabled: true
  EnforcedStyle: allowed_in_returns
  SafeAutoCorrect: false
  SupportedStyles:
    - allowed_in_returns
    - forbidden

Style/EachForSimpleLoop:
  Description: >-
    Use `Integer#times` for a simple loop which iterates a fixed
    number of times.
  Enabled: true

Style/EachWithObject:
  Description: "Prefer `each_with_object` over `inject` or `reduce`."
  Enabled: true

Style/EmptyBlockParameter:
  Description: "Omit pipes for empty block parameters."
  Enabled: true

Style/EmptyCaseCondition:
  Description: "Avoid empty condition in case statements."
  Enabled: true

Style/EmptyElse:
  Description: "Avoid empty else-clauses."
  Enabled: true
  EnforcedStyle: both
  # empty - warn only on empty `else`
  # nil - warn on `else` with nil in it
  # both - warn on empty `else` and `else` with `nil` in it
  SupportedStyles:
    - empty
    - nil
    - both

Style/EmptyLambdaParameter:
  Description: "Omit parens for empty lambda parameters."
  Enabled: true

Style/EmptyLiteral:
  Description: "Prefer literals to Array.new/Hash.new/String.new."
  StyleGuide: "#literal-array-hash"
  Enabled: true

Style/EmptyMethod:
  Description: "Checks the formatting of empty method definitions."
  StyleGuide: "#no-single-line-methods"
  Enabled: true
  EnforcedStyle: compact
  SupportedStyles:
    - compact
    - expanded

Style/Encoding:
  Description: "Use UTF-8 as the source file encoding."
  StyleGuide: "#utf-8"
  Enabled: true

Style/EndBlock:
  Description: "Avoid the use of END blocks."
  StyleGuide: "#no-END-blocks"
  Enabled: true

Style/EndlessMethod:
  Description: "Avoid the use of multi-lined endless method definitions."
  StyleGuide: "#endless-methods"
  Enabled: pending
  EnforcedStyle: allow_single_line
  SupportedStyles:
    - allow_single_line
    - allow_always
    - disallow

Style/EvalWithLocation:
  Description: "Pass `__FILE__` and `__LINE__` to `eval` method, as they are used by backtraces."
  Enabled: true

Style/EvenOdd:
  Description: "Favor the use of `Integer#even?` && `Integer#odd?`."
  StyleGuide: "#predicate-methods"
  Enabled: true

Style/ExpandPathArguments:
  Description: "Use `expand_path(__dir__)` instead of `expand_path('..', __FILE__)`."
  Enabled: true

Style/ExplicitBlockArgument:
  Description: >-
    Consider using explicit block argument to avoid writing block literal
    that just passes its arguments to another block.
  StyleGuide: "#block-argument"
  Enabled: true

Style/ExponentialNotation:
  Description: "When using exponential notation, favor a mantissa between 1 (inclusive) and 10 (exclusive)."
  StyleGuide: "#exponential-notation"
  Enabled: true
  EnforcedStyle: scientific
  SupportedStyles:
    - scientific
    - engineering
    - integral

Style/FileRead:
  Description: "Favor `File.(bin)read` convenience methods."
  StyleGuide: "#file-read"
  Enabled: pending

Style/FileWrite:
  Description: "Favor `File.(bin)write` convenience methods."
  StyleGuide: "#file-write"
  Enabled: pending

Style/FloatDivision:
  Description: "For performing float division, coerce one side only."
  StyleGuide: "#float-division"
  Reference: "https://blog.rubystyle.guide/ruby/2019/06/21/float-division.html"
  Enabled: true
  Safe: false
  EnforcedStyle: single_coerce
  SupportedStyles:
    - left_coerce
    - right_coerce
    - single_coerce
    - fdiv

Style/For:
  Description: "Checks use of for or each in multiline loops."
  StyleGuide: "#no-for-loops"
  Enabled: true
  EnforcedStyle: each
  SupportedStyles:
    - each
    - for

Style/FormatString:
  Description: "Enforce the use of Kernel#sprintf, Kernel#format or String#%."
  StyleGuide: "#sprintf"
  Enabled: true
  EnforcedStyle: format
  SupportedStyles:
    - format
    - sprintf
    - percent

Style/FormatStringToken:
  Description: "Use a consistent style for format string tokens."
  Enabled: true
  EnforcedStyle: annotated
  SupportedStyles:
    # Prefer tokens which contain a sprintf like type annotation like
    # `%<name>s`, `%<age>d`, `%<score>f`
    - annotated
    # Prefer simple looking "template" style tokens like `%{name}`, `%{age}`
    - template
    - unannotated
  # `MaxUnannotatedPlaceholdersAllowed` defines the number of `unannotated`
  # style token in a format string to be allowed when enforced style is not
  # `unannotated`.
  MaxUnannotatedPlaceholdersAllowed: 1
  IgnoredMethods: []

Style/FrozenStringLiteralComment:
  Description: >-
    Add the frozen_string_literal comment to the top of files
    to help transition to frozen string literals by default.
  Enabled: true
  EnforcedStyle: always
  SupportedStyles:
    # `always` will always add the frozen string literal comment to a file
    # regardless of the Ruby version or if `freeze` or `<<` are called on a
    # string literal. It is possible that this will create errors.
    - always
    # `always_true` will add the frozen string literal comment to a file,
    # similarly to the `always` style, but will also change any disabled
    # comments (e.g. `# frozen_string_literal: false`) to be enabled.
    - always_true
    # `never` will enforce that the frozen string literal comment does not
    # exist in a file.
    - never
  SafeAutoCorrect: false

Style/GlobalStdStream:
  Description: "Enforces the use of `$stdout/$stderr/$stdin` instead of `STDOUT/STDERR/STDIN`."
  StyleGuide: "#global-stdout"
  Enabled: true
  SafeAutoCorrect: false

Style/GlobalVars:
  Description: "Do not introduce global variables."
  StyleGuide: "#instance-vars"
  Reference: "https://www.zenspider.com/ruby/quickref.html"
  Enabled: true
  # Built-in global variables are allowed by default.
  AllowedVariables: []

Style/GuardClause:
  Description: "Check for conditionals that can be replaced with guard clauses."
  StyleGuide: "#no-nested-conditionals"
  Enabled: true
  # `MinBodyLength` defines the number of lines of the a body of an `if` or `unless`
  # needs to have to trigger this cop
  MinBodyLength: 1

Style/HashAsLastArrayItem:
  Description: >-
    Checks for presence or absence of braces around hash literal as a last
    array item depending on configuration.
  StyleGuide: "#hash-literal-as-last-array-item"
  Enabled: true
  EnforcedStyle: braces
  SupportedStyles:
    - braces
    - no_braces

Style/HashConversion:
  Description: "Avoid Hash[] in favor of ary.to_h or literal hashes."
  StyleGuide: "#avoid-hash-constructor"
  Enabled: pending
  AllowSplatArgument: true

Style/HashEachMethods:
  Description: "Use Hash#each_key and Hash#each_value."
  StyleGuide: "#hash-each"
  Enabled: true
  Safe: false
  AllowedReceivers: []

Style/HashExcept:
  Description: >-
    Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods
    that can be replaced with `Hash#except` method.
  Enabled: pending

Style/HashLikeCase:
  Description: >-
    Checks for places where `case-when` represents a simple 1:1
    mapping and can be replaced with a hash lookup.
  Enabled: true
  # `MinBranchesCount` defines the number of branches `case` needs to have
  # to trigger this cop
  MinBranchesCount: 3

Style/HashSyntax:
  Description: >-
    Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax
    { :a => 1, :b => 2 }.
  StyleGuide: "#hash-literals"
  Enabled: true
  EnforcedStyle: ruby19
  SupportedStyles:
    # checks for 1.9 syntax (e.g. {a: 1}) for all symbol keys
    - ruby19
    # checks for hash rocket syntax for all hashes
    - hash_rockets
    # forbids mixed key syntaxes (e.g. {a: 1, :b => 2})
    - no_mixed_keys
    # enforces both ruby19 and no_mixed_keys styles
    - ruby19_no_mixed_keys
  # Force hashes that have a hash value omission
  EnforcedShorthandSyntax: always
  SupportedShorthandSyntax:
    # forces use of the 3.1 syntax (e.g. {foo:}) when the hash key and value are the same.
    - always
    # forces use of explicit hash literal value.
    - never
    # accepts both shorthand and explicit use of hash literal value.
    - either
  # Force hashes that have a symbol value to use hash rockets
  UseHashRocketsWithSymbolValues: false
  # Do not suggest { a?: 1 } over { :a? => 1 } in ruby19 style
  PreferHashRocketsForNonAlnumEndingSymbols: false

Style/HashTransformKeys:
  Description: "Prefer `transform_keys` over `each_with_object`, `map`, or `to_h`."
  Enabled: true
  Safe: false

Style/HashTransformValues:
  Description: "Prefer `transform_values` over `each_with_object`, `map`, or `to_h`."
  Enabled: true
  Safe: false

Style/IdenticalConditionalBranches:
  Description: >-
    Checks that conditional statements do not have an identical
    line at the end of each branch, which can validly be moved
    out of the conditional.
  Enabled: true
  SafeAutoCorrect: false

Style/IfInsideElse:
  Description: "Finds if nodes inside else, which can be converted to elsif."
  Enabled: true
  AllowIfModifier: false

Style/IfUnlessModifier:
  Description: >-
    Favor modifier if/unless usage when you have a
    single-line body.
  StyleGuide: "#if-as-a-modifier"
  Enabled: true

Style/IfUnlessModifierOfIfUnless:
  Description: >-
    Avoid modifier if/unless usage on conditionals.
  Enabled: true

Style/IfWithBooleanLiteralBranches:
  Description: "Checks for redundant `if` with boolean literal branches."
  Enabled: pending
  SafeAutoCorrect: false
  AllowedMethods:
    - nonzero?

Style/IfWithSemicolon:
  Description: "Do not use if x; .... Use the ternary operator instead."
  StyleGuide: "#no-semicolon-ifs"
  Enabled: true

Style/ImplicitRuntimeError:
  Description: >-
    Use `raise` or `fail` with an explicit exception class and
    message, rather than just a message.
  Enabled: false

Style/InPatternThen:
  Description: "Checks for `in;` uses in `case` expressions."
  StyleGuide: "#no-in-pattern-semicolons"
  Enabled: pending

Style/InfiniteLoop:
  Description: >-
    Use Kernel#loop for infinite loops.
    This cop is unsafe if the body may raise a `StopIteration` exception.
  Safe: false
  StyleGuide: "#infinite-loop"
  Enabled: true

Style/InlineComment:
  Description: "Avoid trailing inline comments."
  Enabled: false

Style/InverseMethods:
  Description: >-
    Use the inverse method instead of `!.method`
    if an inverse method is defined.
  Enabled: true
  Safe: false
  # `InverseMethods` are methods that can be inverted by a not (`not` or `!`)
  # The relationship of inverse methods only needs to be defined in one direction.
  # Keys and values both need to be defined as symbols.
  InverseMethods:
    :any?: :none?
    :even?: :odd?
    :==: :!=
    :=~: :!~
    :<: :>=
    :>: :<=
    # `ActiveSupport` defines some common inverse methods. They are listed below,
    # and not enabled by default.
    #:present?: :blank?,
    #:include?: :exclude?
  # `InverseBlocks` are methods that are inverted by inverting the return
  # of the block that is passed to the method
  InverseBlocks:
    :select: :reject
    :select!: :reject!

Style/IpAddresses:
  Description: "Don't include literal IP addresses in code."
  Enabled: false
  # Allow addresses to be permitted
  AllowedAddresses:
    - "::"
    # :: is a valid IPv6 address, but could potentially be legitimately in code
  Exclude:
    - "**/*.gemfile"
    - "**/Gemfile"
    - "**/gems.rb"
    - "**/*.gemspec"

Style/KeywordParametersOrder:
  Description: "Enforces that optional keyword parameters are placed at the end of the parameters list."
  StyleGuide: "#keyword-parameters-order"
  Enabled: true

Style/Lambda:
  Description: "Use the new lambda literal syntax for single-line blocks."
  StyleGuide: "#lambda-multi-line"
  Enabled: true
  EnforcedStyle: line_count_dependent
  SupportedStyles:
    - line_count_dependent
    - lambda
    - literal

Style/LambdaCall:
  Description: "Use lambda.call(...) instead of lambda.(...)."
  StyleGuide: "#proc-call"
  Enabled: true
  EnforcedStyle: call
  SupportedStyles:
    - call
    - braces

Style/LineEndConcatenation:
  Description: >-
    Use \ instead of + or << to concatenate two string literals at
    line end.
  Enabled: true
  SafeAutoCorrect: false

Style/MapToHash:
  Description: "Prefer `to_h` with a block over `map.to_h`."
  Enabled: pending
  Safe: false

Style/MethodCallWithArgsParentheses:
  Description: "Use parentheses for method calls with arguments."
  StyleGuide: "#method-invocation-parens"
  Enabled: false
  IgnoreMacros: true
  IgnoredMethods: []
  IgnoredPatterns: []
  IncludedMacros: []
  AllowParenthesesInMultilineCall: false
  AllowParenthesesInChaining: false
  AllowParenthesesInCamelCaseMethod: false
  AllowParenthesesInStringInterpolation: false
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - omit_parentheses

Style/MethodCallWithoutArgsParentheses:
  Description: "Do not use parentheses for method calls with no arguments."
  StyleGuide: "#method-invocation-parens"
  Enabled: true
  IgnoredMethods: []

Style/MethodCalledOnDoEndBlock:
  Description: "Avoid chaining a method call on a do...end block."
  StyleGuide: "#single-line-blocks"
  Enabled: false

Style/MethodDefParentheses:
  Description: >-
    Checks if the method definitions have or don't have
    parentheses.
  StyleGuide: "#method-parens"
  Enabled: true
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - require_no_parentheses
    - require_no_parentheses_except_multiline

Style/MinMax:
  Description: >-
    Use `Enumerable#minmax` instead of `Enumerable#min`
    and `Enumerable#max` in conjunction.
  Enabled: true

Style/MissingElse:
  Description: >-
    Require if/case expressions to have an else branches.
    If enabled, it is recommended that
    Style/UnlessElse and Style/EmptyElse be enabled.
    This will conflict with Style/EmptyElse if
    Style/EmptyElse is configured to style "both".
  Enabled: false
  EnforcedStyle: both
  SupportedStyles:
    # if - warn when an if expression is missing an else branch
    # case - warn when a case expression is missing an else branch
    # both - warn when an if or case expression is missing an else branch
    - if
    - case
    - both

Style/MissingRespondToMissing:
  Description: >-
    Checks if `method_missing` is implemented
    without implementing `respond_to_missing`.
  StyleGuide: "#no-method-missing"
  Enabled: true

Style/MixinGrouping:
  Description: "Checks for grouping of mixins in `class` and `module` bodies."
  StyleGuide: "#mixin-grouping"
  Enabled: true
  EnforcedStyle: separated
  SupportedStyles:
    # separated: each mixed in module goes in a separate statement.
    # grouped: mixed in modules are grouped into a single statement.
    - separated
    - grouped

Style/MixinUsage:
  Description: "Checks that `include`, `extend` and `prepend` exists at the top level."
  Enabled: true

Style/ModuleFunction:
  Description: "Checks for usage of `extend self` in modules."
  StyleGuide: "#module-function"
  Enabled: true
  EnforcedStyle: module_function
  SupportedStyles:
    - module_function
    - extend_self
    - forbidden
  Autocorrect: false
  SafeAutoCorrect: false

Style/MultilineBlockChain:
  Description: "Avoid multi-line chains of blocks."
  StyleGuide: "#single-line-blocks"
  Enabled: true

Style/MultilineIfModifier:
  Description: "Only use if/unless modifiers on single line statements."
  StyleGuide: "#no-multiline-if-modifiers"
  Enabled: true

Style/MultilineIfThen:
  Description: "Do not use then for multi-line if/unless."
  StyleGuide: "#no-then"
  Enabled: true

Style/MultilineInPatternThen:
  Description: "Do not use `then` for multi-line `in` statement."
  StyleGuide: "#no-then"
  Enabled: pending

Style/MultilineMemoization:
  Description: "Wrap multiline memoizations in a `begin` and `end` block."
  Enabled: true
  EnforcedStyle: keyword
  SupportedStyles:
    - keyword
    - braces

Style/MultilineMethodSignature:
  Description: "Avoid multi-line method signatures."
  Enabled: false

Style/MultilineTernaryOperator:
  Description: >-
    Avoid multi-line ?: (the ternary operator);
    use if/unless instead.
  StyleGuide: "#no-multiline-ternary"
  Enabled: true

Style/MultilineWhenThen:
  Description: "Do not use then for multi-line when statement."
  StyleGuide: "#no-then"
  Enabled: true

Style/MultipleComparison:
  Description: >-
    Avoid comparing a variable with multiple items in a conditional,
    use Array#include? instead.
  Enabled: true
  AllowMethodComparison: true

Style/MutableConstant:
  Description: "Do not assign mutable objects to constants."
  Enabled: true
  SafeAutoCorrect: false
  EnforcedStyle: literals
  SupportedStyles:
    # literals: freeze literals assigned to constants
    # strict: freeze all constants
    # Strict mode is considered an experimental feature. It has not been updated
    # with an exhaustive list of all methods that will produce frozen objects so
    # there is a decent chance of getting some false positives. Luckily, there is
    # no harm in freezing an already frozen object.
    - literals
    - strict

Style/NegatedIf:
  Description: >-
    Favor unless over if for negative conditions
    (or control flow or).
  StyleGuide: "#unless-for-negatives"
  Enabled: true
  EnforcedStyle: both
  SupportedStyles:
    # both: prefix and postfix negated `if` should both use `unless`
    # prefix: only use `unless` for negated `if` statements positioned before the body of the statement
    # postfix: only use `unless` for negated `if` statements positioned after the body of the statement
    - both
    - prefix
    - postfix

Style/NegatedIfElseCondition:
  Description: >-
    This cop checks for uses of `if-else` and ternary operators with a negated condition
    which can be simplified by inverting condition and swapping branches.
  Enabled: pending

Style/NegatedUnless:
  Description: "Favor if over unless for negative conditions."
  StyleGuide: "#if-for-negatives"
  Enabled: true
  EnforcedStyle: both
  SupportedStyles:
    # both: prefix and postfix negated `unless` should both use `if`
    # prefix: only use `if` for negated `unless` statements positioned before the body of the statement
    # postfix: only use `if` for negated `unless` statements positioned after the body of the statement
    - both
    - prefix
    - postfix

Style/NegatedWhile:
  Description: "Favor until over while for negative conditions."
  StyleGuide: "#until-for-negatives"
  Enabled: true

Style/NestedModifier:
  Description: "Avoid using nested modifiers."
  StyleGuide: "#no-nested-modifiers"
  Enabled: true

Style/NestedParenthesizedCalls:
  Description: >-
    Parenthesize method calls which are nested inside the
    argument list of another parenthesized method call.
  Enabled: true
  AllowedMethods:
    - be
    - be_a
    - be_an
    - be_between
    - be_falsey
    - be_kind_of
    - be_instance_of
    - be_truthy
    - be_within
    - eq
    - eql
    - end_with
    - include
    - match
    - raise_error
    - respond_to
    - start_with

Style/NestedTernaryOperator:
  Description: "Use one expression per branch in a ternary operator."
  StyleGuide: "#no-nested-ternary"
  Enabled: true

Style/Next:
  Description: "Use `next` to skip iteration instead of a condition at the end."
  StyleGuide: "#no-nested-conditionals"
  Enabled: true
  # With `always` all conditions at the end of an iteration needs to be
  # replaced by next - with `skip_modifier_ifs` the modifier if like this one
  # are ignored: [1, 2].each { |a| return 'yes' if a == 1 }
  EnforcedStyle: skip_modifier_ifs
  # `MinBodyLength` defines the number of lines of the a body of an `if` or `unless`
  # needs to have to trigger this cop
  MinBodyLength: 3
  SupportedStyles:
    - skip_modifier_ifs
    - always

Style/NilComparison:
  Description: "Prefer x.nil? to x == nil."
  StyleGuide: "#predicate-methods"
  Enabled: true
  EnforcedStyle: predicate
  SupportedStyles:
    - predicate
    - comparison

Style/NilLambda:
  Description: "Prefer `-> {}` to `-> { nil }`."
  Enabled: pending

Style/NonNilCheck:
  Description: "Checks for redundant nil checks."
  StyleGuide: "#no-non-nil-checks"
  Enabled: true
  # With `IncludeSemanticChanges` set to `true`, this cop reports offenses for
  # `!x.nil?` and autocorrects that and `x != nil` to solely `x`, which is
  # **usually** OK, but might change behavior.
  #
  # With `IncludeSemanticChanges` set to `false`, this cop does not report
  # offenses for `!x.nil?` and does no changes that might change behavior.
  IncludeSemanticChanges: false

Style/Not:
  Description: "Use ! instead of not."
  StyleGuide: "#bang-not-not"
  Enabled: true

Style/NumberedParameters:
  Description: "Restrict the usage of numbered parameters."
  Enabled: pending
  EnforcedStyle: allow_single_line
  SupportedStyles:
    - allow_single_line
    - disallow

Style/NumberedParametersLimit:
  Description: "Avoid excessive numbered params in a single block."
  Enabled: pending
  Max: 1

Style/NumericLiteralPrefix:
  Description: "Use smallcase prefixes for numeric literals."
  StyleGuide: "#numeric-literal-prefixes"
  Enabled: true
  EnforcedOctalStyle: zero_with_o
  SupportedOctalStyles:
    - zero_with_o
    - zero_only

Style/NumericLiterals:
  Description: >-
    Add underscores to large numeric literals to improve their
    readability.
  StyleGuide: "#underscores-in-numerics"
  Enabled: true
  MinDigits: 5
  Strict: false
  # You can specify allowed numbers. (e.g. port number 3000, 8080, and etc)
  AllowedNumbers: []

Style/NumericPredicate:
  Description: >-
    Checks for the use of predicate- or comparison methods for
    numeric comparisons.
  StyleGuide: "#predicate-methods"
  Safe: false
  # This will change to a new method call which isn't guaranteed to be on the
  # object. Switching these methods has to be done with knowledge of the types
  # of the variables which rubocop doesn't have.
  SafeAutoCorrect: false
  Enabled: true
  EnforcedStyle: predicate
  SupportedStyles:
    - predicate
    - comparison
  IgnoredMethods: []
  # Exclude RSpec specs because assertions like `expect(1).to be > 0` cause
  # false positives.
  Exclude:
    - "spec/**/*"

Style/OneLineConditional:
  Description: >-
    Favor the ternary operator (?:) or multi-line constructs over
    single-line if/then/else/end constructs.
  StyleGuide: "#ternary-operator"
  Enabled: true
  AlwaysCorrectToMultiline: false

Style/OpenStructUse:
  Description: >-
    Avoid using OpenStruct. As of Ruby 3.0, use is officially discouraged due to performance,
    version compatibility, and potential security issues.
  Reference:
    - https://docs.ruby-lang.org/en/3.0.0/OpenStruct.html#class-OpenStruct-label-Caveats

  Enabled: pending

Style/OptionHash:
  Description: "Don't use option hashes when you can use keyword arguments."
  Enabled: false
  # A list of parameter names that will be flagged by this cop.
  SuspiciousParamNames:
    - options
    - opts
    - args
    - params
    - parameters
  Allowlist: []

Style/OptionalArguments:
  Description: >-
    Checks for optional arguments that do not appear at the end
    of the argument list.
  StyleGuide: "#optional-arguments"
  Enabled: true
  Safe: false

Style/OptionalBooleanParameter:
  Description: "Use keyword arguments when defining method with boolean argument."
  StyleGuide: "#boolean-keyword-arguments"
  Enabled: true
  Safe: false
  AllowedMethods:
    - respond_to_missing?

Style/OrAssignment:
  Description: "Recommend usage of double pipe equals (||=) where applicable."
  StyleGuide: "#double-pipe-for-uninit"
  Enabled: true

Style/ParallelAssignment:
  Description: >-
    Check for simple usages of parallel assignment.
    It will only warn when the number of variables
    matches on both sides of the assignment.
  StyleGuide: "#parallel-assignment"
  Enabled: true

Style/ParenthesesAroundCondition:
  Description: >-
    Don't use parentheses around the condition of an
    if/unless/while.
  StyleGuide: "#no-parens-around-condition"
  Enabled: true
  AllowSafeAssignment: true
  AllowInMultilineConditions: false

Style/PercentLiteralDelimiters:
  Description: "Use `%`-literal delimiters consistently."
  StyleGuide: "#percent-literal-braces"
  Enabled: true
  # Specify the default preferred delimiter for all types with the 'default' key
  # Override individual delimiters (even with default specified) by specifying
  # an individual key
  PreferredDelimiters:
    default: ()
    "%i": "[]"
    "%I": "[]"
    "%r": "{}"
    "%w": "[]"
    "%W": "[]"

Style/PercentQLiterals:
  Description: "Checks if uses of %Q/%q match the configured preference."
  Enabled: true
  EnforcedStyle: lower_case_q
  SupportedStyles:
    - lower_case_q # Use `%q` when possible, `%Q` when necessary
    - upper_case_q # Always use `%Q`

Style/PerlBackrefs:
  Description: "Avoid Perl-style regex back references."
  StyleGuide: "#no-perl-regexp-last-matchers"
  Enabled: true

Style/PreferredHashMethods:
  Description: "Checks use of `has_key?` and `has_value?` Hash methods."
  StyleGuide: "#hash-key"
  Enabled: true
  Safe: false
  EnforcedStyle: short
  SupportedStyles:
    - short
    - verbose

Style/Proc:
  Description: "Use proc instead of Proc.new."
  StyleGuide: "#proc"
  Enabled: true

Style/QuotedSymbols:
  Description: "Use a consistent style for quoted symbols."
  Enabled: pending
  EnforcedStyle: same_as_string_literals
  SupportedStyles:
    - same_as_string_literals
    - single_quotes
    - double_quotes

Style/RaiseArgs:
  Description: "Checks the arguments passed to raise/fail."
  StyleGuide: "#exception-class-messages"
  Enabled: true
  EnforcedStyle: exploded
  SupportedStyles:
    - compact # raise Exception.new(msg)
    - exploded # raise Exception, msg
  AllowedCompactTypes: []

Style/RandomWithOffset:
  Description: >-
    Prefer to use ranges when generating random numbers instead of
    integers with offsets.
  StyleGuide: "#random-numbers"
  Enabled: true

Style/RedundantArgument:
  Description: "Check for a redundant argument passed to certain methods."
  Enabled: pending
  Safe: false
  Methods:
    # Array#join
    join: ""
    # String#split
    split: " "
    # String#chomp
    chomp: "\n"
    # String#chomp!
    chomp!: "\n"

Style/RedundantAssignment:
  Description: "Checks for redundant assignment before returning."
  Enabled: true

Style/RedundantBegin:
  Description: "Don't use begin blocks when they are not needed."
  StyleGuide: "#begin-implicit"
  Enabled: true

Style/RedundantCapitalW:
  Description: "Checks for %W when interpolation is not needed."
  Enabled: true

Style/RedundantCondition:
  Description: "Checks for unnecessary conditional expressions."
  Enabled: true

Style/RedundantConditional:
  Description: "Don't return true/false from a conditional."
  Enabled: true

Style/RedundantException:
  Description: "Checks for an obsolete RuntimeException argument in raise/fail."
  StyleGuide: "#no-explicit-runtimeerror"
  Enabled: true

Style/RedundantFetchBlock:
  Description: >-
    Use `fetch(key, value)` instead of `fetch(key) { value }`
    when value has Numeric, Rational, Complex, Symbol or String type, `false`, `true`, `nil` or is a constant.
  Reference: "https://github.com/JuanitoFatas/fast-ruby#hashfetch-with-argument-vs-hashfetch--block-code"
  Enabled: true
  Safe: false
  # If enabled, this cop will autocorrect usages of
  # `fetch` being called with block returning a constant.
  # This can be dangerous since constants will not be defined at that moment.
  SafeForConstants: false

Style/RedundantFileExtensionInRequire:
  Description: >-
    Checks for the presence of superfluous `.rb` extension in
    the filename provided to `require` and `require_relative`.
  StyleGuide: "#no-explicit-rb-to-require"
  Enabled: true

Style/RedundantFreeze:
  Description: "Checks usages of Object#freeze on immutable objects."
  Enabled: true

Style/RedundantInterpolation:
  Description: "Checks for strings that are just an interpolated expression."
  Enabled: true

Style/RedundantParentheses:
  Description: "Checks for parentheses that seem not to serve any purpose."
  Enabled: true

# CHANGED
Style/RedundantPercentQ:
  Description: "Checks for %q/%Q when single quotes or double quotes would do."
  StyleGuide: "#percent-q"
  Enabled: false

Style/RedundantRegexpCharacterClass:
  Description: "Checks for unnecessary single-element Regexp character classes."
  Enabled: true

Style/RedundantRegexpEscape:
  Description: "Checks for redundant escapes in Regexps."
  Enabled: true

Style/RedundantReturn:
  Description: "Don't use return where it's not required."
  StyleGuide: "#no-explicit-return"
  Enabled: true
  # When `true` allows code like `return x, y`.
  AllowMultipleReturnValues: false

Style/RedundantSelf:
  Description: "Don't use self where it's not needed."
  StyleGuide: "#no-self-unless-required"
  Enabled: true

Style/RedundantSelfAssignment:
  Description: "Checks for places where redundant assignments are made for in place modification methods."
  Enabled: true
  Safe: false

Style/RedundantSelfAssignmentBranch:
  Description: "Checks for places where conditional branch makes redundant self-assignment."
  Enabled: pending

Style/RedundantSort:
  Description: >-
    Use `min` instead of `sort.first`,
    `max_by` instead of `sort_by...last`, etc.
  Enabled: true
  Safe: false

Style/RedundantSortBy:
  Description: "Use `sort` instead of `sort_by { |x| x }`."
  Enabled: true

Style/RegexpLiteral:
  Description: "Use / or %r around regular expressions."
  StyleGuide: "#percent-r"
  Enabled: true
  EnforcedStyle: slashes
  # slashes: Always use slashes.
  # percent_r: Always use `%r`.
  # mixed: Use slashes on single-line regexes, and `%r` on multi-line regexes.
  SupportedStyles:
    - slashes
    - percent_r
    - mixed
  # If `false`, the cop will always recommend using `%r` if one or more slashes
  # are found in the regexp string.
  AllowInnerSlashes: false

Style/RescueModifier:
  Description: "Avoid using rescue in its modifier form."
  StyleGuide: "#no-rescue-modifiers"
  Enabled: true

Style/RescueStandardError:
  Description: "Avoid rescuing without specifying an error class."
  Enabled: true
  EnforcedStyle: explicit
  # implicit: Do not include the error class, `rescue`
  # explicit: Require an error class `rescue StandardError`
  SupportedStyles:
    - implicit
    - explicit

Style/ReturnNil:
  Description: "Use return instead of return nil."
  Enabled: false
  EnforcedStyle: return
  SupportedStyles:
    - return
    - return_nil

Style/SafeNavigation:
  Description: >-
    This cop transforms usages of a method call safeguarded by
    a check for the existence of the object to
    safe navigation (`&.`).
    Auto-correction is unsafe as it assumes the object will
    be `nil` or truthy, but never `false`.
  Enabled: true
  # Safe navigation may cause a statement to start returning `nil` in addition
  # to whatever it used to return.
  ConvertCodeThatCanStartToReturnNil: false
  AllowedMethods:
    - present?
    - blank?
    - presence
    - try
    - try!
  SafeAutoCorrect: false

Style/Sample:
  Description: >-
    Use `sample` instead of `shuffle.first`,
    `shuffle.last`, and `shuffle[Integer]`.
  Reference: "https://github.com/JuanitoFatas/fast-ruby#arrayshufflefirst-vs-arraysample-code"
  Enabled: true

Style/SelectByRegexp:
  Description: "Prefer grep/grep_v to select/reject with a regexp match."
  Enabled: pending
  SafeAutoCorrect: false

Style/SelfAssignment:
  Description: >-
    Checks for places where self-assignment shorthand should have
    been used.
  StyleGuide: "#self-assignment"
  Enabled: true

Style/Semicolon:
  Description: "Don't use semicolons to terminate expressions."
  StyleGuide: "#no-semicolon"
  Enabled: true
  # Allow `;` to separate several expressions on the same line.
  AllowAsExpressionSeparator: false

Style/Send:
  Description: "Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods."
  StyleGuide: "#prefer-public-send"
  Enabled: false

Style/SignalException:
  Description: "Checks for proper usage of fail and raise."
  StyleGuide: "#prefer-raise-over-fail"
  Enabled: true
  EnforcedStyle: only_raise
  SupportedStyles:
    - only_raise
    - only_fail
    - semantic

Style/SingleArgumentDig:
  Description: "Avoid using single argument dig method."
  Enabled: true
  Safe: false

Style/SingleLineBlockParams:
  Description: "Enforces the names of some block params."
  Enabled: false
  Methods:
    - reduce:
        - acc
        - elem
    - inject:
        - acc
        - elem

Style/SingleLineMethods:
  Description: "Avoid single-line methods."
  StyleGuide: "#no-single-line-methods"
  Enabled: true
  AllowIfMethodIsEmpty: true

Style/SlicingWithRange:
  Description: "Checks array slicing is done with endless ranges when suitable."
  Enabled: true
  Safe: false

Style/SoleNestedConditional:
  Description: >-
    Finds sole nested conditional nodes
    which can be merged into outer conditional node.
  Enabled: true
  AllowModifier: false

Style/SpecialGlobalVars:
  Description: "Avoid Perl-style global variables."
  StyleGuide: "#no-cryptic-perlisms"
  Enabled: true
  SafeAutoCorrect: false
  RequireEnglish: true
  EnforcedStyle: use_english_names
  SupportedStyles:
    - use_perl_names
    - use_english_names

Style/StabbyLambdaParentheses:
  Description: "Check for the usage of parentheses around stabby lambda arguments."
  StyleGuide: "#stabby-lambda-with-args"
  Enabled: true
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - require_no_parentheses

Style/StaticClass:
  Description: "Prefer modules to classes with only class methods."
  StyleGuide: "#modules-vs-classes"
  Enabled: false
  Safe: false

Style/StderrPuts:
  Description: "Use `warn` instead of `$stderr.puts`."
  StyleGuide: "#warn"
  Enabled: true

Style/StringChars:
  Description: "Checks for uses of `String#split` with empty string or regexp literal argument."
  StyleGuide: "#string-chars"
  Enabled: pending
  Safe: false

Style/StringConcatenation:
  Description: "Checks for places where string concatenation can be replaced with string interpolation."
  StyleGuide: "#string-interpolation"
  Enabled: true
  Safe: false
  Mode: aggressive

Style/StringHashKeys:
  Description: "Prefer symbols instead of strings as hash keys."
  StyleGuide: "#symbols-as-keys"
  Enabled: false
  Safe: false

Style/StringLiterals:
  Description: "Checks if uses of quotes match the configured preference."
  StyleGuide: "#consistent-string-literals"
  Enabled: true
  EnforcedStyle: single_quotes
  SupportedStyles:
    - single_quotes
    - double_quotes
  # If `true`, strings which span multiple lines using `\` for continuation must
  # use the same type of quotes on each line.
  ConsistentQuotesInMultiline: false

Style/StringLiteralsInInterpolation:
  Description: >-
    Checks if uses of quotes inside expressions in interpolated
    strings match the configured preference.
  Enabled: true
  EnforcedStyle: single_quotes
  SupportedStyles:
    - single_quotes
    - double_quotes

Style/StringMethods:
  Description: "Checks if configured preferred methods are used over non-preferred."
  Enabled: false
  # Mapping from undesired method to desired_method
  # e.g. to use `to_sym` over `intern`:
  #
  # StringMethods:
  #   PreferredMethods:
  #     intern: to_sym
  PreferredMethods:
    intern: to_sym

Style/Strip:
  Description: "Use `strip` instead of `lstrip.rstrip`."
  Enabled: true

Style/StructInheritance:
  Description: "Checks for inheritance from Struct.new."
  StyleGuide: "#no-extend-struct-new"
  Enabled: true
  SafeAutoCorrect: false

Style/SwapValues:
  Description: "This cop enforces the use of shorthand-style swapping of 2 variables."
  StyleGuide: "#values-swapping"
  Enabled: pending
  SafeAutoCorrect: false

Style/SymbolArray:
  Description: "Use %i or %I for arrays of symbols."
  StyleGuide: "#percent-i"
  Enabled: true
  EnforcedStyle: percent
  MinSize: 2
  SupportedStyles:
    - percent
    - brackets

Style/SymbolLiteral:
  Description: "Use plain symbols instead of string symbols when possible."
  Enabled: true

Style/SymbolProc:
  Description: "Use symbols as procs instead of blocks when possible."
  Enabled: true
  Safe: false
  AllowMethodsWithArguments: false
  # A list of method names to be ignored by the check.
  # The names should be fairly unique, otherwise you'll end up ignoring lots of code.
  IgnoredMethods:
    - respond_to
    - define_method

Style/TernaryParentheses:
  Description: "Checks for use of parentheses around ternary conditions."
  Enabled: true
  EnforcedStyle: require_no_parentheses
  SupportedStyles:
    - require_parentheses
    - require_no_parentheses
    - require_parentheses_when_complex
  AllowSafeAssignment: true

Style/TopLevelMethodDefinition:
  Description: "This cop looks for top-level method definitions."
  StyleGuide: "#top-level-methods"
  Enabled: false

Style/TrailingBodyOnClass:
  Description: "Class body goes below class statement."
  Enabled: true

Style/TrailingBodyOnMethodDefinition:
  Description: "Method body goes below definition."
  Enabled: true

Style/TrailingBodyOnModule:
  Description: "Module body goes below module statement."
  Enabled: true

Style/TrailingCommaInArguments:
  Description: "Checks for trailing comma in argument lists."
  StyleGuide: "#no-trailing-params-comma"
  Enabled: true
  # If `comma`, the cop requires a comma after the last argument, but only for
  # parenthesized method calls where each argument is on its own line.
  # If `consistent_comma`, the cop requires a comma after the last argument,
  # for all parenthesized method calls with arguments.
  EnforcedStyleForMultiline: no_comma
  SupportedStylesForMultiline:
    - comma
    - consistent_comma
    - no_comma

Style/TrailingCommaInArrayLiteral:
  Description: "Checks for trailing comma in array literals."
  StyleGuide: "#no-trailing-array-commas"
  Enabled: true
  # If `comma`, the cop requires a comma after the last item in an array,
  # but only when each item is on its own line.
  # If `consistent_comma`, the cop requires a comma after the last item of all
  # non-empty, multiline array literals.
  EnforcedStyleForMultiline: no_comma
  SupportedStylesForMultiline:
    - comma
    - consistent_comma
    - no_comma

Style/TrailingCommaInBlockArgs:
  Description: "Checks for useless trailing commas in block arguments."
  Enabled: false
  Safe: false

Style/TrailingCommaInHashLiteral:
  Description: "Checks for trailing comma in hash literals."
  Enabled: true
  # If `comma`, the cop requires a comma after the last item in a hash,
  # but only when each item is on its own line.
  # If `consistent_comma`, the cop requires a comma after the last item of all
  # non-empty, multiline hash literals.
  EnforcedStyleForMultiline: no_comma
  SupportedStylesForMultiline:
    - comma
    - consistent_comma
    - no_comma

Style/TrailingMethodEndStatement:
  Description: "Checks for trailing end statement on line of method body."
  Enabled: true

Style/TrailingUnderscoreVariable:
  Description: >-
    Checks for the usage of unneeded trailing underscores at the
    end of parallel variable assignment.
  AllowNamedUnderscoreVariables: true
  Enabled: true

# `TrivialAccessors` requires exact name matches and doesn't allow
# predicated methods by default.
Style/TrivialAccessors:
  Description: "Prefer attr_* methods to trivial readers/writers."
  StyleGuide: "#attr_family"
  Enabled: true
  # When set to `false` the cop will suggest the use of accessor methods
  # in situations like:
  #
  # def name
  #   @other_name
  # end
  #
  # This way you can uncover "hidden" attributes in your code.
  ExactNameMatch: true
  AllowPredicates: true
  # Allows trivial writers that don't end in an equal sign. e.g.
  #
  # def on_exception(action)
  #   @on_exception=action
  # end
  # on_exception :restart
  #
  # Commonly used in DSLs
  AllowDSLWriters: true
  IgnoreClassMethods: false
  AllowedMethods:
    - to_ary
    - to_a
    - to_c
    - to_enum
    - to_h
    - to_hash
    - to_i
    - to_int
    - to_io
    - to_open
    - to_path
    - to_proc
    - to_r
    - to_regexp
    - to_str
    - to_s
    - to_sym

Style/UnlessElse:
  Description: >-
    Do not use unless with else. Rewrite these with the positive
    case first.
  StyleGuide: "#no-else-with-unless"
  Enabled: true

Style/UnlessLogicalOperators:
  Description: >-
    Checks for use of logical operators in an unless condition.
  Enabled: false
  EnforcedStyle: forbid_mixed_logical_operators
  SupportedStyles:
    - forbid_mixed_logical_operators
    - forbid_logical_operators

Style/UnpackFirst:
  Description: >-
    Checks for accessing the first element of `String#unpack`
    instead of using `unpack1`.
  Enabled: true

Style/VariableInterpolation:
  Description: >-
    Don't interpolate global, instance and class variables
    directly in strings.
  StyleGuide: "#curlies-interpolate"
  Enabled: true

Style/WhenThen:
  Description: "Use when x then ... for one-line cases."
  StyleGuide: "#no-when-semicolons"
  Enabled: true

Style/WhileUntilDo:
  Description: "Checks for redundant do after while or until."
  StyleGuide: "#no-multiline-while-do"
  Enabled: true

Style/WhileUntilModifier:
  Description: >-
    Favor modifier while/until usage when you have a
    single-line body.
  StyleGuide: "#while-as-a-modifier"
  Enabled: true

Style/WordArray:
  Description: "Use %w or %W for arrays of words."
  StyleGuide: "#percent-w"
  Enabled: true
  EnforcedStyle: percent
  SupportedStyles:
    # percent style: %w(word1 word2)
    - percent
    # bracket style: ['word1', 'word2']
    - brackets
  # The `MinSize` option causes the `WordArray` rule to be ignored for arrays
  # smaller than a certain size. The rule is only applied to arrays
  # whose element count is greater than or equal to `MinSize`.
  MinSize: 2
  # The regular expression `WordRegex` decides what is considered a word.
  WordRegex: !ruby/regexp '/\A(?:\p{Word}|\p{Word}-\p{Word}|\n|\t)+\z/'

Style/YodaCondition:
  Description: "Forbid or enforce yoda conditions."
  Reference: "https://en.wikipedia.org/wiki/Yoda_conditions"
  Enabled: true
  EnforcedStyle: forbid_for_all_comparison_operators
  SupportedStyles:
    # check all comparison operators
    - forbid_for_all_comparison_operators
    # check only equality operators: `!=` and `==`
    - forbid_for_equality_operators_only
    # enforce yoda for all comparison operators
    - require_for_all_comparison_operators
    # enforce yoda only for equality operators: `!=` and `==`
    - require_for_equality_operators_only
  Safe: false

Style/ZeroLengthPredicate:
  Description: "Use #empty? when testing for objects of length 0."
  Enabled: true
  Safe: false
