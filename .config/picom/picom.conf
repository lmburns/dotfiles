# "class_g = 'Ulauncher'",
# "class_g = 'Xdg-desktop-portal-kde'",
# "class_g = 'Xdg-desktop-portal-gtk'",
# "class_g = 'Pcmanfm'",
# "class_g = 'Copyq'",
# "class_g = 'AutoKey'",
# "class_g = 'Udiskie'",
# "class_g = 'Pasystray'",
# "class_g = 'Mullvad-gui'",
# "class_g = 'Mullvad VPN'",
# "class_g = 'Nm-applet'",
# "name    = 'blueman-applet'",
# "name    = 'blueman-tray'",
# "name    = 'polybar-bar_DP-1'",
# "class_i = 'presel_feedback'",

# "class_g ?= 'Blueman-tray'",
#
# "class_i ?= 'ulauncher'",
# "class_i ?= 'blueman-tray'",
# "class_i ?= 'autokey-gtk'",
# "class_i ?= 'udiskie'",
# "name     = 'mullvad-gui'",

#  ╭──────────────────────────────────────────────────────────╮
#  │                         General                          │
#  ╰──────────────────────────────────────────────────────────╯
#  ╭─────────╮
#  │ Backend │
#  ╰─────────╯
## Specify the backend to use: `xrender`, `glx`, `egl` or `xr_glx_hybrid`
##
## xrender
##  - all rendering operations with X Render extension
##  - what xcompmgr uses, generally a safe fallback when you encounter rendering artifacts or instability
## glx (OpenGL)
##  - all rendering operations with OpenGL.
##  - more friendly to some VSync methods, and has significantly superior performance
##    on color inversion (--invert-color-include) or blur (--blur-background).
##  - --xrender-sync-fence might be needed on some systems to avoid delay in changes of screen contents.
## xr_glx_hybrid
##  - renders updated screen contents with X Render and presents it on the screen with GLX.
##  - attempts to address rendering issues encountered with GLX & enables the better VSync of GLX backends
##  - --vsync-use-glfinish might fix some rendering issues with this backend.
backend = "glx";

## GLX backend
## Avoid using stencil buffer, useful if you don't have a stencil buffer.
## Might cause incorrect opacity when rendering transparent content and may not work with blur-background.
glx-no-stencil = true;

## GLX backend
## Avoid rebinding pixmap on window damage.
## Probably could improve performance on rapid window content changes,
## but is known to BREAK things on some drivers (LLVMpipe, xf86-video-intel, etc.).
## Recommended if it works.
# glx-no-rebind-pixmap = true;

## GLX backend
## Use specified GLSL fragment shader for rendering window contents.
#
# window-shader-fg = "default"

## GLX backend
## Use rules to set per-window shaders.
## Syntax is SHADER_PATH:PATTERN, similar to opacity-rule. SHADER_PATH can be "default".
## This overrides window-shader-fg.
#
# window-shader-fg-rule = [
#   "my_shader.frag:window_type != 'dock'"
# ]

## Use X Sync fence to sync clients' draw calls, to make sure all draw
## calls are finished before picom starts drawing.
## Needed on nvidia-drivers with GLX backend for some users.
# xrender-sync-fence = false

#  ══════════════════════════════════════════════════════════════════════

## Daemonize process. Fork to background after initialization
# daemon = false;

## Enable remote control via D-Bus
# dbus = false;

# Enable/disable VSync
vsync = true;

## Use higher precision during rendering, and apply dither when presenting the rendered screen.
## Reduces banding artifacts, but might cause performance degradation.
## Only works with OpenGL.
#
# dithered-present = false;

## Do not use EWMH to detect fullscreen windows.
## Reverts to checking if a window is fullscreen based only on its size and coordinates.
no-ewmh-fullscreen = true;

## Unredirect all windows if a full-screen opaque window is detected,
## to maximize performance for full-screen windows. Known to cause flickering
## when redirecting/unredirecting windows.
unredir-if-possible = false;

## Delay before unredirecting the window, in milliseconds. Defaults to 0.
# unredir-if-possible-delay = 0

## Conditions of windows that shouldn't be considered full-screen for unredirecting screen.
# unredir-if-possible-exclude = []

## Use 'WM_TRANSIENT_FOR' to group windows, and consider windows
## in the same group focused at the same time.
## NOTE: Might conflict with BSPWM (false)
detect-transient = false;

## Use 'WM_CLIENT_LEADER' to group windows, and consider windows in the same
## group focused at the same time. This usually means windows from the same application
## will be considered focused or unfocused at the same time.
## 'WM_TRANSIENT_FOR' has higher priority if detect-transient is enabled, too.
## NOTE: Might conflict with BSPWM (false)
detect-client-leader = true;

## Resize damaged region by a specific number of pixels.
## A positive value enlarges it while a negative one shrinks it.
## If the value is positive, those additional pixels will not be actually painted to screen.
## Only used in blur calculation, and such.
##
## Primarily used to fix the line corruption issues of blur,
## in which case you should use the blur radius value here
## (e.g. with a 3x3 kernel, you should use `--resize-damage 1`,
## with a 5x5 one you use `--resize-damage 2`, and so on).
##
## May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
resize-damage = 1;

## Disable the use of damage information.
## This cause the whole screen to be redrawn every time, instead of the part of the screen that changed.
## Potentially degrades the performance, but might fix some artifacts.
##
# no-use-damage = false
use-damage = true;

## Specify a list of conditions of windows that should be painted with inverted color.
#
# invert-color-include = [];

## Force all windows to be painted with blending.
## Useful if you have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false;

## Dimming bright windows so their brightness doesn't exceed this set value.
## Brightness of a window is estimated by averaging all pixels in the window,
## so this could comes with a performance hit.
## Setting this to 1.0 disables this behaviour.
## Requires --use-damage to be disabled. (default: 1.0)
#
# max-brightness = 1.0

## Make transparent windows clip other windows like non-transparent windows do,
## instead of blending on top of them.
#
# transparent-clipping = false;

## Might be USEFUL
## Specify a list of conditions of windows that should never have transparent
## clipping applied. Useful for screenshot tools, where you need to be able to
## see through transparent parts of the window.
#
# transparent-clipping-exclude = []

#  ╭─────────╮
#  │ Logging │
#  ╰─────────╯

## Set the log level.
## Possible values are:
##  - "trace", "debug", "info", "warn", "error"
log-level = "warn";

## Set the log file.
## If *--log-file* is never specified, logs will be written to stderr.
#
# log-file = "/path/to/your/log/file";

## Show all X errors (for debugging)
# show-all-xerrors = false;

## Write process ID to a file.
# write-pid-path = "/path/to/your/log/file";

#  ╭──────────────────────────────────────────────────────────╮
#  │                         Shadows                          │
#  ╰──────────────────────────────────────────────────────────╯
## Enabled client-side shadows on windows
shadow = true;
## Blur radius for shadows, in pixels. (defaults to 12)
shadow-radius = 35;
# shadow-radius = 10;
## Opacity of shadows. (0.0 - 1.0, defaults to 0.75)
shadow-opacity = 0.3;
## Left offset for shadows, in pixels. (defaults to -15)
shadow-offset-x = -20;
## Top offset for shadows, in pixels. (defaults to -15)
shadow-offset-y = -20;

## Red color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-red = 0

## Green color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-green = 0

## Blue color value of shadow (0.0 - 1.0, defaults to 0).
# shadow-blue = 0

## Hex string color value of shadow (#000000 - #FFFFFF, defaults to #000000).
## Will override options set shadow-(red/green/blue)
# shadow-color = "#FFFFFF"

# Specify a list of conditions of windows that should have no shadow.
shadow-exclude = [
    "class_g = 'Polybar'",
    "class_g ?= 'visualizer'",
    "class_g ?= 'conky'",
    "class_g ?= 'slop'",
    "class_g ?= 'notify-osd'",
    "class_g ?= 'firefox'",
    "class_g ?= 'librewolf'",
    "class_g = 'Brave'",
    "class_g = 'Brave-browser'",
    "class_g = 'i3lock'",
    "class_g = 'stalonetray'",
    "class_g = 'keynav'",
    # "class_g = 'Mullvad VPN'",

    "class_i = 'presel_feedback'",

    "name = 'Polybar tray window'",
    "name = 'polybar-tray_DP-4'",
    "name = 'Notification'",

    # "! name ~= ''",
    # "name = 'cpt_frame_window'",

    # "window_type *= 'menu'",
    "window_type = 'dropdown_menu'",
    "window_type = 'utility'",
    "window_type = 'dnd'",
    "window_type = 'desktop'",
    "window_type = 'dock'",
    "window_type = 'splash'",

    # "_NET_WM_WINDOW_TYPE@:a *= 'NOTIFICATION'",
    "_NET_WM_WINDOW_TYPE@:a *= 'SPLASH'",
    "_GTK_FRAME_EXTENTS@:c",

    # BSPWM hidden window shadows (tabbed/stacked)
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'",
];

## Specify a list of conditions of windows that should have no shadow painted over, such as a dock window.
# clip-shadow-above = []

## Specify a X geometry that describes the region in which shadow should not
## be painted in, such as a dock window region. Use
##    shadow-exclude-reg = "x10+0+0"
## For example, if the 10 pixels on the bottom of the screen should not have shadows painted on.
#
# shadow-exclude-reg = ""

## Crop shadow of a window fully on a particular monitor to that monitor.
## This is currently implemented using the X RandR extension.
# crop-shadow-to-monitor = false

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Focus                           │
#  ╰──────────────────────────────────────────────────────────╯
## Try to detect WM wins (non-override-redirect win w/ no child that has 'WM_STATE') & mark as active
## NOTE: Might conflict with BSPWM (false)
mark-wmwin-focused = false;

## Mark override-redirect windows that don't have child win with 'WM_STATE' focused
## NOTE: Required for BSPWM inactive dimming and opacity
mark-ovredir-focused = false;

## Use EWMH '_NET_ACTIVE_WINDOW' to determine currently focused window,
## rather than listening to 'FocusIn'/'FocusOut' event.
## Might have more accuracy, provided that the WM supports it.
## NOTE: Might conflict with BSPWM (false)
use-ewmh-active-win = false;

## Specify a list of conditions of windows that should never be considered focused
focus-exclude = [
    "class_g = 'Rofi'",
    "class_g ?= 'slop'",
    "class_g ?= 'Steam'",

    "window_type *= 'menu'",
    "window_type = 'utility'",
    "window_type = 'dropdown_menu'",
    "window_type = 'popup_menu'",
    "_NET_WM_WINDOW_TYPE@:a *= 'MENU'",

    # "name = 'rofi'",
    #'_NET_WM_NAME@:s = "rofi"',
];

#  ╭──────────────────────────────────────────────────────────╮
#  │                       Transparency                       │
#  ╰──────────────────────────────────────────────────────────╯
## Detect '_NET_WM_WINDOW_OPACITY' on client windows, useful for window managers
## not passing '_NET_WM_WINDOW_OPACITY' of client windows to frame windows.
detect-client-opacity = false;

## Default opacity for active windows. (0.0 - 1.0, defaults to 1.0)
## TODO: Fix this
active-opacity = 0.8

## Opacity of inactive windows. (0.1 - 1.0, defaults to 1.0)
# inactive-opacity = 0.7
# inactive-opacity = 0.9
inactive-opacity = 1.0

# Opacity of window titlebars and borders. (0.1 - 1.0, disabled by default)
frame-opacity = 0.7;

## Let inactive opacity set by -i override the '_NET_WM_WINDOW_OPACITY' values of windows.
## NOTE: Required for BSPWM inactive dimming and opacity
##       Though it conflicts with opacity-rule
inactive-opacity-override = true;

## Dim inactive windows. (0.0 - 1.0, defaults to 0.0)
# inactive-dim = 0.1

## Use fixed inactive dim value, instead of adjusting according to window opacity.
## TODO: Fix this
# inactive-dim-fixed = 0.1

## Specify a list of opacity rules, in the format `PERCENT:PATTERN`, like `50:name *= "Firefox"`.
## picom-trans is recommended over this.
## Note we don't make any guarantee about possible conflicts with other
## programs that set '_NET_WM_WINDOW_OPACITY' on frame or client windows.
## TODO: Fix this
opacity-rule = [
    # "70:class_g = 'Alacritty'",
    # "70:class_g = 'Alacritty' && focused",
    # "40:class_g = 'Alacritty' && !focused",
    "40:class_i = 'presel_feedback'",
    # "90:class_g ?= 'Termite'",
    # "80:class_g ?= 'rofi'",
    # "100:class_g = 'Sxiv'",
    # "100:class_g = 'Nsxiv'",
];

#  ╭──────────────────────────────────────────────────────────╮
#  │                           Blur                           │
#  ╰──────────────────────────────────────────────────────────╯
blur-background-exclude = [
    # Exclude everything except windows of type "splash"
    # "window_type != 'splash'"
    "class_g = 'slop'",
    "class_g = 'mpv'",
    # "class_i != 'presel_feedback'",
    "_GTK_FRAME_EXTENTS@:c",
];

blur: {
    method = "dual_kawase";
    size = 10;
    strength = 5;
    deviation = 5.0;
    # Blur background of semi-transparent / ARGB windows.
    # Bad in performance, with driver-dependent behavior.
    # The name of the switch may change without prior notifications.
    background = true;
    # Blur background of windows when the window frame is not opaque.
    # Implies: blur-background
    background-frame = true;
    # Use fixed blur strength rather than adjusting according to window opacity.
    background-fixed = true;
    # Specify the blur convolution kernel, with the following format:
    kern = "3x3box";
    # Exclude conditions for background blur.
    # background-exclude = [
    #     # Exclude everything except windows of type "splash"
    #     # "window_type != 'splash'"
    #     "class_g = 'slop'",
    #     "class_g = 'mpv'",
    #     # "class_i != 'presel_feedback'",
    #     "_GTK_FRAME_EXTENTS@:c",
    # ];
};

#  ╭──────────────────────────────────────────────────────────╮
#  │                         Rounded                          │
#  ╰──────────────────────────────────────────────────────────╯
#  ╭────────╮
#  │ Corner │
#  ╰────────╯
## Try to detect windows with rounded corners and don't consider them shaped windows.
## Aaccuracy is not very high, unfortunately.
detect-rounded-corners = true;

## Sets the radius of rounded window corners. When > 0, the compositor will
## round the corners of windows. Does not interact well with
## `transparent-clipping`.
corner-radius = 15.0;

# Exclude conditions for rounded corners.
rounded-corners-exclude = [
    "class_g = 'Dunst'",
    "class_g = 'Polybar'",
    # "class_g = 'Rofi'",

    "window_type = 'desktop'",
    "window_type *= 'dock'",
    # "window_type = 'menu'",
    # "window_type = 'tooltip'",
    # "window_type = 'popup_menu'",
    # "window_type = 'dropdown_menu'",
    # "_NET_WM_WINDOW_TYPE@:a *= 'NOTIFICATION'",
];

#  ╭────────╮
#  │ Border │
#  ╰────────╯
round-borders = 20;

round-borders-exclude = [
   "class_g = 'Dunst'",
   "class_g = 'Polybar'",
   # "class_g = 'Rofi'",
];

# round-borders-rule = [];

#  ╭──────────────────────────────────────────────────────────╮
#  │                           Fade                           │
#  ╰──────────────────────────────────────────────────────────╯
## Fade windows in/out when opening/closing and when opacity changes,
## unless no-fading-openclose is used.
fading = true;
## Opacity change between steps while fading in. (0.01 - 1.0, defaults to 0.028)
fade-in-step = 0.03;
## Opacity change between steps while fading out. (0.01 - 1.0, defaults to 0.03)
fade-out-step = 0.03;
## The time between steps in fade step, in milliseconds. (> 0, defaults to 10)
fade-delta = 6;
## Do not fade windows in/out when opening/closing
no-fading-openclose = false;
## Do not fade destroyed ARGB windows with WM frame. Workaround of bugs in Openbox, Fluxbox, etc.
no-fading-destroyed-argb = false;

# Specify a list of conditions of windows that should not be faded.
# Don't need this, fading is disabled for all normal windows with wintypes: {}
fade-exclude = [
    # "class_g != 'bspwm'",
    "class_g = 'slop'",
];

#  ╭──────────╮
#  │ WinTypes │
#  ╰──────────╯

# 'WINDOW_TYPE' is one of the 15 window types defined in EWMH standard:
#     unknown     desktop  dock          toolbar  menu
#     utility     splash   dialog        normal   dropdown_menu
#     popup_menu  tooltip  notification  combo    dnd
#
# Following per window-type options are available: ::
#
#   fade, shadow:::
#     Controls window-type-specific shadow and fade settings.
#
#   opacity:::
#     Controls default opacity of the window type.
#
#   focus:::
#     Controls whether the window of this type is to be always considered focused.
#     (By default, all window types except "normal" and "dialog" has this on.)
#
#   full-shadow:::
#     Controls whether shadow is drawn under the parts of the window that you
#     normally won't be able to see. Useful when the window has parts of it
#     transparent, and you want shadows in those areas.
#
#   clip-shadow-above:::
#     Controls whether shadows that would have been drawn above the window should
#     be clipped. Useful for dock windows that should have no shadow painted on top.
#
#   redir-ignore:::
#     Controls whether this type of windows should cause screen to become
#     redirected again after been unredirected. If you have unredir-if-possible
#     set, and doesn't want certain window to cause unnecessary screen redirection,
#     you can set this to `true`.
#

wintypes: {
    menu = { shadow = false; };
    dropdown_menu = { shadow = false; opacity = 0.90; };
    popup_menu = { shadow = true; opacity = 0.90; };
    tooltip = { shadow = true; fade = true; opacity = 0.75; focus = true; full-shadow = false; };
    utility =  { shadow = false; };

    notification = { shadow = true; fade = true; };
    dnd = { shadow = false; };

    desktop = { shadow = false; blur-background = false; };
    dock = { shadow = false; clip-shadow-above = true; }

    splash = { shadow = false; };
    dialog = { shadow = true; };
    above = { shadow = true; };
    normal = { shadow = true; full-shadow = true; };

    # unknown = {};
    # combo = {};

    #  dock = { shadow = false; };
    #  dnd = { shadow = false; };
    #  tooltip = { shadow = false; };
    #  menu        = { opacity = false; };
    #  dropdown_menu = { opacity = false; };
    #  popup_menu    = { opacity = false; };
    #  utility       = { opacity = false; };

    # tooltip = { fade = true; shadow = false; };
    # menu = { focus = false; };
    # popup_menu = { shadow = true; focus = false; opacity = 0.90; };
    # dropdown_menu = { shadow = false; focus = false; };
    # utility = { focus = false; shadow = false; blur-background = false; };
    # normal = { fade = false; shadow = true; }
};

#  ╭──────────────────────────────────────────────────────────╮
#  │                         Disabled                         │
#  ╰──────────────────────────────────────────────────────────╯
# glx-copy-from-front = false;
# dbe = false;
# refresh-rate = 60;
# sw-opti = true;

#  ╭───────────╮
#  │ Animation │
#  ╰───────────╯
# transition-length = 300;
# transition-pow-x = 0.7;
# transition-pow-y = 0.7;
# transition-pow-w = 0.7;
# transition-pow-h = 0.7;
# size-transition = true;
#
# animations = true;
# animation-for-open-window = "none";
# animation-delta = 10;

#  ╭──────────────────────────────────────────────────────────╮
#  │                           Help                           │
#  ╰──────────────────────────────────────────────────────────╯
#  ╭────────────────────╮
#  │ Predefined targets │
#  ╰────────────────────╯
#    id,                        name,
#    x,                         y,
#    x2 (x + widthb),           y2 (like x2),
#    width,                     height,
#    widthb (w+2*border_w),     heightb (like widthb),
#    fullscreen,                focused,
#    border_width,              bounding_shaped,
#    override_redirect,         rounded_corners
#    window_type,               role
#    client (ID of client win), leader (ID of win leader),
#    class_g (= WM_CLASS[1]),   class_i (= WM_CLASS[0]),
#    argb (has ARGB visual),    wmwin (no child with WM_STATE & not override-redirected),
#
#  ╭────────────╮
#  │ Conditions │
#  ╰────────────╯
### Exists
#    <NEGATION> <TARGET> <CLIENT/FRAME> [<INDEX>] : <FORMAT> <TYPE>
### Equals
#    <NEGATION> <TARGET> <CLIENT/FRAME> [<INDEX>] : <FORMAT> <TYPE> <NEGATION> <OP QUALIFIER> <MATCH TYPE> = <PATTERN>
### Greater/Less than
#    <NEGATION> <TARGET> <CLIENT/FRAME> [<INDEX>] : <FORMAT> <TYPE> <NEGATION> <OPERATOR> <PATTERN>
#
# !       negate
# ?=      ignore-case             (op qualifier)
# =       match exact             (match type)
# *=      match anywhere          (match type)
# ^=      match start             (match type)
# %=      wildcard                (match type)
# ~=      pcre regex              (match type)
# empty   equals                  (operator: property exists on window/property != 0)
# =       equals                  (operator)
# <       less than               (operator)
# >       greater than            (operator)
# <=      less than or equal      (operator) ??
# =>      greater than or equal   (operator) ??
# &&      and                     (logical)
# ||      or                      (logical)

## If the window is a menu
#    window_type *= "menu"
#    _NET_WM_WINDOW_TYPE@:a *= "MENU"
#
## If the window is marked hidden: _NET_WM_STATE contains _NET_WM_STATE_HIDDEN
#    _NET_WM_STATE@[*]:a = "_NET_WM_STATE_HIDDEN"
#
## If the window is marked sticky: _NET_WM_STATE contains an atom that contains "sticky", ignore case
#    _NET_WM_STATE@[*]:a *?= "sticky"
#
## If the window name contains "Firefox", ignore case
#    name *?= "Firefox"
#    _NET_WM_NAME@:s *?= "Firefox"
#
## If the window name ends with "Firefox"
#    name %= "*Firefox"
#    name ~= "Firefox$"
#
## If the window has a property _COMPTON_SHADOW with value 0, type CARDINAL,
## format 32, value 0, on its frame window
#    _COMPTON_SHADOW:32c = 0
#
## If the third value of _NET_FRAME_EXTENTS is less than 20, or there's no
## _NET_FRAME_EXTENTS property on client window
#    _NET_FRAME_EXTENTS@[2]:32c < 20 || !_NET_FRAME_EXTENTS@:32c

# vim: ft=cfg:et:sw=4:ts=2:sts=-1
