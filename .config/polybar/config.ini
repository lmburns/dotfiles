# key = ${file:/absolute/file/path:fallback value}

# https://giters.com/polybar/polybar-scripts

#  ══════════════════════════════════════════════════════════════════════

#  ╭──────────────────────────────────────────────────────────╮
#  │                    Global WM Settings                    │
#  ╰──────────────────────────────────────────────────────────╯

[global/wm]
include-file = ~/.config/polybar/colors.ini
include-file = ~/.config/polybar/custom.ini
include-file = ~/.config/polybar/internal.ini

# Adjust the _NET_WM_STRUT_PARTIAL top value
#   Used for top aligned bars
# Supports any percentage with offset relative to the monitor height
margin-bottom = 0

# Adjust the _NET_WM_STRUT_PARTIAL bottom value
#   Used for bottom aligned bars
# Supports any percentage with offset relative to the monitor height
margin-top = 0

#  ╭──────────────────────────────────────────────────────────╮
#  │                           Bars                           │
#  ╰──────────────────────────────────────────────────────────╯

[bar/bar_external]
monitor = HDMI-1
# inherit = bar/bar
monitor-strict = true

[bar/bar]
#  ╭──────────────╮
#  │ Bar Settings │
#  ╰──────────────╯
# If no monitor is given, the primary monitor is used if it exists
monitor = ${env:MONITOR:DP-1}

# Use the specified monitor as a fallback if the main one is not found.
monitor-fallback =

# Require the monitor to be in connected state
monitor-strict = false

# Use fuzzy matching for monitors (only ignores dashes -)
# Useful when monitors are named differently with different drivers.
monitor-exact = true

# Tell the Window Manager not to configure the window.
# Use this to detach the bar if your WM is locking its size/position.
override-redirect = false

# Put bar at bottom of screen
bottom = false

# Prefer fixed center position for the `modules-center` block
# When false, the center position will be based on the size of the other blocks.
fixed-center = false

# Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
# the percentage can optionally be extended with a pixel offset like so:
# 50%:-10, this will result in a width or height of 50% minus 10 pixels
width = 100%
height = 32

# Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
# the percentage can optionally be extended with a pixel offset like so:
# 50%:-10, this will result in an offset in the x or y direction
# of 50% minus 10 pixels
offset-x = 0
offset-y = 0

background = ${colors.background}
foreground = ${colors.foreground}

# Background gradient (vertical steps)
#   background-[0-9]+ = #aarrggbb
# background-0 =

# Value used for drawing rounded corners
# Note: This shouldn't be used together with border-size because the border
# doesn't get rounded
# Individual top/bottom values can be defined using:
#   radius-{top,bottom}
# radius = 0.0
radius-top = 0.0
radius-bottom = 0.0

# Under-/overline pixel size and argb color
# Individual values can be defined using:
#   {overline,underline}-size
#   {overline,underline}-color
line-size = 6
line-color = ${colors.background}
underline-size = 3
overline-size = 0

# Values applied to all borders
# Individual side values can be defined using:
#   border-{left,top,right,bottom}-size
#   border-{left,top,right,bottom}-color
# The top and bottom borders are added to the bar height, so the effective
# window height is:
#   height + border-top-size + border-bottom-size
# Meanwhile the effective window width is defined entirely by the width key and
# the border is placed withing this area. So you effectively only have the
# following horizontal space on the bar:
#   width - border-right-size - border-left-size
# border-top-size = 4
# border-top-color = ${colors.pumpkin}

# Number of spaces to add at the beginning/end of the bar
# Individual side values can be defined using:
#   padding-{left,right}
padding = 0

# Number of spaces to add before/after each module
# Individual side values can be defined using:
#   module-margin-{left,right}
module-margin-left = 0
module-margin-right = 1

#  ══════════════════════════════════════════════════════════════════════

# FuraMono Nerd Font Mono:style=Bold
font-0 = FuraMono Nerd Font:size=10;
font-1 = Hack Nerd Font:weight=Bold:size=10;
font-2 = JetBrainsMono Nerd Font Medium:size=10;

modules-left = bspwm bspmode xwindow sep1
modules-center = mpd mpv
modules-right = dunst mail services miniwindow pacman-pkgs cpu-cst cpu-temp memory-cst pulseaudio time

# torrents
# powermenu

#  ══════════════════════════════════════════════════════════════════════

# The separator will be inserted between the output of each module
separator =

# Opacity value between 0.0 and 1.0 used on fade in/out
dim-value = 1.0

# Value to be used to set the WM_NAME atom
# If the value is empty or undefined, the atom value
# will be created from the following template: polybar-[BAR]_[MONITOR]
# wm-name =

# Available positions:
#   left
#   center
#   right
#   none
tray-position = right

# If true, the bar will not shift its
# contents when the tray changes
tray-detached = false

# Tray icon max size
tray-maxsize = 16

# Background color for the tray container
tray-background = ${root.background}
# Foreground color for the tray icons
# This only gives a hint to the tray icon for its color, it will probably only
# work for GTK3 icons (if at all) because it targets a non-standard part of the
# system tray protocol by setting the _NET_SYSTEM_TRAY_COLORS atom on the tray window
tray-foreground = ${root.foreground}

# Tray offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
tray-offset-x = 0
tray-offset-y = 0

# Pad the sides of each tray icon
tray-padding = 0

# Scale factor for tray clients
tray-scale = 1.0

# Restack the bar window and put it above the
# selected window manager's root
wm-restack = bspwm

# Enable support for inter-process messaging
# See the Messaging wiki page for more details.
enable-ipc = true

# Set a DPI values used when rendering text
# This only affects scalable fonts
dpi-x = 96
dpi-y = 96

# Fallback click handlers that will be called if
# there's no matching module handler found.
click-left =
click-middle =
click-right =
scroll-up =
scroll-down =
double-click-left =
double-click-middle =
double-click-right =

; If two clicks are received within this interval (ms), they are recognized as
; a double click.
double-click-interval = 400

; Requires polybar to be built with xcursor support (xcb-util-cursor)
; Possible values are:
; - default   : The default pointer as before, can also be an empty string (default)
; - pointer   : Typically in the form of a hand
; - ns-resize : Up and down arrows, can be used to indicate scrolling
cursor-click = pointer
cursor-scroll = default

#  ╭──────────────────────────────────────────────────────────╮
#  │                   Application Settings                   │
#  ╰──────────────────────────────────────────────────────────╯

[settings]
# Define fallback values used by all module formats
format-foreground = ${root.foreground}
format-underline = ${colors.bright-magenta}
format-background = ${colors.background}
format-padding = 0.2
format-margin = 0
# format-overline =
# format-offset =

# Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
screenchange-reload = true

# Compositing operators
# @see: https://www.cairographics.org/manual/cairo-cairo-t.html#cairo-operator-t
compositing-background = source
compositing-foreground = over
compositing-overline = over
compositing-underline = over
compositing-border = over

# Enables pseudo-transparency for the bar
# If set to true the bar can be transparent without a compositor.
pseudo-transparency = false

# vim: ft=dosini:et:sw=0:ts=2:sts=2:fdm=marker:fmr={{{,}}}:
