#compdef stig

autoload -U is-at-least

# FIX:
# :message:action = mandatory
# ::message:action = optional

_stig_torrents() {
  typeset -a torrents; torrents=(
    ${(@f)"$(stig ls --columns=name)"}
  )
  _describe -t torrents "torrents" torrents
}

#
## SETTINGS
#

_stig_settings() {
  typeset -a settings; settings=(
    "columns.files:Default columns in file lists"
    "columns.peers:Default columns in peer lists"
    "columns.settings:Default columns in setting lists"
    "columns.torrents:Default columns in torrent lists"
    "columns.trackers:Default columns in tracker lists"
    "connect.host:Hostname or IP of Transmission RPC interface"
    "connect.password:Password to use for authentication with Transmission RPC interface"
    "connect.path:Path of Transmission RPC interface"
    "connect.port:Port of Transmission RPC interface"
    "connect.proxy:SOCKS5, SOCKS4 or HTTP proxy URL to tunnel RPC communication through"
    "connect.timeout:Number of seconds before connecting to Transmission RPC interface fails"
    "connect.tls:Whether to connect via HTTPS to the Transmission RPC interface"
    "connect.url:URL of the Transmission RPC interface"
    "connect.user:Username to use for authentication with Transmission RPC interface"
    "remove.max-hits:Maximum number of torrents to remove without extra confirmation; negative numbers mean 'unlimited'"
    "reverse-dns:Whether to lookup peers' host names"
    "sort.peers:List of sort orders in peer lists"
    "sort.settings:List of sort orders in setting lists"
    "sort.torrents:List of sort orders in torrent lists"
    "sort.trackers:List of sort orders in tracker lists"
    "tui.cli.history-dir:Directory where histories of user input are stored"
    "tui.cli.history-size:Maximum number of lines to keep in history files"
    "tui.free-space.low:Minimum amount of free space before highlighting the display"
    "tui.log.autohide:If the log is hidden, show it for this many seconds for new log entries before hiding it again"
    "tui.log.height:Maximum height of the log section"
    "tui.marked.off:Character displayed in 'marked' column for unmarked list items (see 'mark' command)"
    "tui.marked.on:Character displayed in 'marked' column for marked list items (see 'mark' command)"
    "tui.poll:Interval in seconds between TUI updates"
    "tui.theme:Path to theme file"
    "unit.bandwidth:Unit for bandwidth rates ('bit' or 'byte')"
    "unit.size:Unit for file sizes ('bit' or 'byte')"
    "unitprefix.bandwidth:Unit prefix for bandwidth rates ('metric' or 'binary')"
    "unitprefix.size:Unit prefix for file sizes ('metric' or 'binary')"
  )
  _describe -t settings "settings" settings

  typeset -a remote; remote=(
    "srv.autostart:Whether added torrents are started automatically"
    "srv.dht:Whether to use DHT to discover peers for public torrents"
    "srv.encryption:Protocol encryption policy; 'required', 'preferred' or 'tolerated'"
    "srv.files.part:Whether '.part' is appended to incomplete files"
    "srv.limit.peers.global:Maximum number of connections for all torrents combined"
    "srv.limit.peers.torrent:Maximum number of connections per torrent"
    "srv.limit.rate.alt.down:Alternative global download rate limit"
    "srv.limit.rate.alt.up:Alternative global upload rate limit"
    "srv.limit.rate.down:Global download rate limit"
    "srv.limit.rate.up:Global upload rate limit"
    "srv.lpd:Whether to use LPD to discover peers for public torrents"
    "srv.path.complete:Where to put downloaded files"
    "srv.path.incomplete:Where to put partially downloaded files"
    "srv.pex:Whether to use PEX to discover peers for public torrents"
    "srv.port:Port used to communicate with peers"
    "srv.port.forwarding:Whether to autoconfigure port-forwarding via UPnP/NAT-PMP"
    "srv.port.random:Whether to pick a random port when the daemon starts"
    "srv.utp:Whether to use ÂµTP to mitigate latency issues"
  )
  _describe -t remote "remote settings" remote
}

#
## FILTERS
#

_stig_filter_operators() {
  typeset -a operators; operators=(
    "\&:And"
    "\!:Not"
    "=:Equal"
    "!=:Not equal"
    ">:Greater than"
    ">=:Greater than or equal"
    "<:Less than"
    "<=:Less than or equal"
    "~:Contains literal string VALUE"
    "=~:Matches Perl style regex"
    "K:Kilobyte"
    "Ki:Kilobyte"
    "M:Megabyte"
    "Mi:Megabyte"
    "G:Gigabyte"
    "Gi:Gigabyte"
    "T:Teraabyte"
    "Ti:Teraabyte"
  )
  _describe -t operators "operators" operators
}

_stig_torrent_filters() {
  # DEFAULT FILTER: name
  typeset -a boolean; boolean=(
    "active:Torrents connected to peers or being verified"
    "act:Torrents connected to peers or being verified"
    "all:All torrents"
    "\*:All torrents"
    "complete:Torrents with all wanted files downloaded"
    "cmp:Torrents with all wanted files downloaded"
    "downloading:Torrents using download bandwidth"
    "dng:Torrents using download bandwidth"
    "idle:Unstopped torrents that dont do anything"
    "isolated:Torrents that cannot discover new peers in any way"
    "isl:Torrents that cannot discover new peers in any way"
    "leeching:Unstopped torrents downloading or waiting for seeds"
    "lcg:Unstopped torrents downloading or waiting for seeds"
    "private:Torrents connectable through trackers only (no DHT/PEX)"
    "prv:Torrents connectable through trackers only (no DHT/PEX)"
    "seeding:Unstopped torrents with all wanted files downloaded"
    "sdg:Unstopped torrents with all wanted files downloaded"
    "stopped:Torrents that are not allowed to up- or download"
    "stp:Torrents that are not allowed to up- or download"
    "paused:Torrents that are not allowed to up- or download"
    "uploading:Torrents using upload bandwidth"
    "upg:Torrents using upload bandwidth"
    "verifying:Torrents being verified or queued for verification"
    "vfg:Torrents being verified or queued for verification"
  )
  _describe -t boolean-torrent "torrent boolean filters" boolean

  typeset -a comparative; comparative=(
    "%downloaded:Match VALUE against percentage of downloaded bytes"
    "%dn:Match VALUE against percentage of downloaded bytes"
    "activity:Match VALUE against time torrent was active"
    "tact:Match VALUE against time torrent was active"
    "added:Match VALUE against time torrent was added"
    "tadd:Match VALUE against time torrent was added"
    "comment:Match VALUE against comment"
    "cmnt:Match VALUE against comment"
    "completed:Match VALUE against time all wanted files where/will be downloaded"
    "tcmp:Match VALUE against time all wanted files where/will be downloaded"
    "created:Match VALUE against torrent creation time"
    "tcrt:Match VALUE against torrent creation time"
    "downloaded:Match VALUE against number of downloaded bytes"
    "dn:Match VALUE against number of downloaded bytes"
    "error:Match VALUE against error message"
    "err:Match VALUE against error message"
    "eta:Match VALUE against estimated time to finish downloading"
    "hash:Match VALUE against torrent SHA1 hash"
    "id:Match VALUE against torrent ID"
    "limit-rate-down:Match VALUE against download rate limit"
    "lrdn:Match VALUE against download rate limit"
    "limit-rate-up:Match VALUE against upload rate limit"
    "lrup:Match VALUE against upload rate limit"
    "name:Match VALUE against name (default)"
    "n:Match VALUE against name (default)"
    "path:Match VALUE against absolute path to download directory"
    "peers:Match VALUE against number of connected peers"
    "prs:Match VALUE against number of connected peers"
    "rate-down:Match VALUE against download rate"
    "rdn:Match VALUE against download rate"
    "rate-up:Match VALUE against upload rate"
    "rup:Match VALUE against upload rate"
    "ratio:Match VALUE against uploaded/downloaded ratio"
    "rto:Match VALUE against uploaded/downloaded ratio"
    "seeds:Match VALUE against largest number of seeds reported by any tracker"
    "sds:Match VALUE against largest number of seeds reported by any tracker"
    "size:Match VALUE against combined size of all wanted files"
    "sz:Match VALUE against combined size of all wanted files"
    "started:Match VALUE against last time torrent was started"
    "tsta:Match VALUE against last time torrent was started"
    "tracker:Match VALUE against domain of the announce URL of trackers"
    "trk:Match VALUE against domain of the announce URL of trackers"
    "uploaded:Match VALUE against number of uploaded bytes"
    "up:Match VALUE against number of uploaded bytes"
  )
  _describe -t comparative-torrent "torrent comparative filters" comparative
  _stig_filter_operators
}

_stig_file_filters() {
  # DEFAULT FILTER: name
  typeset -a boolean; boolean=(
    "all:All files"
    "\*:All files"
    "complete:Fully downloaded files"
    "cmp:Fully downloaded files"
    "wanted:Wanted files"
  )
  _describe -t boolean-file "file boolean filters" boolean

  typeset -a comparative; comparative=(
    "%downloaded:Match VALUE against percentage of downloaded bytes"
    "%dn:Match VALUE against percentage of downloaded bytes"
    "downloaded:Match VALUE against downloaded bytes"
    "dn:Match VALUE against downloaded bytes"
    "name:Match VALUE against file name (default)"
    "n:Match VALUE against file name (default)"
    "path:Match VALUE against file path"
    "dir:Match VALUE against file path"
    "priority:Match VALUE against download priority (off, low, normal, high)"
    "prio:Match VALUE against download priority (off, low, normal, high)"
    "size:Match VALUE against file size"
    "sz:Match VALUE against file size"
  )
  _describe -t comparative-file "file comparative filters" comparative
  _stig_filter_operators
}

# TODO: where to use?
_stig_peer_filters() {
  # DEFAULT FILTER: host
  typeset -a boolean; boolean=(
    "all:All peers"
    "\*:All peers"
    "downloading:Peers we are downloading from"
    "dng:Peers we are downloading from"
    "seeding:Peers that have downloaded all data"
    "sdg:Peers that have downloaded all data"
    "uploading:Peers we are uploading to"
    "upg:Peers we are uploading to"
  )
  _describe -t boolean-peer "peer boolean filters" boolean

  typeset -a comparative; comparative=(
    "%downloaded:Match VALUE against percentage of bytes peer has downloaded"
    "%dn:Match VALUE against percentage of bytes peer has downloaded"
    "client:Match VALUE against peer client"
    "cl:Match VALUE against peer client"
    "downloaded:Match VALUE against number of bytes peer has downloaded"
    "dn:Match VALUE against number of bytes peer has downloaded"
    "host:Match VALUE against peer host name or IP address (default)"
    "port:Match VALUE against peer port"
  )
  _describe -t comparative-peer "peer comparative filters" comparative
  _stig_filter_operators
}

_stig_tracker_filters() {
  # DEFAULT FILTER: domain
  typeset -a boolean; boolean=(
    "alive:Trackers we are trying to connect to"
    "all:All trackers"
    "*:All trackers"
  )
  _describe -t boolean-tracker "tracker boolean filters" boolean

  typeset -a comparative; comparative=(
    "domain:Match VALUE against domain of announce URL (default)"
    "dom:Match VALUE against domain of announce URL (default)"
    "tracker:Match VALUE against domain of announce URL (default)"
    "downloads:Match VALUE against number of known downloads"
    "dns:Match VALUE against number of known downloads"
    "error:Match VALUE against error message from tracker"
    "err:Match VALUE against error message from tracker"
    "last-announce:Match VALUE against time of last announce"
    "lan:Match VALUE against time of last announce"
    "last-scrape:Match VALUE against time of last scrape"
    "lsc:Match VALUE against time of last scrape"
    "leeches:Match VALUE against number of known downloads"
    "lcs:Match VALUE against number of known downloads"
    "next-announce:Match VALUE against time of next announce"
    "nan:Match VALUE against time of next announce"
    "next-scrape:Match VALUE against time of next scrape"
    "nsc:Match VALUE against time of next scrape"
    "seeds:Match VALUE against number of known seeding peers"
    "sds:Match VALUE against number of known seeding peers"
    "status:Match VALUE against tracker status (stopped, idle, queued, announcing, scraping)"
    "st:Match VALUE against tracker status (stopped, idle, queued, announcing, scraping)"
    "tier:Match VALUE against tracker tier"
    "url-announce:Match VALUE against announce URL"
    "an:Match VALUE against announce URL"
    "sc:Match VALUE against scrape URL"
  )
  _describe -t comparative-tracker "tracker comparative filters" comparative
  _stig_filter_operators
}

# TODO: where to use?
_stig_setting_filters() {
  # DEFAULT FILTER: name
  typeset -a boolean; boolean=(
    "all:All settings"
    "*:All settings"
    "changed:Settings with customized values"
    "ch:Settings with customized values"
  )
  _describe -t boolean-settings "setting boolean filters" boolean

  typeset -a comparative; comparative=(
    "default:Match VALUE against default value"
    "def:Match VALUE against default value"
    "description:Match VALUE against description"
    "desc:Match VALUE against description"
    "name:Match VALUE against setting name (default)"
    "n:Match VALUE against setting name (default)"
    "value:Match VALUE against current value"
    "v:Match VALUE against current value"
  )
  _describe -t comparative-settings "setting comparative filters" comparative
  _stig_filter_operators
}

#
## COLUMNS
#

_stig_trklist_sort() {
  typeset -a trksort; trksort=(
    "domain:Sort trackers by domain from announce URL"
    "dom:Sort trackers by domain from announce URL"
    "downloads:Sort trackers by number of known finished downloads"
    "dns:Sort trackers by number of known finished downloads"
    "error:Sort trackers by error message"
    "err:Sort trackers by error message"
    "last-announce:Sort trackers by last time the torrent was announced"
    "lan:Sort trackers by last time the torrent was announced"
    "last-scrape:Sort trackers by last time the torrent was scraped"
    "lsc:Sort trackers by last time the torrent was scraped"
    "leeches:Sort trackers by number of known downloading peers"
    "lcs:Sort trackers by number of known downloading peers"
    "next-announce:Sort trackers by next time the torrent will be announced"
    "nan:Sort trackers by next time the torrent will be announced"
    "next-scrape:Sort trackers by next time the torrent will be scraped"
    "ncs:Sort trackers by next time the torrent will be scraped"
    "seeds:Sort trackers by number of known seeding peers"
    "sds:Sort trackers by number of known seeding peers"
    "status:Sort trackers by tracker status"
    "st:Sort trackers by tracker status"
    "tier:Sort trackers by tier number"
    "torrent:Sort trackers by torrent name"
  )
  _describe -t trk-list-sort "tracker list sorting" trksort
}

_stig_trklist_cols() {
  typeset -a trklist; trklist=(
    domain downloads error error-announce error-scrape
    last-announce last-scrape leeches next-announce
    next-scrape seeds status tier torrent url-announce url-scrape
  )
  _describe -t trk-list "tracker list columns" trklist
}

_stig_filelist_cols() {
  typeset -a filelist; filelist=(
    '%downloaded' downloaded marked name priority size
  )
  _describe -t file-list "file list columns" filelist
}

_stig_list_sort() {
  typeset -a peerlist; peersort=(
    "%downloaded:Sort torrents by downloading or verifying progress"
    "%dn:Sort torrents by downloading or verifying progress"
    "activity:Sort torrents by time of latest upload/download activity"
    "tact:Sort torrents by time of latest upload/download activity"
    "added:Sort torrents by time of addition"
    "tadd:Sort torrents by time of addition"
    "completed:Sort torrents by time of completion"
    "tcmp:Sort torrents by time of completion"
    "created:Sort torrents by creation time"
    "tcrt:Sort torrents by creation time"
    "downloaded:Sort torrents by number of downloaded bytes"
    "dn:Sort torrents by number of downloaded bytes"
    "error:Sort torrents by error message"
    "err:Sort torrents by error message"
    "eta:Sort torrents by estimated time to finish downloading"
    "id:Sort torrents by ID"
    "limit-rate:Sort torrents by combined download and upload rate limit"
    "lr:Sort torrents by combined download and upload rate limit"
    "limit-rate-down:Sort torrents by download rate limit"
    "lrdn:Sort torrents by download rate limit"
    "limit-rate-up:Sort torrents by upload rate limit"
    "lrup:Sort torrents by upload rate limit"
    "name:Sort torrents by name"
    "n:Sort torrents by name"
    "path:Sort torrents by download path"
    "dir:Sort torrents by download path"
    "peers:Sort torrents by connected peers"
    "prs:Sort torrents by connected peers"
    "rate:Sort torrents by combined download and upload rate"
    "r:Sort torrents by combined download and upload rate"
    "rate-down:Sort torrents by download rate"
    "rdn:Sort torrents by download rate"
    "rate-up:Sort torrents by upload rate"
    "rup:Sort torrents by upload rate"
    "ratio:Sort torrents by upload/download ratio"
    "rto:Sort torrents by upload/download ratio"
    "seeds:Sort torrents by highest number of seeds reported by any tracker"
    "sds:Sort torrents by highest number of seeds reported by any tracker"
    "size:Sort torrents by number of bytes of all wanted files"
    "sz:Sort torrents by number of bytes of all wanted files"
    "started:Sort torrents by start time"
    "tsta:Sort torrents by start time"
    "status:Sort torrents by current status (idle, uploading, verifying, etc.)"
    "st:Sort torrents by current status (idle, uploading, verifying, etc.)"
    "tracker:Sort torrents by domain of first tracker"
    "trk:Sort torrents by domain of first tracker"
    "uploaded:Sort torrents by number of uploaded bytes"
    "up:Sort torrents by number of uploaded bytes"
  )
  _describe -t peer-list-sort "peer list sorting" peersort
}

_stig_list_cols() {
  typeset -a listcols; listcols=(
    "%downloaded" "%available" activity added available completed created
    downloaded error eta id limit-rate-down limit-rate-up marked name
    path peers rate-down rate-up ratio seeds size started status tracker uploaded
  )
  _describe -t ls-cols "list columns" listcols
}

_stig_peerlist_sort() {
  typeset -a peersort; peersort=(
    \%downloaded \%dn client cl eta host port
    rate r rate-down rdn rate-set re rate-up rup torrent
  )
  _describe -t peer-list-sort "peer list sorting" peersort
}

_stig_peerlist_cols() {
  typeset -a peerlist; peerlist=(
    \%downloaded client eta host port rate-down rate-est rate-up torrent
  )
  _describe -t peer-list "peer list columns" peerlist
}

#
## COMMANDS
#
_stig_tracker_cmds() {
  typeset -a tracker_cmds
  tracker_cmds=(
    'add:Add a tracker'
    'remove:Remove a tracker'
    'rm:Remove a tracker'
  )
  _describe -t tracker-cmds "tracker commands" tracker_cmds
}

_stig_log_cmds() {
  typeset -a log_cmds
  log_cmds=(
    'clear:Remove all previously logged messages in the TUI'
    'scroll:Scroll the log messages up or down in the TUI'
    'info:Join all PARAMETERs and display them as a normal message'
    'error:Join all PARAMETERs and display them as an error message'
  )
  _describe -t log-cmds "log commands" log_cmds
}

_stig_log_cmds() {
  typeset -a log_cmds
  log_cmds=(
    'clear:Remove all previously logged messages in the TUI'
    'scroll:Scroll the log messages up or down in the TUI'
    'info:Join all PARAMETERs and display them as a normal message'
    'error:Join all PARAMETERs and display them as an error message'
  )
  _describe -t log-cmds "log commands" log_cmds
}

_stig_topics() {
  typeset -a topics
  topics=(
    'commandsmanual:Describes how to call and chain commands'
    'cmdsman:Describes how to call and chain commands'
    'commands:Lists commands'
    'cmds:Lists commands'
    'filtersmanual:Describes how to define and combine filters'
    'filtersman:Describes how to define and combine filters'
    'filters:Lists filters for torrents, files, etc'
    'settingsmanual:Describes how to change settings'
    'configman:Describes how to change settings'
    'cfgman:Describes how to change settings'
    'settings:Lists configuration settings'
    'config:Lists configuration settings'
    'cfg:Lists configuration settings'
    'keybindings:Lists TUI keybindings'
    'keymap:Lists TUI keybindings'
    'keys:Lists TUI keybindings'
  )
  _describe -t topics "help topics" topics
  _stig_commands
}

_stig_tui_cmds() {
  typeset -a tui_cmds
  tui_cmds=(
    "bind:Bind keys to commands or other keys"
    "find:Find text in the content of the focused tab"
    "interactive:Complete partial command with user input from a dialog"
    "limit:Limit contents of the focused tab by applying more filters"
    "mark:Select torrents or files for an action"
    "quit:Terminate the TUI"
    "setcommand:setcmd  Open the command line and insert a command"
    "sort:Sort lists of torrents/peers/trackers/etc"
    "tab:Open, close and focus tabs"
    "tui:Show or hide parts of the text user interface"
    "unbind:Unbind keys so pressing them has no effect"
    "unmark:Deselect torrents or files for an action"
  )
  _describe -t tui-cmds "tui commands" tui_cmds
}

_stig_commands() {
  typeset -a subcommands
  subcommands=(
    'dump:Generate commands that reproduce current settings, keybindings and tabs'

    'ratelimit:Limit transfer rates per torrent or globally'
    'rate:Limit transfer rates per torrent or globally'
    'rl:Limit transfer rates per torrent or globally'

    'rc:Run commands in rc file'
    'source:Run commands in rc file'

    'reset:Reset settings to their default values'
    'set:Change or list settings'

    'filelist:List files of torrent(s)'
    'fls:List files of torrent(s)'
    'lsf:List files of torrent(s)'

    'priority:Change download priority of files'
    'prio:Change download priority of files'

    'help:List or explain commands and settings'
    'man:List or explain commands and settings'

    'log:Clear, add or scroll through log messages'
    'version:Show stig version'

    'peerlist:List connected peers of torrent(s)'
    'pls:List connected peers of torrent(s)'
    'lsp:List connected peers of torrent(s)'

    'add:Download torrents'
    'download:Download torrents'
    'get:Download torrents'

    'details:Display detailed torrent information'
    'info:Display detailed torrent information'

    'list:List torrents'
    'ls:List torrents'

    'magnet:Display torrent(s) magnet URI'
    'uri:Display torrent(s) magnet URI'

    'move:Change torrents location'
    'mv:Change torrents location'

    'remove:Remove torrents'
    'rm:Remove torrents'
    'delete:Remove torrents'

    'rename:Rename a torrent or one of its files or directories'
    'rn:Rename a torrent or one of its files or directories'

    'start:Start downloading torrents'

    'stop:Stop downloading torrents'
    'pause:Stop downloading torrents'

    'verify:Verify downloaded torrent data'
    'check:Verify downloaded torrent data'

    'announce:Announce torrents to their trackers now if possible'
    'an:Announce torrents to their trackers now if possible'

    'tracker:Add/Remove trackers to/from torrents'
    'trk:Add/Remove trackers to/from torrents'

    'trackerlist:List tracker(s) of torrent(s)'
    'trkls:List tracker(s) of torrent(s)'
    'lstrk:List tracker(s) of torrent(s)'
  )
  _describe -t stig-commands "command" subcommands
  _stig_tui_cmds
}

_stig () {
    local curcontext="$curcontext" state line context
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    # --debug MODULES      Log debug messages from comma-separated list of MODULES (e.g. "client,commands.tui")
    # --debug-file FILE    Log debug messages to FILE
    # --profile-file FILE  Write cProfile statistics to FILE
    _arguments "${_arguments_options[@]}" \
        {-v,--version}'[Display version number and exit]' \
        {-t,--tui}'[Enforce the TUI]' \
        {-T,--notui,--no-tui}'[Inhibit the TUI]' \
        {-C,--norcfile,--no-rc-file}'[Do not run commands from any rc file]' \
        '-c[Run commands from FILE upon startup]:CONFIG:_files' \
        '--rcfile=[Run commands from FILE upon startup]:CONFIG:_files' \
        '--rc-file[Run commands from FILE upon startup]:CONFIG:_files' \
        '-h[Display help about TOPIC]:TOPIC:_stig_topics' \
        '--help=[Display help about TOPIC]:TOPIC:_stig_topics' \
        ":: :_stig_commands" \
        "*::: :->stig" \
        && ret=0

  case $state in
    (stig)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:stig-command-$line[1]:"
      case $line[1] in
        (help|man)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            ":: :_stig_topics" \
            && ret=0
        ;;
        (dump)
          _arguments "${_arguments_options[@]}" \
              {-h,--help}'[Display help about the subcommand]' \
              {-v,--version}'[Overwrite FILE if it exists]' \
              '*::Configuration:_files' \
              && ret=0
        ;;
        (ratelimit|rate|rl)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-q,--quiet}'[Do not show new bandwidth rate(s)]' \
            ':Any combination of "up", "down" or "dn" separated by a comma:(up down dn)' \
            ':Maximum allowed transfer rate (see "help srv.limit.rate.up" for the syntax):' \
            '*::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (rc|source)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            ':Path to RC file:_files' \
            && ret=0
        ;;
        (reset)
          _arguments "${_arguments_options[@]}" \
            '*::Name of setting to reset:_stig_settings' \
            && ret=0
        ;;
        (set)
          _arguments "${_arguments_options[@]}" \
            '*::Name of setting to set:_stig_settings' \
            && ret=0
        ;;
        # TODO: fix the -c not registering because of above
        (filelist|fls|lsf)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '-c[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_filelist_cols' \
            '--columns=[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_filelist_cols' \
            '1::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            '::Torrent names:_stig_torrents' \
            '::File filter expression (see FILE FILTERS section in "help filters"):_stig_file_filters' \
            && ret=0
        ;;
        (priority|prio)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '1::File priority:(low normal high o l n h 0 - = +)' \
            '2::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            '*::File filter expression (see FILE FILTERS section in "help filters"):_stig_file_filters' \
            && ret=0
        ;;
        (log)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            ":: :_stig_log_cmds" \
            && ret=0

          [[ "$line[2]" = "scroll" ]] && {
            typeset -a scroll; scroll=(
              up down "page up", "page down", top bottom
            )
            _describe -t scroll-cmds "scroll options" scroll
          }
        ;;
        (version)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;

        (peerlist|pls|lsp)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '-s+[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_peerlist_sort' \
            '--sort=[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_peerlist_sort' \
            '-c+[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_peerlist_cols' \
            '--columns=[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_peerlist_cols' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            '::Peer filter expression (see PEER FILTERS section in "help filters"):_stig_peer_filters' \
            && ret=0
        ;;
        (add|download|get)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-s,--stopped}'[Do not start downloading the added torrent(s)]' \
            '-p+[Custom download directory for added torrent(s) relative to "srv.path.complete"]:_files' \
            '--path=[Custom download directory for added torrent(s) relative to "srv.path.complete"]:_files' \
            '*::File to add:_files' \
            && ret=0
        ;;
        (details|info)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '::Torrent names:_stig_torrents' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (list|ls)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '-s+[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_list_sort' \
            '--sort=[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_list_sort' \
            '-c+[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_list_cols' \
            '--columns=[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_list_cols' \
            '*::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (magnet|uri)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '*::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (move|mv)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '::Torrent names:_stig_torrents' \
            '::Move the specified torrent(s) to this directory:_files' \
            && ret=0
        ;;
        (remove|rm|delete)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-d,--delete-files}'[Delete any downloaded files]' \
            {-f,--force}'[Remove all matching torrents instead of asking confirmation]' \
            '::Torrent names:_stig_torrents' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (rename|rn)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-u,--unique}'[Rename torrent so it is unique if name matches another]' \
            '::Torrent names:_stig_torrents' \
            '::New name of the torrent, file or directory specified by TORRENT:_files' \
            && ret=0
        ;;
        (start)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-f,--force}'[Ignore download queue]' \
            {-t,--toggle}'[Start TORRENT if stopped and vice versa]' \
            '::Torrent names:_stig_torrents' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (stop|pause)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-t,--toggle}'[Start TORRENT if stopped and vice versa]' \
            '::Torrent names:_stig_torrents' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (verify|check)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '::Torrent names:_stig_torrents' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (announce|an)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '*::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (tracker|trk)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '1::Tracker command:_stig_tracker_cmds' \
            '::Announce URL to add to or remove from matching torrents:_url' \
            '::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            && ret=0
        ;;
        (trackerlist|trkls|lstrk)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '-s+[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_trklist_sort' \
            '--sort=[Comma-separated list of sort orders (see SORT ORDERS section)]:SORT:_stig_trklist_sort' \
            '-c+[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_trklist_cols' \
            '--columns=[Comma-separated list of column names (see COLUMNS section)]:COLS:_stig_trklist_cols' \
            '1::Torrent filter expression (see TORRENT FILTERS section in "help filters"):_stig_torrent_filters' \
            '*::Tracker filter expression (see TRACKER FILTERS section in "help filters"):_stig_tracker_filters' \
            && ret=0
        ;;
        # TUI
        (tab)
        # TODO: could add case to repeat when running _stig_commands
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            {-b,--background}'[Do not focus new tab]' \
            {-C,--close-all}'[Close all tabs]' \
            '-c[Close focused or specified tab (see TAB IDENTIFIERS SECTION)]:' \
            '--close=[Close focused or specified tab (see TAB IDENTIFIERS SECTION)]:' \
            '-f[Focus specified tab (see TAB IDENTIFIERS SECTION)]:' \
            '--focus=[Focus specified tab (see TAB IDENTIFIERS SECTION)]:' \
            '-m[Move focused tab left, right or to absolute position]:' \
            '--move=[Move focused tab left, right or to absolute position]:' \
            '-t[Manually set tab title instead of generating one]:' \
            '--title=[Manually set tab title instead of generating one]:' \
            '::Command to run in TUI:_stig_commands' \
            && ret=0
        ;;
        (bind)
          # KEY
          # ACTION
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            '-c+[Where KEY is grabbed (see CONTEXTS section)]:' \
            '--context=[Where KEY is grabbed (see CONTEXTS section)]:' \
            '-d+[Explanation of what ACTION does]:' \
            '--description=[Explanation of what ACTION does]:' \
            && ret=0
        ;;
        (find)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (interactive)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (limit)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (mark)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (quit)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (setcommand)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (sort)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (tui)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (unbind)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        (unmark)
          _arguments "${_arguments_options[@]}" \
            {-h,--help}'[Display help about the subcommand]' \
            && ret=0
        ;;
        esac
  esac
}

_stig "$@"
