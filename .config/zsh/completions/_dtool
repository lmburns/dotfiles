#compdef dtool

#===========================================================================
#    @author: Lucas Burns <burnsac@me.com> [lmburns]                       #
#   @created: 2023-07-17                                                   #
#===========================================================================

autoload -U is-at-least

(( $+functions[_dtool_commands] )) ||
_dtool_commands() {
  local -a commands; commands=(
    "h2s:Convert hex to UTF-8 string"
    "s2h:Convert UTF-8 string to hex"
    "h2b:Convert hex to binary"
    "b2h:Convert binary to hex"
    "h2a:Convert hex to byte array"
    "a2h:Convert byte array to hex"
    "ts2d:Convert timestamp to date"
    "d2ts:Convert date to timestamp"
    "ns:Number system"
    "h2b58:Convert hex to base58"
    "h2b58c:Convert hex to base58 check"
    "b582h:Convert base58 to hex"
    "b58c2h:Convert base58 check to hex"
    "h2b64:Convert hex to base64"
    "b642h:Convert base64 to hex"
    "ue:URL encode"
    "ud:URL decode"
    "ne:Number encode"
    "nd:Number decode"
    "hash:Hex to hash"
    "s2u:UTF-8 string to unicode"
    "u2s:Unicode to UTF-8 string"
    "he:HTML entity encode"
    "hd:HTML entity decode"
    "re:Regex match"
    "pbkdf2:Pbkdf2"
    "case:Case conversion"
    "aes_enc:AES encrypt"
    "aes_dec:AES decrypt"
    "ec_gk:Elliptic-curve generate key pair (Secret key, Public key)"
    "ec_sign:Elliptic-curve sign"
    "ec_verify:Elliptic-curve verify"
    "ec_pk:Elliptic-curve calculate public key"
    "sm4_enc:SM4 encrypt"
    "sm4_dec:SM4 decrypt"
    "ed_gk:EdDSA generate key pair (Mini secret key, Public key)"
    "ed_sign:EdDSA sign"
    "ed_verify:EdDSA verify"
    "ed_pk:EdDSA calculate public key"
    "sr_gk:sr25519 generate key pair (Mini secret key, Public key)"
    "sr_sign:sr25519 sign"
    "sr_verify:sr25519 verify"
    "sr_sk:sr25519 calculate secret key from mini secret key"
    "sr_pk:sr25519 calculate public key"
    "usage:Show usage"
    "completion:Generate completion"
    "help:Prints this message or the help of the given subcommand(s)"
  )
  _describe -t commands 'dtool commands' commands "$@"
}

_dtool() {
  local curcontext="$curcontext"
  local -a context line state state_descr
  local -A opt_args
  local -a argopts arghelp arguments
  integer ret=1

  if is-at-least 5.2; then
    argopts=(-s -S -C)
  else
    argopts=(-s -C)
  fi

  arghelp=(
    {-h,--help}'[Prints help information]'
    {-V,--version}'[Prints version information]'
  )
  arguments=(
    "$arghelp[@]"
    ":: :_dtool_commands"
    "*::: :->dtool"
  )

  _arguments "$argopts[@]" "$arguments[@]" && ret=0

  case $state in
    (dtool)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:dtool-command-$line[1]:"
      case $line[1] in
        (h2s)
          # Convert hex to UTF-8 string
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (s2h)
          # Convert UTF-8 string to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':utf-8 string:' \
            && ret=0
          ;;
        (h2b)
        # Convert hex to binary
          _arguments "$argopts[@]" "$arguments[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (b2h)
        # Convert binary to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':binary number:' \
            && ret=0
          ;;
        (h2a)
        # Convert hex to byte array
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (a2h)
        # Convert byte array to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':byte array:' \
            && ret=0
          ;;
        (ts2d)
        # Convert timestamp to date
        # 2019-12-23T17:48:54+08:00
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-z+,--timezone}'[Time zone 8: CN 0: UK etc]:timezone:_time_zone' \
            ':timestamp: _dates -f %FT%T%z' \
            && ret=0
          ;;
        (d2ts)
        # Convert date to timestamp
        # Mon, 23 Dec 2019 17:41:26 +0800
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-z+,--timezone}'[Time zone 8: CN 0: UK etc]:timezone:_time_zone' \
            ':date: _dates -f "%a, %d %b %Y %T %z"' \
            && ret=0
          ;;
        (ns)
          # Number system
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-d,--decimal}'[Output decimal result]' \
            {-b,--binary}'[Output binary result]' \
            {-o,--octal}'[Output octal result]' \
            {-x,--hexadecimal}'[Output hexadecimal result]' \
            && ret=0
          ;;
        (h2b58)
        # Convert hex to base58
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (h2b58c)
        # Convert hex to base58 check
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (b582h)
        # Convert base58 to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':base58 number:' \
            && ret=0
          ;;
        (b58c2h)
        # Convert base58 check to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':base58 check:' \
            && ret=0
          ;;
        (h2b64)
        # Convert hex to base64
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':hex number:' \
            && ret=0
          ;;
        (b642h)
        # Convert base64 to hex
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':base64 number:' \
            && ret=0
          ;;
        (ue)
        # URL encode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':url:_urls' \
            && ret=0
          ;;
        (ud)
        # URL decode
        # URL encode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':url:_urls' \
            && ret=0
          ;;
        (ne)
        # Number encode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-t+,--type=}'[Number type]:type:(u8 u16 u32 u64 u128 c)' \
            ':number:' \
            && ret=0
          ;;
        (nd)
        # Number decode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-t+,--type=}'[Number type]:type:(u8 u16 u32 u64 u128 c)' \
            ':input:_files' \
            && ret=0
          ;;
        (hash)
        # Hex to hash
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-a+,--algo=}'[Hash algorithm]:algorithm:((
                md5\:"MD5"
                sha1\:"SHA-1"
                sha2_224\:"SHA-2 224"
                sha2_256\:"SHA-2 256"
                sha2_384\:"SHA-2 384"
                sha2_512\:"SHA-2 512"
                sha2_512_224\:"SHA-2 512 truncate 224"
                sha2_512_256\:"SHA-2 512 truncate 256"
                sha3_224\:"SHA-3 224"
                sha3_256\:"SHA-3 256"
                sha3_384\:"SHA-3 384"
                sha3_512\:"SHA-3 512"
                sha3_k_224\:"SHA-3 keccak 224"
                sha3_k_256\:"SHA-3 keccak 256"
                sha3_k_384\:"SHA-3 keccak 384"
                sha3_k_512\:"SHA-3 keccak 512"
                ripemd_160\:"RIPEMD-160"
                crc_32\:"CRC32"
                blake2b_160\:"Blake2b 160"
                blake2b_256\:"Blake2b 256"
                blake2b_384\:"Blake2b 384"
                blake2b_512\:"Blake2b 512"
                sm3\:"Chinese National Standard SM3"
                twox\:"TwoX"
              ))' \
              {-k+,--key=}'[Key for Blake2b]:key:' \
              {-s+,--seed=} '-s+[Seed for twox]:seed:' \
            ':hex number:' \
            && ret=0
          ;;
        (s2u)
        # UTF-8 string to unicode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-f+,--format=}'[Format]:format:((
                default\:"\\u7c"
                html\:"&#x7c;"
                html_d\:"&#124;"
                rust:"\\u{7c}"
              ))' \
            ':utf-8 string:' \
            && ret=0
          ;;
        (u2s)
        # Unicode to UTF-8 string
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':unicode:' \
            && ret=0
          ;;
        (he)
        # HTML entity encode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':html entity:' \
            && ret=0
          ;;
        (hd)
        # HTML entity decode
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':html entity:' \
            && ret=0
          ;;
        (re)
        # Regex match
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-p+,--pattern=}'[Regex pattern]:pattern:' \
            ':regex:' \
            && ret=0
          ;;
        (pbkdf2)
        # Pbkdf2
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-i+,--iterations=}'[Iterations]:number of iters' \
            {-a+,--algorithm=}'[Algorithm]:algorithm:((
              sha1\:"SHA-1"
              sha2_256\:"SHA-2 256"
              sha2_384\:"SHA-2 384"
              sha2_512\:"SHA-2 512"
            ))' \
            {-s+,--salt=}'[Salt (Hex)]:salt:' \
            {-l+,--key-length=}'[Key length: must be a multiple of 8]:length:' \
            ':pbkdf2:' \
            && ret=0
          ;;
        ("case")
        # Case conversion
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-t+,--type=}'[Case type]:case type:((
              upper\:"GOOD TOOL"
              lower\:"good tool"
              title\:"Good Tool"
              camel\:"goodTool"
              pascal\:"GoodTool"
              snake\:"good_tool"
              shouty_snake\:"GOOD_TOOL"
              kebab\:"good-tool"
              sarcasm\:"gOoD tOoL"
            ))' \
            ':string for case:' \
            && ret=0
          ;;
        (aes_enc)
        # AES encrypt
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mode=}'[Mode]:mode:((
              ecb\:"ECB"
              cbc\:"CBC"
              ctr\:"CTR"
            ))' \
            {-k+,--key=}'[Key (Hex)]:key:' \
            {-i+,--iv=}'[IV (Hex)]:iv:' \
            ':cipher (hex) aes_encrypt:' \
            && ret=0
          ;;
      (aes_dec)
      # AES decrypt
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mode=}'[Mode]:mode:((
              ecb\:"ECB"
              cbc\:"CBC"
              ctr\:"CTR"
            ))' \
            {-k+,--key=}'[Key (Hex)]:key:' \
            {-i+,--iv=}'[IV (Hex)]:iv:' \
            ':cipher (hex) aes_dec:' \
            && ret=0
          ;;
        (ec_gk)
        # Elliptic-curve generate key pair (Secret key, Public key)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-c+,--curve=}'[Curve]:kind:((
              secp256k1\:"Secp256k1"
              p256\:"NIST P-256"
              p384\:"NIST P-384"
              sm2\:"Chinese National Standard SM2"
            ))' \
            {-C,--compress}'[Compress]' \
            ':elliptic curve generate:' \
            && ret=0
          ;;
        (ec_sign)
        # Elliptic-curve sign
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-c+,--curve=}'[Curve]:kind:((
              secp256k1\:"Secp256k1"
              p256\:"NIST P-256"
              p384\:"NIST P-384"
              sm2\:"Chinese National Standard SM2"
            ))' \
            {-s+,--secret-key=}'[Secret key (Private key, Hex)]:key:_files' \
            {-f+,--sig-form=}'[Signature form]:form:((
              der\:"ASN1 DER"
              fixed\:"Fixed"
            ))' \
            ':input message (hex):_files' \
            && ret=0
          ;;
        (ec_verify)
        # Elliptic-curve verify
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-c+,--curve=}'[Curve]:kind:((
              secp256k1\:"Secp256k1"
              p256\:"NIST P-256"
              p384\:"NIST P-384"
              sm2\:"Chinese National Standard SM2"
            ))' \
            {-p+,--public-key=}'[Public key (Hex)]:key:_files' \
            {-S+,--sig=}'[Signature (Hex)]:signature:_files' \
            {-f+,--sig-form=}'[Signature form]:form:((
              der\:"ASN1 DER"
              fixed\:"Fixed"
            ))' \
            ':input:_files' \
            && ret=0
          ;;
        (ec_pk)
        # Elliptic-curve calculate public key
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-c+,--curve=}'[Curve]:kind:((
              secp256k1\:"Secp256k1"
              p256\:"NIST P-256"
              p384\:"NIST P-384"
              sm2\:"Chinese National Standard SM2"
            ))' \
            {-s+,--secret-key=}'[Secret key (Private key, Hex)]:key:_files' \
            {-C,--compress}'[Compress]' \
            ':input:_files' \
            && ret=0
          ;;
        (sm4_enc)
        # SM4 encrypt
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mode=}'[Mode]:mode:(ctr)' \
            {-k+,--key=}'[Key (Hex)]:key:' \
            {-i+,--iv=}'[IV (Hex)]:iv:' \
            ':input (cipher):_files' \
            && ret=0
          ;;
        (sm4_dec)
        # SM4 decrypt
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mode=}'[Mode]:mode:(ctr)' \
            {-k+,--key=}'[Key (Hex)]:key:' \
            {-i+,--iv=}'[IV (Hex)]:iv:' \
            ':input (cipher):_files' \
            && ret=0
          ;;
        (ed_gk)
        # EdDSA generate key pair (Mini secret key, Public key)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            && ret=0
          ;;
        (ed_sign)
        # EdDSA sign
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mini-secret-key=}'[Mini secret key (Mini private key, Hex)]:mini secret:_files' \
            ':input (message):_files' \
            && ret=0
          ;;
        (ed_verify)
        # EdDSA verify
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-p+,--public-key=}'[Public key (Hex)]:pub key:_files' \
            {-S+,--sig=}'[Signature (Hex)]:signature:_files' \
            ':input (message):_files' \
            && ret=0
          ;;
        (ed_pk)
        # EdDSA calculate public key
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mini-secret-key=}'[Mini secret key (Mini private key, Hex)]:mini secret:_files' \
            ':input:_files' \
            && ret=0
          ;;
        (sr_gk)
        # sr25519 generate key pair (Mini secret key, Public key)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            && ret=0
          ;;
        (sr_sign)
        # sr25519 sign
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mini-secret-key=}'[Mini secret key (Mini private key, Hex)]:secret key:_files' \
            {-s+,--secret-key=}'[Secret key (Private key, Hex)]:secret key:_files' \
            ':input:_files' \
            && ret=0
          ;;
        (sr_verify)
        # sr25519 verify
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-p+,--public-key=}'[Public key (Hex)]:pub key:_files' \
            {-S+,--sig=}'[Signature (Hex)]:signature:_files' \
            ':input:_files' \
            && ret=0
          ;;
        (sr_sk)
        # sr25519 calculate secret key from mini secret key
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mini-secret-key=}'[Mini secret key (Mini private key, Hex)]:secret key:_files' \
            ':input:_files' \
            && ret=0
          ;;
        (sr_pk)
        # sr25519 calculate public key
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-m+,--mini-secret-key=}'[Mini secret key (Mini private key, Hex)]:secret key:_files' \
            {-s+,--secret-key=}'[Secret key (Private key, Hex)]:secret key:_files' \
            ':input:_files' \
            && ret=0
          ;;
        (usage)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-f+,--format=}'[Output format]:format:((
              <default>\:"term table format"
              markdown\:"markdown format"
              plain\:"term plain format"
            ))' \
            {-s+,--search=}'[unsure]:search:' \
            ':input:_files' \
            && ret=0
          ;;
        (completion)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            {-s+,--shell=}'[Shell]: :(zsh bash fish powershell elvish)' \
            ':input:_files' \
            && ret=0
          ;;
        (help)
          _arguments "$argopts[@]" "$arguments[@]" \
            "$arghelp[@]" \
            ':input:_files' \
            && ret=0
          ;;
        esac
    ;;
esac
}

_dtool "$@"
