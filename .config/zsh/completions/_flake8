#compdef flake8

# zsh completions for 'flake8'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  {-h,--help}'[show this help message and exit]'
  {-v,--verbose}'[print more information about what is happening in]'
  '--output-file[redirect report to a file.]'
  '--append-config[provide extra config files to parse in addition to the]'
  '--config[path to the config file that will be the authoritative]'
  '--isolated[ignore all configuration files.]'
  '--enable-extensions[enable plugins and extensions that are otherwise]'
  '--require-plugins[require specific plugins to be installed before]'
  '--version[show programs version number and exit]'
  {-q,--quiet}'[report only file names, or nothing. This option is]'
  '--color[always,never}]'
  '--count[print total number of errors to standard output after]'
  '--exclude[comma-separated list of files or directories to]'
  '--extend-exclude[comma-separated list of files or directories to add to]'
  '--filename[only check for filenames matching the patterns in this]'
  '--stdin-display-name[the name used when reporting errors from code passed]'
  '--format[format errors according to the chosen formatter]'
  '--hang-closing[hang closing bracket instead of matching indentation]'
  '--ignore[comma-separated list of error codes to ignore (or]'
  '--extend-ignore[comma-separated list of error codes to add to the list]'
  '--per-file-ignores[A pairing of filenames and violation codes that]'
  '--max-line-length[maximum allowed line length for the entirety of this]'
  '--max-doc-length[maximum allowed doc line length for the entirety of]'
  '--indent-size[number of spaces used for indentation (Default: 4)]'
  '--select[comma-separated list of error codes to enable. For]'
  '--extend-select[comma-separated list of error codes to add to the list]'
  '--disable-noqa[disable the effect of "# noqa". This will report]'
  '--show-source[show the source generate each error or warning.]'
  '--no-show-source[negate --show-source]'
  '--statistics[count errors.]'
  '--exit-zero[exit with status code "0" even if there are errors.]'
  {-j,--jobs}'[number of subprocesses to use to run checks in]'
  '--tee[write to stdout and output-file.]'
  '--benchmark[print benchmark information about this run of Flake8]'
  '--bug-report[print information necessary when preparing a bug]'
  '--suppress-none-returning[suppress ANN200-level errors for functions that]'
  '--suppress-dummy-args[suppress ANN000-level errors for dummy arguments]'
  '--allow-untyped-defs[suppress all errors for dynamically typed functions.]'
  '--allow-untyped-nested[suppress all errors for dynamically typed nested]'
  '--mypy-init-return[allow omission of a return type hint for __init__ if]'
  '--dispatch-decorators[comma-separated list of decorators flake8-annotations]'
  '--overload-decorators[comma-separated list of decorators flake8-annotations]'
  '--allow-star-arg-any[suppress ANN401 for dynamically typed *args and]'
  '--extend-immutable-calls[skip B008 test for additional immutable calls.]'
  '--builtins-ignorelist[A comma separated list of builtins to skip checking]'
  '--enable-extra-whitelist[]'
  '--no-pyi-aware-file-checker[dont patch flake8 with .pyi-aware file checker]'
  '--type-checking-exempt-modules[skip TC001, TC002, and TC003 checks for specified]'
  '--type-checking-strict[flag individual imports rather than looking at the]'
  '--type-checking-pydantic-enabled[prevent flagging of annotations for class definitions.]'
  '--type-checking-pydantic-enabled-baseclass-passlist[names of base classes to not treat as pydantic models.]'
  '--type-checking-fastapi-enabled[prevent flagging of annotations for decorated]'
  '--type-checking-fastapi-dependency-support-enabled[prevent flagging of annotations for any function.]'
  '--type-checking-cattrs-enabled[prevent flagging of annotations on attrs class]'
  '--max-complexity[mcCabe complexity threshold]'
  '--builtins[define more built-ins, comma separated]'
  '--doctests[also check syntax of the doctests]'
  '--include-in-doctest[run doctests only on these files]'
  '--exclude-from-doctest[skip these files when running doctests]'
  '*:filename:_files'
)

_arguments -s $arguments
