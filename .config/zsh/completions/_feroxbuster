#compdef feroxbuster

# zsh completions for 'feroxbuster'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  {-h,--help}'[print help (see a summary with -h)]'
  {-V,--version}'[print version]'
  {-u,--url}'[the target URL (required, unless \[--stdin || --resume-from\] used)]'
  '--stdin[read url(s) from STDIN]'
  '--resume-from[state file from which to resume a partially complete scan (ex. --resume-from]'
  '--burp[set --proxy to http://127.0.0.1:8080 and set --insecure to true]'
  '--burp-replay[set --replay-proxy to http://127.0.0.1:8080 and set --insecure to true]'
  '--smart[set --auto-tune, --collect-words, and --collect-backups to true]'
  '--thorough[use the same settings as --smart and set --collect-extensions to true]'
  {-p,--proxy}'[proxy to use for requests (ex: http(s)://host:port, socks5(h)://host:port)]'
  {-P,--replay-proxy}'[send only unfiltered requests through a Replay Proxy, instead of all requests]'
  {-R,--replay-codes}'[...]'
  {-a,--user-agent}'[sets the User-Agent (default: feroxbuster/2.10.1)]'
  {-A,--random-agent}'[use a random User-Agent]'
  {-x,--extensions}'[...]'
  {-m,--methods}'[...]'
  '--data[requests Body; can read data from a file if input starts with an @ (ex: @post.bin)]'
  {-H,--headers}'[...]'
  {-b,--cookies}'[...]'
  {-Q,--query}'[...]'
  {-f,--add-slash}'[append / to each requests URL]'
  '--dont-scan[...]'
  {-S,--filter-size}'[...]'
  {-X,--filter-regex}'[...]'
  {-W,--filter-words}'[...]'
  {-N,--filter-lines}'[...]'
  {-C,--filter-status}'[...]'
  '--filter-similar-to[...]'
  {-s,--status-codes}'[...]'
  {-T,--timeout}'[number of seconds before a clients request times out (default: 7)]'
  {-r,--redirects}'[allow client to follow redirects]'
  {-k,--insecure}'[disables TLS certificate validation in the client]'
  '--server-certs[...]'
  '--client-cert[add a PEM encoded certificate for mutual authentication (mTLS)]'
  '--client-key[add a PEM encoded private key for mutual authentication (mTLS)]'
  {-t,--threads}'[number of concurrent threads (default: 50)]'
  {-n,--no-recursion}'[do not scan recursively]'
  {-d,--depth}'[maximum recursion depth, a depth of 0 is infinite recursion (default: 4)]'
  '--force-recursion[force recursion attempts on all found endpoints (still respects recursion depth)]'
  '--dont-extract-links[dont extract links from response body (html, javascript, etc...)]'
  {-L,--scan-limit}'[limit total number of concurrent scans (default: 0, i.e. no limit)]'
  '--parallel[run parallel feroxbuster instances (one child process per url passed via stdin)]'
  '--rate-limit[limit number of requests per second (per directory) (default: 0, i.e. no limit)]'
  '--time-limit[limit total run time of all scans (ex: --time-limit 10m)]'
  {-w,--wordlist}'[path or URL of the wordlist]'
  '--auto-tune[automatically lower scan rate when an excessive amount of errors are encountered]'
  '--auto-bail[automatically stop scanning when an excessive amount of errors are encountered]'
  {-D,--dont-filter}'[dont auto-filter wildcard responses]'
  {-E,--collect-extensions}'[automatically discover extensions and add them to --extensions (unless theyre in]'
  '--dont-collect[)]'
  {-B,--collect-backups}'[automatically request likely backup extensions for "found" urls]'
  {-g,--collect-words}'[automatically discover important words from within responses and add them to the wordlist]'
  {-I,--dont-collect}'[...]'
  '--collect-extensions[)]'
  {-v,--verbosity}'[...]'
  '--silent[only print URLs + turn off logging (good for piping a list of urls to other commands)]'
  {-q,--quiet}'[hide progress bars and banner (good for tmux windows w/ notifications)]'
  '--json[emit JSON logs to --output and --debug-log instead of normal text]'
  {-o,--output}'[output file to write results to (use w/ --json for JSON entries)]'
  '--debug-log[output file to write log entries (use w/ --json for JSON entries)]'
  '--no-state[disable state output file (*.state)]'
  {-U,--update}'[update feroxbuster to the latest version]'
  '-o[]'
  '--insecure[]'
  '*:filename:_files'
)

_arguments -s $arguments
