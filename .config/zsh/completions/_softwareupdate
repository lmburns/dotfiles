#compdef softwareupdate

_softwareupdate_ignored_update_name() {
  if [[ -z "$_softwareupdate_ignored_updates" ]]; then
    local res="$(_call_program pkgs softwareupdate --ignored)"
    _softwareupdate_ignored_updates=("${(Qs/, /)${${res#Current ignored updates: \(}%\)}}")
  fi
  if (( ${#_softwareupdate_ignored_updates} > 0 )); then
    _wanted pkgs expl "ignored package" compadd -a _softwareupdate_ignored_updates && return 0
  fi
  return 1
}

_softwareupdate_update_name() {
  local name line
  if [[ -z "$_softwareupdate_updates" ]]; then
    _softwareupdate_updates=()
    for line in ${(f)"$(_call_program pkgs softwareupdate --list)"}; do
      if [[ $line == '   '* ]]; then
        name="${line#   ? }"
      elif [[ -n "$name" ]]; then
        _softwareupdate_updates+=("$name:${line#	}")
        name=""
      fi
    done
  fi
  if (( ${#_softwareupdate_updates} > 0 )); then
    _describe -t pkgs "update name" _softwareupdate_updates && return 0
  fi
  return 1
}

_softwareupdate() {
  local context state line expl
  typeset -A opt_args

  _arguments -R \
    '(-h --help -l --list)-q[quiet mode]' \
    {-l,--list}'[list all available updates]:*:' \
    {-d,--download}'[download to directory set in InternetConfig]:*:' \
    {-e,--cancel-download}'[cancel a download]' \
    '--background[trigger a background scan and update operation]' \
    {-i,--install}'[install (requires root)]:*: :->install' \
    '--ignored[show or manage ignored updates list (per-user)]:*:: :->ignored' \
    '--reset-ignored[clear all ignored updates]' \
    '--fetch-full-installer[install the latest macOS Installer]:*: :->fetch' \
    '--history[show the install history]:*: :->history' \
    '--schedule[scheduler preferences (per-user)]:automatic checking:(on off)' \
    {-h,--help}'[print command usage]:*:' && return 0

  case "$state" in
    install)
      _arguments \
        '(* -a --all)'{-a,--all}'[all available active updates]' \
        '(* -r --req)'{-r,--req}'[all required active updates]' \
        '(* -R --restart)'{-R,--restart}'[automatically restart (or shut down) if required to complete installation]' \
        '*:update name:_softwareupdate_update_name' && return 0
      ;;
    ignored)
      local -a ignored_subcmd
      ignored_subcmd=(add remove)

      if (( CURRENT == 1 )); then
        _describe -t commands "subcommands" ignored_subcmd && return 0
      fi
      case $words[1] in
        add)
          _softwareupdate_update_name && return 0
          ;;
        remove)
          _arguments \
            '(* -a --all)'{-a,--all}'[all available active updates]' \
            '*:update name:_softwareupdate_ignored_update_name' && return 0
          ;;
      esac
      ;;
    fetch)
      _arguments \
        '--full-installer-version[the version of macOS to install]:installer version:(10.13.6 10.14.6 10.15.3)' \
        && return 0
      ;;
    history)
      _arguments \
        '--all[include all processes in history (including App installs)]' \
      && return 0
      ;;
  esac
  return 1
}

_softwareupdate "$@"
