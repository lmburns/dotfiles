#compdef ugrep ug

# zsh completions for 'ugrep'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  {-A,--after-context}'[output NUM lines of trailing context after matching lines.  Places]'
  {-a,--text}'[process a binary file as if it were text.  This is equivalent to]'
  '--and[PATTERN ... -e PATTERN]'
  '--stats[the search patterns applied.  See also options]'
  {--not,--andnot,--bool,--files,--lines}'[.]'
  '--andnot[PATTERN]'
  {-B,--before-context}'[output NUM lines of leading context before matching lines.  Places]'
  {-b,--byte-offset}'[the offset in bytes of a matched line is displayed in front of the]'
  '--binary-files[controls searching and reporting pattern matches in binary files.]'
  '--bool[-%]'
  {--andnot,--not,--files,--lines}'[.]'
  '--break[adds a line break between results from different files.  This]'
  {-C,--context}'[output NUM lines of leading and trailing context surrounding each]'
  {-c,--count}'[only a count of selected lines is written to standard output.]'
  '--tree[specified, outputs directories in a tree-like format.]'
  {--color,--colour}'[mark up the matching text with the expression stored in the]'
  {--colors,--colours}'[use COLORS to mark up text.  COLORS is a colon-separated list of]'
  {--config,---}'[use configuration FILE.  The default FILE is `.ugrep.  The working]'
  '--confirm[confirm actions in -Q query mode.  The default is confirm.]'
  '--cpp[output file matches in C++.  See also options --format and -u.]'
  '--csv[output file matches in CSV.  If -H, -n, -k, or -b is specified]'
  {-D,--devices}'[if an input file is a device, FIFO or socket, use ACTION to process]'
  {-d,--directories}'[if an input file is a directory, use ACTION to process it.  By]'
  '--depth[\]\[MAX\], -1, -2, -3, ... -9, --10, --11, --12, ...]'
  '--dotall[dot `. in regular expressions matches anything, including newline.]'
  {-E,--extended-regexp}'[interpret patterns as extended regular expressions (EREs). This is]'
  {-e,--regexp}'[specify a PATTERN used during the search of the input: an input]'
  '--encoding[the encoding format of the input.  The default ENCODING is binary]'
  '--exclude[skip files whose name matches GLOB using wildcard matching, same as]'
  '-g[.  GLOB can use **, *, ?, and \[...\] as wildcards and \ to]'
  '--exclude-dir[exclude directories whose name matches GLOB from recursive]'
  '--exclude-from[read the globs from FILE and skip files and directories whose name]'
  '--exclude-fs[exclude file systems specified by MOUNTS from recursive searches]'
  {-F,--fixed-strings}'[interpret pattern as a set of fixed strings, separated by newlines]'
  {-f,--file}'[read newline-separated patterns from FILE.  White space in patterns]'
  '--filter[filter files through the specified COMMANDS first before searching.]'
  '--filter-magic-label[+\]LABEL:MAGIC]'
  '--format[output FORMAT-formatted matches.  For example --format=%f:%n:%O%~]'
  '--free-space[spacing (blanks and tabs) in regular expressions are ignored.]'
  {-G,--basic-regexp}'[interpret patterns as basic regular expressions (BREs), i.e. make]'
  {-g,--glob}'[search only files whose name matches the specified comma-separated]'
  '--include-dir[ and --exclude-dir=glob.  A leading `/]'
  '--group-separator[use SEP as a group separator for context options -A, -B and -C.]'
  {-H,--with-filename}'[always print the filename with output lines.  This is the default]'
  {-h,--no-filename}'[never print filenames with output lines.  This is the default]'
  '--heading[-+]'
  '--help[-? \[WHAT\]]'
  '--hexdump[1-8\]\[a\]\[bch\]\[A\[NUM\]\]\[B\[NUM\]\]\[C\[NUM\]\]\]]'
  '--hidden[-.]'
  '--hyperlink[+\]\]]'
  {-I,--ignore-binary}'[ignore matches in binary files.  This option is equivalent to the]'
  '--binary-files[option.]'
  {-i,--ignore-case}'[perform case insensitive matching.  By default, ugrep is case]'
  '--ignore-files[ignore files and directories matching the globs in each FILE that]'
  '--include[search only files whose name matches GLOB using wildcard matching]'
  '--include-dir[only directories whose name matches GLOB are included in recursive]'
  '--include-from[read the globs from FILE and search only files and directories]'
  '--include-fs[only file systems specified by MOUNTS are included in recursive]'
  '--include-fs[.  This option may be repeated.]'
  {-J,--jobs}'[specifies the number of threads spawned to search files.  By]'
  {-j,--smart-case}'[perform case insensitive matching like option -i, unless a pattern]'
  '--json[output file matches in JSON.  If -H, -n, -k, or -b is specified]'
  '-K[\]\[MAX\], --range=\[MIN,\]\[MAX\], --min-line=MIN, --max-line=MAX]'
  {-k,--column-number}'[the column number of a matched pattern is displayed in front of the]'
  {-L,--files-without-match}'[only the names of files not containing selected lines are written]'
  {-l,--files-with-matches}'[only the names of files containing selected lines are written to]'
  '--label[displays the LABEL value when input is read from standard input]'
  '--line-buffered[force output to be line buffered instead of block buffered.]'
  '--lines[apply Boolean queries to match lines, the opposite of --files.]'
  {-M,--file-magic}'[only files matching the signature pattern MAGIC are searched.  The]'
  '-m[\]\[MAX\], --min-count=MIN, --max-count=MAX]'
  '-cm1[(with a comma) counts non-zero matches.  See also option -K.]'
  '--match[match all input.  Same as specifying an empty pattern to search.]'
  '--max-files[restrict the number of files matched to NUM.  Note that --sort or]'
  '-J1[be specified to produce replicable results.  If --sort is]'
  '--mmap[use memory maps to search files.  By default, memory maps are used]'
  {-N,--neg-regexp}'[specify a negative PATTERN used during the search of the input: an]'
  {-n,--line-number}'[each output line is preceded by its relative line number in the]'
  '--no-group-separator[removes the group separator line from the output for context]'
  '--not[PATTERN]'
  {--andnot,--bool,--files,--lines}'[.]'
  {-O,--file-extension}'[search only files whose filename extensions match the specified]'
  '--exclude[*.ext.  This option may be repeated and may be combined]'
  {-o,--only-matching}'[output only the matching part of lines.  Output additional matches]'
  '--only-line-number[the line number of the matching line in the file is output without]'
  '--files[apply Boolean queries to match files, the opposite of --lines.  A]'
  {--andnot,-e}'[matches a file if some lines match `A and some lines]'
  {--bool,--lines}'[.]'
  {-P,--perl-regexp}'[interpret PATTERN as a Perl regular expression using PCRE2.]'
  {-p,--no-dereference}'[if -R or -r is specified, no symbolic links are followed, even when]'
  '--pager[when output is sent to the terminal, uses COMMAND to page through]'
  '--pretty[when output is sent to a terminal, enables --color, --heading, -n]'
  {--sort,--tree,-T}'[not explicitly disabled.]'
  {-Q,--query}'[query mode: user interface to perform interactive searches.  This]'
  '-Q[its argument DELAY.  Initial patterns may be specified with]'
  '-e[i.e. a PATTERN argument requires option -e.  Press F1]'
  '--heading[.  See also options --confirm and --view.]'
  {-q,--quiet,--silent}'[quiet mode: suppress all output.  ugrep will only search until a]'
  {-R,--dereference-recursive}'[recursively read all files under each directory.  Follow all]'
  {-r,--recursive}'[recursively read all files under each directory, following symbolic]'
  '--replace[replace matching patterns in the output by the specified FORMAT]'
  {-S,--dereference}'[if -r is specified, all symbolic links are followed, like -R.  The]'
  {-s,--no-messages}'[silent mode: nonexistent and unreadable files are ignored, i.e.]'
  '--save-config[save configuration FILE.  By default `.ugrep is saved.  If FILE is]'
  '--separator[use SEP as field separator between file name, line number, column]'
  '--sort[displays matching files in the order specified by KEY in recursive]'
  '--stats[output statistics on the number of files and directories searched]'
  {-T,--initial-tab}'[add a tab space to separate the file name, line number, column]'
  {-t,--file-type}'[search only files associated with TYPES, a comma-separated list of]'
  '-M[.  When a type is preceded by a `! or a `^, excludes files of]'
  '--tabs[set the tab size to NUM to expand tabs for option -k.  The value of]'
  '--tag[END\]\]]'
  '--tree[-^]'
  {-U,--binary}'[disables Unicode matching for binary file matching, forcing PATTERN]'
  {-u,--ungroup}'[do not group multiple pattern matches on the same matched line.]'
  {-V,--version}'[display version with linked libraries and exit.]'
  {-v,--invert-match}'[selected lines are those not matching any of the specified]'
  '--view[use COMMAND to view/edit a file in query mode when pressing CTRL-Y.]'
  {-W,--with-hex}'[output binary matches in hexadecimal, leaving text matches alone.]'
  {-w,--word-regexp}'[the PATTERN is searched for as a word, such that the matching text]'
  '--width[truncate the output to NUM visible characters per line.  The width]'
  {-X,--hex}'[output matches in hexadecimal.  This option is equivalent to the]'
  '--binary-files[option with --hexdump=2C.  To omit the matching]'
  {-x,--line-regexp}'[select only those matches that exactly match the whole line, as if]'
  '-f[patterns to allow -f FILE patterns to narrow or widen the]'
  '--xml[output file matches in XML.  If -H, -n, -k, or -b is specified]'
  {-Y,--empty}'[permits empty matches.  By default, empty matches are disabled]'
  {-y,--any-line,--passthru}'[any line is output (passthru).  Non-matching lines are output as]'
  '-Z[+-~\]\[MAX\], --fuzzy=\[best\]\[+-~\]\[MAX\]]'
  '-U[fuzzy matching to ASCII and bytes instead of Unicode]'
  {-z,--decompress}'[decompress files to search, when compressed.  Archives (.cpio]'
  {-O,-M}'[or -t is specified, searches files stored in archives whose]'
  '--zmax[when used with option -z (--decompress), searches the contents of]'
  {-0,--null}'[output a zero-byte (NUL) after the file name.  This option can be]'
  '*:filename:_files'
)

_arguments -s $arguments
