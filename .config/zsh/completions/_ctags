#compdef ctags

# zsh completions for 'ctags'
# automatically generated with http://github.com/RobSis/zsh-completion-generator
local arguments

arguments=(
  '--exclude[exclude files and directories matching <pattern>.]'
  '--exclude-exception[dont exclude files and directories matching <pattern> even if]'
  '--filter[(yes|no)\]]'
  '--filter-terminator[specify <string> to print to stdout following the tags for each file]'
  '--links[(yes|no)\]]'
  '--maxdepth[specify maximum recursion depth.]'
  '--recurse[(yes|no)\]]'
  '-R[equivalent to --recurse.]'
  '-L[A list of input file names is read from the specified <file>.]'
  '--append[(yes|no)\]]'
  '-a[append the tags to an existing tag file.]'
  '-f[write tags to specified <tagfile>. Value of "-" writes tags to stdout]'
  '-o[alternative for -f.]'
  '--format[1|2)]'
  '--output-format[)]'
  '-e[output tag file for use with Emacs.]'
  '-x[print a tabular cross reference file to standard output.]'
  '--sort[)]'
  '-u[equivalent to --sort=no.]'
  '--etags-include[include reference to <file> in Emacs-style tag file (requires -e).]'
  '--input-encoding[specify <encoding> of all input files.]'
  '--input-encoding-[<LANG>=<encoding>]'
  '--output-encoding[the <encoding> to write the tag file in. Defaults to UTF-8 if --input-encoding]'
  '--language-force[)]'
  '--languages[+|-\](<list>|all)]'
  '--alias-[<LANG>=\[+|-\](<pattern>|default)]'
  '--guess-language-eagerly[guess the language of input file more eagerly]'
  '-G[equivalent to --guess-language-eagerly.]'
  '--langmap[<map>\[...\]\]]'
  '--map-[<LANG>=\[+|-\]<extension>|<pattern>]'
  '--excmd[)]'
  '-n[equivalent to --excmd=number.]'
  '-N[equivalent to --excmd=pattern.]'
  '--extras[+|-\]\[<flags>|*\]]'
  '--extras-[(<LANG>|all)=\[+|-\]\[<flags>|*\]]'
  '--fields[+|-\]\[<flags>|*\]]'
  '--fields-[(<LANG>|all)=\[+|-\]\[<flags>|*\]]'
  '--kinds-[(<LANG>|all)=\[+|-\](<kinds>|*)]'
  '--pattern-length-limit[cutoff patterns of tag entries after <N> characters. Disable by setting to 0. \[96\]]'
  '--pseudo-tags[+|-\](<pseudo-tag>|*)]'
  '--put-field-prefix[put "UCTAGS" as prefix for the name of fields newly introduced in]'
  '--roles-[(<LANG>|all).(<kind>|all)=\[+|-\]\[<roles>|*\]]'
  '--tag-relative[)]'
  '-B[use backward searching patterns (?...?).]'
  '-F[use forward searching patterns (/.../; default).]'
  '--options[specify file (or directory) <pathname> from which command line options should be read.]'
  '--options-maybe[do the same as --options but this doesnt make an error for non-existing file.]'
  '--optlib-dir[+\]<directory>]'
  '--kinddef-[<LANG>=<letter>,<name>,<description>]'
  '--langdef[define a new language to be parsed with regular expressions.]'
  '--mline-regex-[<LANG>=/<line_pattern>/<name_pattern>/<kind-spec>/\[<flags>\]]'
  '--regex-[<LANG>=/<line_pattern>/<name_pattern>/<kind-spec>/\[<flags>\]]'
  '--if0[(yes|no)\]]'
  '--line-directives[(yes|no)\]]'
  '-D[<definition>]'
  '-h[)]'
  '-I[+|-\]<list>|@<file>]'
  '--param-[<LANG>:<name>=<argument>]'
  '--list-aliases[(<language>|all)\]]'
  '--list-excludes[output list of exclude patterns for excluding files/directories.]'
  '--list-extras[(<language>|all)\]]'
  '--list-features[output list of compiled features.]'
  '--list-fields[(<language>|all)\]]'
  '--list-kinds[(<language>|all)\]]'
  '--list-kinds-full[(<language>|all)\]]'
  '--list-languages[output list of supported languages.]'
  '--list-map-extensions[(<language>|all)\]]'
  '--list-map-patterns[(<language>|all)\]]'
  '--list-maps[(<language>|all)\]]'
  '--list-mline-regex-flags[output list of flags which can be used in a multiline regex parser definition.]'
  '--list-params[(<language>|all)\]]'
  '--list-pseudo-tags[output list of pseudo tags.]'
  '--list-regex-flags[output list of flags which can be used in a regex parser definition.]'
  '--list-roles[(<language>|all)\[.(<kindspecs>|*)\]\]]'
  '--list-subparsers[(<baselang>|all)\]]'
  '--machinable[(yes|no)\]]'
  '--list-[{aliases,extras,features,fields,kind-full,langdef-flags,params]'
  '--with-list-header[(yes|no)\]]'
  '--list-[{aliases,extras,features,fields,kind-full,langdef-flags,params]'
  '--help[print this option summary.]'
  '--help-full[print this option summary including experimental features.]'
  '--license[print details of software license.]'
  '--print-language[dont make tags file but just print the guessed language name for]'
  '--quiet[(yes|no)\]]'
  '--totals[(yes|no|extra)\]]'
  '--verbose[(yes|no)\]]'
  '--version[print version identifier to standard output.]'
  '-V[equivalent to --verbose.]'
  '*:filename:_files'
)

_arguments -s $arguments
