#compdef ruff

autoload -U is-at-least

_ruff() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_ruff_commands" \
"*::: :->ruff" \
&& ret=0
    case $state in
    (ruff)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ruff-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" \
'--format=[Output serialization format for violations]:FORMAT:(text json junit grouped github gitlab pylint)' \
'(--isolated)--config=[Path to the `pyproject.toml` or `ruff.toml` file to use for configuration]:CONFIG:_files' \
'*--select=[Comma-separated list of rule codes to enable (or ALL, to enable all rules)]:RULE_CODE: ' \
'*--ignore=[Comma-separated list of rule codes to disable]:RULE_CODE: ' \
'*--extend-select=[Like --select, but adds additional rule codes on top of the selected ones]:RULE_CODE: ' \
'*--extend-ignore=[Like --ignore. (Deprecated: You can just use --ignore instead.)]:RULE_CODE: ' \
'*--per-file-ignores=[List of mappings from file pattern to code to exclude]:PER_FILE_IGNORES: ' \
'*--exclude=[List of paths, used to omit files and/or directories from analysis]:FILE_PATTERN: ' \
'*--extend-exclude=[Like --exclude, but adds additional files and directories on top of those already excluded]:FILE_PATTERN: ' \
'*--fixable=[List of rule codes to treat as eligible for autofix. Only applicable when autofix itself is enabled (e.g., via `--fix`)]:RULE_CODE: ' \
'*--unfixable=[List of rule codes to treat as ineligible for autofix. Only applicable when autofix itself is enabled (e.g., via `--fix`)]:RULE_CODE: ' \
'--target-version=[The minimum Python version that should be supported]:TARGET_VERSION: ' \
'--line-length=[Set the line-length for length-associated rules and automatic formatting]:LINE_LENGTH: ' \
'--dummy-variable-rgx=[Regular expression matching the name of dummy variables]:DUMMY_VARIABLE_RGX: ' \
'--cache-dir=[Path to the cache directory]:CACHE_DIR:_files' \
'--stdin-filename=[The name of the file when passing it through stdin]:STDIN_FILENAME:_files' \
'--fix[Attempt to automatically fix lint violations]' \
'--no-fix[]' \
'--show-source[Show violations with source code]' \
'--no-show-source[]' \
'--show-fixes[Show an enumeration of all autofixed lint violations]' \
'--no-show-fixes[]' \
'(--show-fixes)--diff[Avoid writing any fixed files back; instead, output a diff for each changed file to stdout]' \
'-w[Run in watch mode by re-running whenever files change]' \
'--watch[Run in watch mode by re-running whenever files change]' \
'--fix-only[Fix any fixable lint violations, but don'\''t report on leftover violations. Implies `--fix`]' \
'--no-fix-only[]' \
'--respect-gitignore[Respect file exclusions via `.gitignore` and other standard ignore files]' \
'--no-respect-gitignore[]' \
'--force-exclude[Enforce exclusions, even for paths passed to Ruff directly on the command-line]' \
'--no-force-exclude[]' \
'-n[Disable cache reads]' \
'--no-cache[Disable cache reads]' \
'(--config)--isolated[Ignore all configuration files]' \
'(--exit-non-zero-on-fix)-e[Exit with status code "0", even upon detecting lint violations]' \
'(--exit-non-zero-on-fix)--exit-zero[Exit with status code "0", even upon detecting lint violations]' \
'(-e --exit-zero)--exit-non-zero-on-fix[Exit with a non-zero status code if any files were modified via autofix, even if no lint violations remain]' \
'--update-check[Does nothing and will be removed in the future]' \
'--no-update-check[]' \
'(--diff --show-source -w --watch)--statistics[Show counts for every rule with at least one violation]' \
'(--show-files --show-settings --statistics --stdin-filename -w --watch --fix)--add-noqa[Enable automatic additions of `noqa` directives to failing lines]' \
'(--add-noqa --show-settings --statistics --stdin-filename -w --watch)--show-files[See the files Ruff will be run against with the current settings]' \
'(--add-noqa --show-files --statistics --stdin-filename -w --watch)--show-settings[See the settings Ruff will use to lint a given Python file]' \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
'*::files -- List of files or directories to check:_files' \
&& ret=0
;;
(rule)
_arguments "${_arguments_options[@]}" \
'--format=[Output format]:FORMAT:(text json pretty)' \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
':rule:' \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
'::option:' \
&& ret=0
;;
(linter)
_arguments "${_arguments_options[@]}" \
'--format=[Output format]:FORMAT:(text json pretty)' \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(generate-shell-completion)
_arguments "${_arguments_options[@]}" \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-q[Print lint violations, but nothing else]' \
'--quiet[Print lint violations, but nothing else]' \
'-s[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'--silent[Disable all logging (but still exit with status code "1" upon detecting lint violations)]' \
'-h[Print help]' \
'--help[Print help]' \
':shell:(bash elvish fig fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_ruff__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:ruff-help-command-$line[1]:"
        case $line[1] in
            (check)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(rule)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(config)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(linter)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(clean)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(generate-shell-completion)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_ruff_commands] )) ||
_ruff_commands() {
    local commands; commands=(
'check:Run Ruff on the given files or directories (default)' \
'rule:Explain a rule' \
'config:List or describe the available configuration options' \
'linter:List all supported upstream linters' \
'clean:Clear any caches in the current directory and any subdirectories' \
'generate-shell-completion:Generate shell completion' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ruff commands' commands "$@"
}
(( $+functions[_ruff__check_commands] )) ||
_ruff__check_commands() {
    local commands; commands=()
    _describe -t commands 'ruff check commands' commands "$@"
}
(( $+functions[_ruff__help__check_commands] )) ||
_ruff__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help check commands' commands "$@"
}
(( $+functions[_ruff__clean_commands] )) ||
_ruff__clean_commands() {
    local commands; commands=()
    _describe -t commands 'ruff clean commands' commands "$@"
}
(( $+functions[_ruff__help__clean_commands] )) ||
_ruff__help__clean_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help clean commands' commands "$@"
}
(( $+functions[_ruff__config_commands] )) ||
_ruff__config_commands() {
    local commands; commands=()
    _describe -t commands 'ruff config commands' commands "$@"
}
(( $+functions[_ruff__help__config_commands] )) ||
_ruff__help__config_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help config commands' commands "$@"
}
(( $+functions[_ruff__generate-shell-completion_commands] )) ||
_ruff__generate-shell-completion_commands() {
    local commands; commands=()
    _describe -t commands 'ruff generate-shell-completion commands' commands "$@"
}
(( $+functions[_ruff__help__generate-shell-completion_commands] )) ||
_ruff__help__generate-shell-completion_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help generate-shell-completion commands' commands "$@"
}
(( $+functions[_ruff__help_commands] )) ||
_ruff__help_commands() {
    local commands; commands=(
'check:Run Ruff on the given files or directories (default)' \
'rule:Explain a rule' \
'config:List or describe the available configuration options' \
'linter:List all supported upstream linters' \
'clean:Clear any caches in the current directory and any subdirectories' \
'generate-shell-completion:Generate shell completion' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'ruff help commands' commands "$@"
}
(( $+functions[_ruff__help__help_commands] )) ||
_ruff__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help help commands' commands "$@"
}
(( $+functions[_ruff__help__linter_commands] )) ||
_ruff__help__linter_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help linter commands' commands "$@"
}
(( $+functions[_ruff__linter_commands] )) ||
_ruff__linter_commands() {
    local commands; commands=()
    _describe -t commands 'ruff linter commands' commands "$@"
}
(( $+functions[_ruff__help__rule_commands] )) ||
_ruff__help__rule_commands() {
    local commands; commands=()
    _describe -t commands 'ruff help rule commands' commands "$@"
}
(( $+functions[_ruff__rule_commands] )) ||
_ruff__rule_commands() {
    local commands; commands=()
    _describe -t commands 'ruff rule commands' commands "$@"
}

_ruff "$@"
