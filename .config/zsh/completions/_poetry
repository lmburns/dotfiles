#compdef poetry

autoload -U is-at-least

_poetry_commands() {
  typeset -a subcommands
  subcommands=(
    "about:Shows information about Poetry"
    "add:Adds a new dependency to pyproject.toml"
    "build:Builds a package, as a tarball and a wheel by default"
    "cache:Run a cache command"
    "check:Checks the validity of the pyproject.toml file"
    "config:Manages configuration settings"
    "debug:Run a debug command"
    "env:Run an env command"
    "export:Exports the lock file to alternative formats"
    "help:Displays help for a command"
    "init:Creates a basic pyproject.toml file in the current directory"
    "install:Installs the project dependencies"
    "list:Lists commands"
    "lock:Locks the project dependencies"
    "new:Creates a new Python project at <path>"
    "publish:Publishes a package to a remote repository"
    "remove:Removes a package from the project dependencies"
    "run:Runs a command in the appropriate environment"
    "search:Searches for packages on remote repositories"
    "self:Run a command on poetry"
    "shell:Spawns a shell within the virtual environment"
    "show:Shows information about packages"
    "source:Run a source command"
    "update:Update the dependencies as according to the pyproject.toml file"
    "version:Shows the version of the project or bumps it when a valid bump rule is provided"
  )
  _describe -t poetry-commands "command" subcommands
}

_poetry_self_cmds() {
  typeset -a self_cmds
  self_cmds=(
    "add:Add additional packages to Poetry's runtime environment"
    "install:Install locked packages (incl. addons) required by this Poetry installation"
    "lock:Lock the Poetry installation's system requirements"
    "remove:Remove additional packages from Poetry's runtime environment"
    "show:Show packages from Poetry's runtime environment"
    "update:Updates Poetry to the latest version"
  )
  _describe -t self-cmds "self commands" self_cmds
}

_poetry_self_show_cmds() {
  typeset -a self_show_cmds
  self_show_cmds=(
    'plugins:Shows information about the currently installed plugins'
  )
  _describe -t self-cmds "self commands" self_show_cmds
}


_poetry_cache_cmds() {
  typeset -a cache_cmds
  cache_cmds=(
    "clear:Clears a Poetry cache by name"
    "list:List Poetry's caches"
  )
  _describe -t cache-cmds "cache commands" cache_cmds
}

_poetry_debug_cmds() {
  typeset -a debug_cmds
  debug_cmds=(
    "info:Shows debug information"
    "resolve:Debugs dependency resolution"
  )
  _describe -t debug-cmds "debug commands" debug_cmds
}

_poetry_env_cmds() {
  typeset -a env_cmds
  env_cmds=(
    "info:Displays information about the current environment"
    "list:Lists all virtualenvs associated with the current project"
    "remove:Remove virtual environments associated with the project"
    "use:Activates or creates a new virtualenv for the current project"
  )
  _describe -t env-cmds "env commands" env_cmds
}

_poetry_source_cmds() {
  typeset -a source_cmds
  source_cmds=(
    "add:Add source configuration for project"
    "remove:Remove source configured for the project"
    "show:Show information about sources configured for the project"
  )
  _describe -t source-cmds "source commands" source_cmds
}

_poetry() {
  local curcontext="$curcontext" state line context
  typeset -a _arguments_options
  local ret=1

  if is-at-least 5.2; then
    _arguments_options=(-s -S -C)
  else
    _arguments_options=(-s -C)
  fi

  local -a universal_args; universal_args=(
    '--ansi[Force ANSI output]' \
    {-C,--directory}'[Working directory for the command (default CWD)]:directory:_files -/' \
    '--no-ansi[Disable ANSI output]' \
    '--no-cache[Disables Poetry source caches]' \
    {-n,--no-interaction}'[Do not ask any interactive question]' \
    '--no-plugins[Disables plugins]' \
    {-v,--verbose}'[Normal verbosity of messages]' \
    '-vv[More verbose messages]' \
    '-vvv[Debug messages]' \
    {-q,--quiet}'[Do not output any message]' \
    {-V,--version}'[Display this application version]' \
    {-h,--help}'[Display help for the given command]' \
  )

    _arguments "${_arguments_options[@]}" \
        "$universal_args[@]" \
        ':: :_poetry_commands' \
        '*::: :->poetry' \
        && ret=0

  case $state in
    (poetry)
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:poetry-$line[1]:"
      case $line[1] in
        (about)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            && ret=0
        ;;
        (add)
          _arguments "${_arguments_options[@]}" \
            '--allow-prereleases[Accept prereleases]' \
            {-D,--dev}'[Add as a development dependency (deprecated)]' \
            '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
            {-e,--editable}'[Add vcs/path dependencies as editable]' \
            {-E,--extras=}'[Extra(s) to activate for the dependency]:extras:' \
            {-G,--group=}'[The group to add the dependency to (default: "main")]:group:' \
            '--lock[Do not perform operations (only update the lockfile)]' \
            '--optional[Add as an optional dependency]' \
            '--platform=[Platforms for which the dependency must be installed]:platform:' \
            '--python=[Python version for which the dependency must be installed]:python version:' \
            '--source=[Name of the source to use to install the package]:source:' \
            "$universal_args[@]" \
            '*::Packages to add:' \
              && ret=0
        ;;
        (build)
          _arguments "${_arguments_options[@]}" \
            {-f,--format=}'[Limit the format]:format:(stdist wheel)' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (cache)
          _arguments "${_arguments_options[@]}" \
            '::Cache subcommand:_poetry_cache_cmds' \
            '*::: :->cache' \
            && ret=0
            case $state in
              (cache)
                words=($line[1] "${words[@]}")
                (( CURRENT += 1 ))
                curcontext="${curcontext%:*:*}:poetry-cache-$line[1]:"
                case $line[1] in
                    (clear)
                      _arguments "${_arguments_options[@]}" \
                        "$universal_args[@]" \
                        '--all[Clear all entries in the cache]' \
                        && ret=0
                    ;;
                    (list)
                      _arguments "${_arguments_options[@]}" \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                esac
          esac
        ;;
        (check)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            && ret=0
        ;;
        (config)
          _arguments "${_arguments_options[@]}" \
            "--list:List configuration settings" \
            "--unset:Unset configuration setting" \
            "--local:Set/Get from the project's local configuration" \
            "$universal_args[@]" \
            '1:key to set:' \
            '2:value to set to key:' \
            && ret=0
        ;;
        (debug)
          _arguments "${_arguments_options[@]}" \
            '1::Debug subcommand:_poetry_debug_cmds' \
            '*::: :->debug' \
            && ret=0
            case $state in
              (debug)
                words=($line[1] "${words[@]}")
                (( CURRENT += 1 ))
                curcontext="${curcontext%:*:*}:poetry-debug-$line[1]:"
                case $line[1] in
                    (info)
                      _arguments "${_arguments_options[@]}" \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (resolve)
                      _arguments "${_arguments_options[@]}" \
                        '--extras[Extras to activate for the dependency]' \
                        '--install[Show what would be installed for the current system]' \
                        '--python[Python version(s) to use for resolution]' \
                        '--tree[Display the dependency tree]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                esac
          esac
        ;;
        (env)
          _arguments "${_arguments_options[@]}" \
            '*::Env subcommand:_poetry_env_cmds' \
            '*::: :->env' \
            && ret=0
            case $state in
              (env)
                words=($line[1] "${words[@]}")
                (( CURRENT += 1 ))
                curcontext="${curcontext%:*:*}:poetry-env-$line[1]:"
                case $line[1] in
                    (info)
                      _arguments "${_arguments_options[@]}" \
                        "--path[Only display the environment's path]" \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (list)
                      _arguments "${_arguments_options[@]}" \
                        '--full-path[Output the full paths of the virtualenvs]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (remove)
                      _arguments "${_arguments_options[@]}" \
                        '--all[Remove all managed virtual environments associated with the project]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (use)
                      _arguments "${_arguments_options[@]}" \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                esac
          esac
        ;;
        (export)
          _arguments "${_arguments_options[@]}" \
            '--dev[Include development dependencies (deprecated)]' \
            {-E,--extras=}'[Extra sets of dependencies to include]:extras:' \
            {-f,--format=}'[Format to export to]:format:(constraints.txt requirements.txt)' \
            '--only=[The only dependency groups to include]:only to include:' \
            {-o,--output=}'[The name of the output file]:output file:_files' \
            '--with=[The optional dependency group(s) to include]:to include:' \
            '--with-credentials[Include credentials for extra indices]' \
            '--without=[The dependency group(s) to ignore]:to ignore:' \
            '--without-hashes[Exclude hashes from the exported file]' \
            '--without-urls[Exclude source repository urls from the exported file]' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (help)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            '1::Help subcommand:_poetry_commands' \
            && ret=0
        ;;
        (init)
          _arguments "${_arguments_options[@]}" \
            '--author=[Author name of the package]:author:' \
            '--dependency=[Package(s) to require, opt. version constraint (requests\[:^2.10.0|=2.11.1\])]:dependency\|ies:' \
            '--description=[Description of the package]:description:' \
            '--dev-dependency[Package to require for dev, opt. version constraint (requests\[:^2.10.0|=2.11.1\])]:dependency|ies:' \
            '--license=[License of the package]:license:' \
            '--name=[Name of the package]:package:' \
            '--python=[Compatible Python versions]:python version:' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (install)
          _arguments "${_arguments_options[@]}" \
            '--all-extras[Install all extra dependencies]' \
            '--compile[Compile Python source files to bytecode (no effect w modern install)]' \
            '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
            {-E,--extras=}'[Extra sets of dependencies to install]:extras:' \
            '--no-dev[Do not install the development dependencies (deprecated)]' \
            '--no-root[Do not install the root package (the current project)]' \
            '--only=[The only dependency groups to include]:dependency:' \
            '--only-root[Exclude all dependencies]' \
            '--remove-untracked[Removes packages not present in the lock file. (deprecated)]' \
            '--sync[Synchronize the environment with the locked packages and the specified groups]' \
            '--with=[The optional dependency group(s) to include]:dependency:' \
            '--without=[The dependency group(s) to ignore]:dependency:' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (list)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            '1::Namespace:' \
            && ret=0
        ;;
        (lock)
          _arguments "${_arguments_options[@]}" \
            '--check[Check that the poetry.lock file corresponds to current version of pyproject.toml]' \
            '--no-update[Do not update locked versions, only refresh lock file]' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (new)
          _arguments "${_arguments_options[@]}" \
            '--name=[Set the resulting package name]:package:' \
            '--readme=[Specify the readme file format]:format:(md rst)' \
            '--src[Use the src layout for the project]' \
            "$universal_args[@]" \
            '1::Path:_files' \
            && ret=0
        ;;
        (publish)
          _arguments "${_arguments_options[@]}" \
            '--build[Build the package before publishing]' \
            '--cert=[Certificate authority to access the repository]:cert' \
            '--client-cert[Client certificate to access the repository]' \
            '--dry-run[Perform all actions except upload the package]' \
            {-p,--password=}'[The password to access the repository]:password:' \
            {-r,--repository=}'[The repository to publish the package to]:repository:' \
            '--skip-existing[Ignore errors from files already existing in the repository]' \
            {-u,--username=}'[The username to access the repository]:username:' \
            "$universal_args[@]" \
            && ret=0
        ;;
        (remove)
          _arguments "${_arguments_options[@]}" \
            {-D,--dev}'[Remove a package from the development dependencies (deprecated)]' \
            '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
            {-G,--group=}'[The group to remove the dependency from]:group:' \
            {-p,--password=}'[The password to access the repository]:password:' \
            {-r,--repository=}'[The repository to publish the package to]:repository:' \
            '--skip-existing[Ignore errors from files already existing in the repository]' \
            {-u,--username=}'[The username to access the repository]:username:' \
            "$universal_args[@]" \
            '*::Packages:' \
            && ret=0
        ;;
        (run)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            '*::Arguments:' \
            && ret=0
        ;;
        (search)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            '*::Tokens:' \
            && ret=0
        ;;
        (self)
          _arguments "${_arguments_options[@]}" \
            '1::Self subcommand:_poetry_self_cmds' \
            '*::: :->self' \
            && ret=0
            case $state in
              (self)
                words=($line[1] "${words[@]}")
                (( CURRENT += 1 ))
                curcontext="${curcontext%:*:*}:poetry-self-$line[1]:"
                case $line[1] in
                    (add)
                      _arguments "${_arguments_options[@]}" \
                        '--allow-prereleases[Accept prereleases]' \
                        '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
                        {-e,--editable}'[Add vcs/path dependencies as editable]' \
                        {-E,--extras=}'[Extras to activate for the dependency]:extras:' \
                        '--source=[Name of the source to use to install the package]:source:' \
                        "$universal_args[@]" \
                        '::Package(s) to add:' \
                        && ret=0
                    ;;
                    (install)
                      _arguments "${_arguments_options[@]}" \
                        '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
                        '--sync[Synchronize the environment with the locked packages and the specified groups]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (lock)
                      _arguments "${_arguments_options[@]}" \
                        '--check[Check that the poetry.lock file corresponds to the current version of pyproject.toml]' \
                        '--no-update[Do not update locked versions, only refresh lock file]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                    (remove)
                      _arguments "${_arguments_options[@]}" \
                        "$universal_args[@]" \
                        '--dry-run[Output the operations but do not execute anything (implicitly enables --verbose)]' \
                        '::Package(s) to add:' \
                        && ret=0
                    ;;
                    (show)
                      _arguments "${_arguments_options[@]}" \
                        '--addons[List only add-on packages installed]' \
                        {-l,--latest}'[Show the latest version]' \
                        {-o,--outdated}'[Show the latest version but only for packages that are outdated]' \
                        {-t,--tree}'[List the dependencies as a tree]' \
                        "$universal_args[@]" \
                        ':: :_poetry_self_show_cmds' \
                        '::: :->self-show' \
                        && ret=0
                        case $state in
                          (self-show)
                            words=($line[1] "${words[@]}")
                            (( CURRENT += 1 ))
                            curcontext="${curcontext%:*:*}:poetry-self-show-$line[1]:"
                            case $line[1] in
                                (plugins)
                                  _arguments "${_arguments_options[@]}" \
                                    "$universal_args[@]" \
                                    && ret=0
                                ;;
                            esac
                      esac
                    ;;
                    (update)
                      _arguments "${_arguments_options[@]}" \
                        '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
                        '--preview[Allow the installation of pre-release versions]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                esac
          esac
        ;;
        (shell)
          _arguments "${_arguments_options[@]}" \
            "$universal_args[@]" \
            && ret=0
        ;;
        (show)
          _arguments "${_arguments_options[@]}" \
            {-a,--all}'[Show all packages (even those not compatible with current system)]' \
            {-l,--latest}'[Show the latest version]' \
            '--no-dev[Do not list the development dependencies (deprecated)]' \
            '--only=[The only dependency groups to include]:dependency:' \
            {-o,--outdated}'[Show the latest version but only for packages that are outdated]' \
            {-t,--tree}'[List the dependencies as a tree]' \
            '--why[When showing the full list, or a --tree for a single package, also display why included]' \
            '--with=[The optional dependency groups to include]:dependency:' \
            '--without=[The dependency groups to ignore]:dependency:' \
            "$universal_args[@]" \
            '*::Packages:' \
            && ret=0
        ;;
        (source)
          _arguments "${_arguments_options[@]}" \
            '1::Source subcommand:_poetry_source_cmds' \
            '*::: :->source' \
            && ret=0
            case $state in
              (source)
                words=($line[1] "${words[@]}")
                (( CURRENT += 1 ))
                curcontext="${curcontext%:*:*}:poetry-source-$line[1]:"
                case $line[1] in
                    (info)
                      _arguments "${_arguments_options[@]}" \
                        '--default[Set this source as the default (disable PyPI)]' \
                        '--secondary[Set this source as secondary]' \
                        "$universal_args[@]" \
                        && ret=0
                    ;;
                esac
          esac
        ;;
        (update)
          _arguments "${_arguments_options[@]}" \
            '--dry-run[Output the operations but do not execute anything (enables --verbose)]' \
            '--lock[Do not perform operations (only update the lockfile)]' \
            '--no-dev[Do not update the development dependencies (deprecated)]' \
            '--only=[The only dependency groups to include]:dependency:' \
            '--with=[The optional dependency groups to include]:dependency:' \
            '--without=[The dependency groups to ignore]:dependency:' \
            "$universal_args[@]" \
            '*::Packages:' \
            && ret=0
        ;;
        (version)
          _arguments "${_arguments_options[@]}" \
            '--dry-run[Do not update pyproject.toml file]'  \
            {-s,--short}'[Output the version number only]' \
            "$universal_args[@]" \
            '1::Version:' \
            && ret=0
        ;;
      esac
  esac
}

_poetry "$@"
