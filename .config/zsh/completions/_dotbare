#compdef dotbare

(( $+functions[__dotbare_setup_zsh_fns] )) ||
__dotbare_setup_zsh_fns () {
  (( $+functions[_git-fadd] )) ||
  _git-fadd () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-f --file -d --dir -h --help)'{-f,--file}'[select files from PWD and stage]' \
      '(-d --dir -f --file -h --help)'{-d,--dir}'[select directory from PWD and stage]'
  }

  (( $+functions[_git-fbackup] )) ||
  _git-fbackup () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-s --select -p --path -h --help)'{-s,--select}'[select tracked files to backup]' \
      '(-p --path -s --select -h --help)'{-p,--path}'[sepcify path of files to backup]:filename:_files' \
      '(-m --move -h --help)'{-m,--move}'[use mv cmd instead of cp cmd]'
  }

  (( $+functions[_git-fcheckout] )) ||
  _git-fcheckout () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-s --select -b --branch -c --commit -h --help)'{-s,--select}'[select files and then checkout them in selected commits]' \
      '(-b --branch -s --select -c --commit -h --help)'{-b,--branch}'[checkout branch]' \
      '(-c --commit -b --branch -s --select -h --help)'{-c,--commit}'[checkout commit]' \
      '(-y --yes -h --help)'{-y,--yes}'[acknowledge all actions and skip confirmation]'
  }

  (( $+functions[_git-fedit] )) ||
  _git-fedit () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-m --modified -c --commit -h --help)'{-m,--modified}'[edit modified files]' \
      '(-c --commit -m --modified -h --help)'{-c,--commit}'[edit commits]'
  }

  (( $+functions[_git-fgrep] )) ||
  _git-fgrep () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-f --full -c --col)'{-f,--full}'[include all columns during fzf search, as if using "--col 1"]' \
      '(-f --full -c --col)'{-c,--col}'[specify a column number to start searching in fzf]: :->cols'
  }

  (( $+functions[_git-finit] )) ||
  _git-finit () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-u --url -h --help)'{-u,--url}'[migrate remote dotfiles to current system]: :->url' \
      '(-s --submodule -h --help)'{-s,--submodule}'[clone submodules during migration]' \
      '(-y --yes -h --help)'{-y,--yes}'[acknowledge all actions and skip confirmation]'
  }

  (( $+functions[_git-flog] )) ||
  _git-flog () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-r --revert -R --reset -e --edit -c --checkout -h --help)'{-r,--revert}'[revert the selected commit and skip action menu]' \
      '(-r --revert -R --reset -e --edit -c --checkout -h --help)'{-R,--reset}'[reset the selected commit and skip action menu]' \
      '(-r --revert -R --reset -e --edit -c --checkout -h --help)'{-e,--edit}'[edit the selected commit and skip action menu]' \
      '(-r --revert -R --reset -e --edit -c --checkout -h --help)'{-c,--checkout}'[checkout the selected commit and skip action menu]' \
      '(-y --yes -h --help)'{-y,--yes}'[acknowledge all actions and skip confirmation]'
  }

  (( $+functions[_git-freset] )) ||
  _git-freset () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-c --commit -h --help)'{-c,--commit}'[reset HEAD to certain commit]' \
      '(-S --soft -H --hard -h --help)'{-S,--soft}'[reset commit using --soft flag]' \
      '(-H --hard -S --soft -h --help)'{-H,--hard}'[reset commit using --hard flag]' \
      '(-y --yes -h --help)'{-y,--yes}'[acknowledge all actions and skip confirmation]'
  }

  (( $+functions[_git-fstash] )) ||
  _git-fstash () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-s --select -d --delete -p --pop -h --help)'{-s,--select}'[list modified files and stash the selected files]' \
      '(-s --select -d --delete -p --pop -h --help)'{-d,--delete}'[list stash and delete the selected stash]' \
      '(-s --select -d --delete -p --pop -h --help)'{-p,--pop}'[use "stash pop" instead of "stash apply"]'
  }

  (( $+functions[_git-fstat] )) ||
  _git-fstat () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]'
  }

  (( $+functions[_git-funtrack] )) ||
  _git-funtrack () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]' \
      '(-t --temp -r --resume -h --help)'{-t,--temp}'[temporarily ignore changes of the selected files]' \
      '(-t --temp -r --resume -h --help)'{-r,--resume}'[resume tracking changes of the selected files]' \
      '(-y --yes -h --help)'{-y,--yes}'[acknowledge all actions and skip confirmation]'
  }

  (( $+functions[_git-fupgrade] )) ||
  _git-fupgrade () {
    _arguments \
      '(- : *)'{-h,--help}'[show help information]'
  }

  # stash the "real" command for later
  functions[_dotbare_orig_git_commands]=$functions[_git_commands]

  # Replace it with our own wrapper.
  declare -f _git_commands >& /dev/null && unfunction _git_commands
  _git_commands () {
    local ret=1
    # call the original routine
    _call_function ret _dotbare_orig_git_commands

    _arguments -C \
      '(- : *)'{-h,--help}'[show help information]' \
      '(- : *)'{-v,--version}'[display dotbare version]' \
      '(-g --git)'{-g,--git}'[use dotbare as a generic fuzzy git tool and operate in current git directory]'

    # Effectively "append" our dotbare commands to the behavior of the original
    # _git_commands function.  Using this wrapper function approach ensures
    # that we only offer the user the dotbare subcommands when the user is
    # actually trying to complete subcommands.
    dotbare_commands=(
      'fadd:stage files'
      'fbackup:backup files'
      'fcheckout:checkout file/branch/commit'
      'fedit:edit files'
      'fgrep:grep within tracked files'
      'finit:init/migrate dotbare'
      'flog:interactive log viewer'
      'freset:reset files/commit'
      'fstash:stage management'
      'fstat:toggle stage/unstage of files'
      'funtrack:untrack files'
      'fupgrade:update dotbare'
    )
    _describe -t dotbare-commands 'dotbare command' dotbare_commands && ret=0

    return ret
  }
}

(( $+functions[__dotbare_setup_bash_fns] )) ||
__dotbare_setup_bash_fns () {
  # TODO more bash-style fns needed here to complete subcommand args.  They take
  # the form "_git_CMD" where "CMD" is something like "pull-request".

  # Duplicate and rename the 'list_all_commands' function
  eval "$(declare -f __git_list_all_commands | \
        sed 's/__git_list_all_commands/__git_list_all_commands_without_dotbare/')"

  # Wrap the 'list_all_commands' function with extra dotbare commands
  __git_list_all_commands() {
    cat <<-EOF
fadd
fbackup
fcheckout
fedit
fgrep
finit
flog
freset
fstash
fstat
funtrack
fupgrade
EOF
    __git_list_all_commands_without_dotbare
  }

  # Ensure cached commands are cleared
  __git_all_commands=""
}

# redefine _dotbare to a much smaller function in the steady state
_dotbare () {
  # only attempt to intercept the normal "_git" helper functions once
  (( $+__dotbare_func_replacement_done )) ||
    () {
      # At this stage in the shell's execution the "_git" function has not yet
      # been autoloaded, so the "_git_commands" or "__git_list_all_commands"
      # functions will not be defined.  Call it now (with a bogus no-op service
      # to prevent premature completion) so that we can wrap them.
      if declare -f _git >& /dev/null ; then
        _dotbare_noop () { __dotbare_zsh_provided=1 }       # zsh-provided will call this one
        __dotbare_noop_main () { __dotbare_git_provided=1 } # git-provided will call this one
        local service=dotbare_noop
        _git
        unfunction _dotbare_noop
        unfunction __dotbare_noop_main
        service=git
      fi

      if (( $__dotbare_zsh_provided )) ; then
        __dotbare_setup_zsh_fns
      elif (( $__dotbare_git_provided )) ; then
        __dotbare_setup_bash_fns
      fi

      __dotbare_func_replacement_done=1
    }

  # Now perform the actual completion, allowing the "_git" function to call our
  # replacement "_git_commands" function as needed.  Both versions expect
  # service=git or they will call nonexistent routines or end up in an infinite
  # loop.
  service=git
  declare -f _git >& /dev/null && _git
}

# make sure we actually attempt to complete on the first "tab" from the user
_dotbare
