# This Zshell function will execute the given code from a Zle context.
# It has an optional delay first argument: "@sleep:<seconds with fractions>".
# If given, then the code will wait in background before being executed, for
# the specified amount of time.
# The limit of the code length is 25 lines and can be easily extended by
# changing the "repeat 25" line
#
# Usage:
# zle-deploy "echo Hello world"
# zle-deploy "BUFFER[-1]=''"
# zle-deploy  @sleep:5.5 "BUFFER='The time has passed, sorry for replacing your command line ;)'"
[[ "$1" = <-> && ${#} -eq 1 ]] && {
    local alltext text IFS=$'\n' nl=$'\n' FD=$1
    repeat 25; do read -r -u$FD text; alltext+="${text:+$text$nl}"; done
    [[ "$2" == -n ]] && builtin zle -I
    zle -F $FD; exec {FD}<&-
    eval "$alltext"
    return 0
}

integer THEFD
exec {THEFD} < <(
    # The expansion is: if there is @sleep: pfx, then use what is after
    # it, otherwise substitute 0

    # LANG=C sleep $(( 0.005 + ${${${(M)1#@sleep:}:+${1#@sleep:}}:-0} ))
    # print -r -- ${1:#(@code|@sleep:*)} "${@[2,-1]}"

    float t=${${${(M)@:#@sleep:*}#@sleep:}:-0}
    builtin set -- ${@:#@sleep:*}
    LANG=C command sleep $(( 0.010 + $t ))
    builtin printf %s\\n "$@"
)

REPLY=$THEFD
zle -N zle-deploy # idempotent
zle -w -F "$THEFD" zle-deploy

# vim:ft=zsh:sts=4:sw=4:et
