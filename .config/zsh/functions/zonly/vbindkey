############################################################################
#    Author: Lucas Burns                                                   #
#     Email: burnsac@me.com                                                #
#   Created: 2021-06-24 12:57                                              #
############################################################################
# @desc: vim bindkey

emulate -L zsh

zmodload zsh/complist
zmodload zsh/parameter
zmodload -Fa zsh/zutil b:zparseopts b:zformat
zmodload -Fa zsh/terminfo +p:terminfo +b:echoti
zmodload -Fa zsh/zleparameter p:widgets

setopt extendedglob nolistbeep noshortloops warncreateglobal

# -h = --help
# -d = --debug
# -U = --duplicates
# -u = --unused
# -c = --command
# -s = --show
# -r = --remove
# -A = --array
# -M = --mode

local -i single
local -a remove array mode
local -A Opts
builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} \
    -D -E -A       Opts --  \
    -help          h        \
    -debug         d        \
    -duplicates    U        \
    -unused        u        \
    -command       c        \
    -show          s        \
    -remove=remove r=remove \
    -array:=array  A:=array \
    -mode:=mode    M:=mode  \
    || { zerr 'invalid option given; see {cmd}--help{%}'; return 7; }

function print_help() {
  print::usage "vbindkey" "[FLAGS] [LHS] [RHS]"
  print::header 12 "OPTIONS"
  print::flag 20 "-s,--show       " "        Show the escape sequence of the key"
  print::flag 20 "-U,--duplicates " "        Show duplicate bound keys"
  print::flag 20 "-u,--unused     " "        Show unused keybindings"
  print::flag 20 "-c,--command    " "        Bind a command"
  print::flag 20 "-r,--remove     " "[KEY]   Remove a keybinding"
  print::flag 20 "-A,--array      " "[ARRAY] Bind an array of keybindings"
  print::flag 20 "-M,--mode       " "[MODE]  Bind a key in a given mode"
  print::flag 20 "-d,--debug      " "        Debug the execution of this program"
  print::flag 20 "-h,--help       " "        Show help menu"

  print::header 19 "MODES"
  print::subc 20 "command         " "Read a command name"
  print::subc 20 "isearch         " "Incremental search mode"
  print::subc 20 "emacs           " "Emacs emulation"
  print::subc 20 "viins           " "Vi emulation - insert mode"
  print::subc 20 "vicmd           " "Vi emulation - command mode"
  print::subc 20 "viopp           " "Vi emulation - operator-pending mode"
  print::subc 20 "visual          " "Vi emulation - active selection"
  print::subc 20 "str             " "Bind a command following a newline (no need to add newline)"
  print::subc 20 "+               " "Hide command and print output below command line"
  print::subc 20 "@               " "Hide command and leave prompt unmodified if possible"
  print::subc 20 "-               " "Hide command and update prompt in place"

  print::header 19 "EXAMPLES"
  print -Pr -- "  %F{2}vbindkey%f -M vicmd %F{3}'0'%f marks %F{35}# Bind single key in vicmd mode%f"
  print -Pr -- "  %F{2}vbindkey%f -M str %F{3}'^o' 'lc'%f == %F{2}bindkey%f -s %F{3}'^o' 'lc\\n' %F{35}# Bind key as string%f"
  print -Pr -- '  %F{2}vbindkey%f -A \\
    (
      %F{3}"C-x C-x"         %F{12}execute-command    %F{35}# Bind key sequence%f
      %F{3}"mode=vicmd :"    %F{12}execute-named-cmd  %F{35}# Bind key in "vicmd" mode%f
      %F{3}"mode=visual S"   %F{12}add-surround       %F{35}# Bind key in "visual" mode%f
      %F{3}"mode=str C-u"    %F{12}lf                 %F{35}# Bind key as a command with <Enter> following it%f
      %F{3}"mode=+ M-."      %F{12}kf                 %F{35}# Bind key and print output below%f
      %F{3}"mode=@ C-b"      %F{12}bow                %F{35}# Bind key and leave prompt unmodified%f
    )'
}

function pdebug() {
  if (( DEBUG )) {
    zlog --debug "$@"
  }
}

(( $+Opts[-d] + $+Opts[--debug] )) && local -i DEBUG=1
(( $+Opts[-h] + $+Opts[--help] )) && { print_help; return 0; }

typeset -gA keyinfo=(
  up           "${terminfo[kcuu1]}"
  down         "${terminfo[kcud1]}"
  left         "${terminfo[kcub1]}"
  right        "${terminfo[kcuf1]}"
  home         "${terminfo[khome]}"
  end          "${terminfo[kend]}"
  delete       "${terminfo[kdch1]}"
  insert       "${terminfo[kich1]}"
  backtab      "${terminfo[kcbt]}"
  pageup       "${terminfo[kpp]}"
  pagedown     "${terminfo[knp]}"
  f1           "${terminfo[kf1]}"
  f2           "${terminfo[kf2]}"
  f3           "${terminfo[kf3]}"
  f4           "${terminfo[kf4]}"
  f5           "${terminfo[kf5]}"
  f6           "${terminfo[kf6]}"
  f7           "${terminfo[kf7]}"
  f8           "${terminfo[kf8]}"
  f9           "${terminfo[kf9]}"
  f10          "${terminfo[kf10]}"
  f11          "${terminfo[kf11]}"
  f12          "${terminfo[kf12]}"
  control         '\C-'
  escape          '\e'
  meta            '\M-'
  delete          '^[[3~'
  backspace       '^?'
  space           ' '
  ControlLeft     '\e[1;5D \e[5D \e\e[D \eOd \eOD'
  ControlRight    '\e[1;5C \e[5C \e\e[C \eOc \eOC'
  ControlPageUp   '\e[5;5~'
  ControlPageDown '\e[6;5~'
)

function escape-single-key() {
  if (( $#1 == 1 )) {
    ret=$1
  } elif (( $+keyinfo[${(L)1}] )) {
    ret="$keyinfo[${(L)1}]"
  } elif [[ $1 != *[[:space:]]* ]] {
    # allow 'jk' or 'c.' as a binding
    ret=$1
  } else {
    zerr "{str}$1{%} is not allowed"
  }
}

function escape-mod-key() {
  local -a binding=( ${(ws:-:)@} )
  local -A modifier spkeys

  if [[ (( $#binding > 2)) ]]; then
    # M-x = lowercase;    M-S-x = uppercase
    if [[ ${(j::)binding} = (MS|SM)[[:alnum:]]## ]]; then
      local mod=${(UM)binding:#(#i)M} key=${(U)binding[-1]}
    # C-M or M-C
    elif [[ ${(j::)binding} = (CM|MC)[[:alnum:]]## ]]; then
      local mod=${(j::)${(oUM)binding:#(#i)[CM]}} key=${(U)binding[-1]}
    fi
  else
    local mod=${(U)binding[1]}      key=${(L)binding[2]}
  fi

  [[ $key == space ]] && key=" "

  if [[ $key == "backspace" ]] {
    modifier=(
      C "^h"
      M "^[^?"
    )
    ret="${modifier[$mod]}"
  } elif (( $#key == 1 )) {
    modifier=(
      C   "^"
      CM  "^[^"
      M   "^["
      ESC '\e'
    )
    ret="${modifier[$mod]}${key}"
  } else {
    spkeys=(
      up    A
      down  B
      right C
      left  D
      end   F
      home  H
    )
    modifier=(
      C  "^[[1;5"
      CM "^[[1;7"
      M  "^[[1;3"
    )
    ret="${modifier[$mod]}${spkeys[$key]}"
  }
}

function ___unused() {
  # local -a args=( $@ $mode )
  # local -a control=( {$'\0'..$'\C-B'} {$'\C-D'..$'\C-_'} $'\C-?' )
  # local -a printable=( {' '..'~'} )
  # local -a termkeys=( kbs kich1 kdch1 khome kend kpp knp kcuu1 kcub1 kcud1 kcuf1 )
  # termkeys=( ${(vn)terminfo[(I)(${(~j:|:)termkeys})]} )
  # local -a fkeys=( ${(vn)terminfo[(I)kf<1-20>]} )
  # local -a val=()
  # local key
  # for key in $printable $control $'\e'$^printable $'\e'$^control \
  #   $termkeys $'\e'$^termkeys $fkeys $'\e'$^fkeys; do
  #     [[ $(builtin bindkey $args[@] - $key)$(builtin bindkey $args[@] -p - $key)
  #           == *'undefined-key' ]] &&
  #       val+=( ${${${${${(q+)key}//'\C-'/^}//'\\'/\\}#(|\$)[\']}%[\']} )
  # done
  # (( $#val )) &&
  #   print -cr - ${(q-)val}

  local -a args=( $@ $mode )
  local -a termkeys=( kbs kich1 kdch1 khome kend kpp knp kcuu1 kcub1 kcud1 kcuf1 )
  local -a fkeys=( ${(vn)terminfo[(I)kf<1-20>]} )
  local -a val=()

  local -a keys=(
    ' ' {a..z} \; \' \, \. \/ \[ \] \\ \` {1..9}                      0 \- \= $'\C-?'
    $'\e'{O,\[}{A,B,C,D,F,H} $'\e['{2,3,5,6}\~
    {A..Z} \: \" \< \> \? \{ \} \| \~ \! \@ \# \$ \% \^ \& \* \( \) \_ \+ $'\e[Z'
    {$'\C-@'..$'\C-_'}
    ${(vn)terminfo[(I)(${(~j:|:)termkeys})]}
    ${(vn)terminfo[(I)kf<1-20>]}
  )
  local k
  for k in $keys $'\e'$^keys; do
    [[ $(builtin bindkey $args[@] - $k)$(builtin bindkey $args[@] -p - $k) == *'undefined-key' ]] &&
      val+=( ${${${${${(q+)k}//'\C-'/^}//'\\'/\\}#(|\$)[\']}%[\']} )
  done
  print::header 19 "${(@U)mode[-1]:-NORMAL} UNBOUND KEYS"
  if (( $#val )) {
    print -cr -- ${(q-v)val}
  } else {
    print -r -- "NONE"
  }
}

function ___duplicates() {
  local -a bindings dup_bindings all_bindings
  dup_bindings=()
  all_bindings=( ${(f)"$(builtin bindkey ${@:-$mode})"} )

  local w
  for w in "${(@ko)widgets}"; do
    bindings=( ${(M)all_bindings:#* $w}  )
    (( $#bindings > 1 )) &&
        # dup_bindings+=( $w "\t${(j:\t:)bindings[@]% $w}" )
        dup_bindings+=( ${w}:${(j.:.)${${(n)bindings[@]:/(#m)*/${#MATCH}$'\0'${MATCH}}[@]#*$'\0'}[@]% $w} )
  done
  while [[ $dup_bindings[(I)*:*] -gt 0 ]]; do
    zformat -a dup_bindings ' ' "$dup_bindings[@]"
  done

  print::header 19 "${(@U)mode[-1]:-NORMAL} DUPLICATE KEYS"
  if (( $#dup_bindings )) {
    print -lr "$dup_bindings[@]"
  } else {
    print -r -- "NONE"
  }
}

function ___bind() {
  local escaped ret i MATCH
  local -a sequence=(${(s: :)1})
  # local -a modes=( ${(f)"$(builtin bindkey -l)"} )

  # For arrays
  if (( $+Opts[-A] + $+Opts[--array] )) && [[ ${(M)sequence:#mode*} ]]; then
    local qmode=${${(ws:=:)${(M)sequence:#mode*}}[ -1 ]}
    if [[ $qmode = ${(~j:|:)keymaps} ]]; then
      mode=( -M $qmode )
    elif [[ $qmode == "str" ]]; then
      mode=( -s )
    elif [[ $qmode = (#m)[@+-](#c1,2) ]]; then
      # mode=( ${${(s::)qmode}[1]} )
      # mode=( ${(@j::)${(M)${(s::)qmode}:#(-|@|+)}} )
      mode=( $MATCH )
      pdebug "bind edit: %F{2}$mode%f"
    else
      zerr "%7F $1%b%f"
    fi
    sequence=( ${sequence:#mode*} )
  # For a single command. i.e., vbindkey -M vicmd '0' marks
  elif (( $+Opts[-M] + $+Opts[--mode] )); then
    if (( ${+mode[(r)str]} )); then
      mode=( -s )
    fi
    single=1
  else
    mode=()
  fi

  for i ($sequence) {
    # allow mode=-@
    if [[ $i == [^-]*-* ]] && (( $#i > 2 )) {
      escape-mod-key $i
    } else {
      escape-single-key $i
    }
    escaped+=$ret
  }

  if (( ${+mode[(r)-s]} )); then
    # Allow: bindkey -s '^o' 'lc\n' commands
    # Which is executed like: vbindkey -M str '^o' 'lc'
    builtin bindkey $remove $mode $escaped "${2}\n"
    pdebug "%F{2}Mode:string%f -- bindkey ${(v)remove} $mode $escaped $2"
  elif (( ${(@s::)+mode[(r)(+|@|-)(#c1,2)]} )); then
    pdebug "%F{2}Mode:@-+:%f -- bindkey "$escaped" ".${mode[1]}${2}""
    zle -N ".${mode[1]}${2}" .__exec_cmd
    builtin bindkey "$escaped" ".${mode[1]}${2}"
  elif (( single && ${+mode[(r)${(~j:|:)keymaps}]} )); then
    pdebug "%F{2}Mode:$mode[2,-1] -- bindkey $remove $mode $escaped $2"
  else
    builtin bindkey $remove $mode $escaped $2
    pdebug "%F{2}Mode:norm/none -- bindkey $remove $mode $escaped $2"
  fi
}

# @desc: Helper for vbindkey (taken from marlonrichert)
function .__exec_cmd() {
  autoload -Uz add-zle-hook-widget

  case $CONTEXT in
    (start)
      unset PREDISPLAY POSTDISPLAY
      local opts=${(M)WIDGET##.[@+-]#}
      local cmd=${WIDGET#$opts}
      case $opts in
        (^*@*) zle .push-line               ;|
        (*)    zle -Rc                      ;|
        (*-*)  PS1= RPS1= zle .reset-prompt ;|
        (*[@+]*)
          [[ -o transientrprompt ]] && { RPS1= zle .reset-prompt; zle -R; }
        ;|
        (*+*)
          print
        ;|
        (*)
          if [[ $opts == *[@+-]* ]]; then
            eval "${(e)cmd}"
          else
            BUFFER=${(e)WIDGET#.}
          fi
        ;|
        (*[+-]*)
          local hook=precmd
          local func=${(q):-:${(%):-%N}:$hook:}
          eval "$func() {
            add-zsh-hook -d $hook $func
            unfunction $func
            echoti cuu1
          }"
          add-zsh-hook $hook ${(Q)func}
        ;|
        (*-*) zle .send-break                   ;;
        (*@*) _p9k_precmd; zle .reset-prompt;   ;;
        (*) zle .accept-line                    ;;
      esac
    ;;
    (cont)
      local hook=line-init
      local func=${(q):-:${(%):-%N}:$hook:$WIDGET}
      eval "$func() {
        add-zle-hook-widget -d $hook $func
        zle -D $func
        unfunction $func
        zle ${(q)WIDGET} -w
      }"
      add-zle-hook-widget $hook ${(Q)func}
      zle .push-line-or-edit
    ;;
    (*)
      return 75 # EX_TEMPFAIL; see `man 3 sysexits`.
    ;;
  esac
}

# _p9k_precmd
# zle reset-prompt
# zle -R

pdebug "%F{2}Opts%f:${(kv)Opts[@]}"
if [[ $array ]]; then
  local k v
  for k v in ${(Pkv)${array[2]}}; do
    ___bind $k $v
  done
  # for x in ${(p)a}; do
  #   echo +1
  # done
elif (( $+Opts[-u] + $+Opts[--unused] )); then
  ___unused "$@"
elif (( $+Opts[-U] + $+Opts[--duplicates] )); then
  ___duplicates "$@"
elif (( $+Opts[-s] + $+Opts[--show] )); then
  local -a sequence=(${(s: :)1})
  local s; for s ($sequence[@]) {
    local esc=${(V)s}
    # This one works much better. Use like: vbindkey -s $'\C-x'
    if (( ${(M)#${esc}:#(\^(\[|)|\\M)*} )) {
      builtin print -r -- ": ${(q)1}, ${(q+)1}, ${(V)1}"
    } else {
      local sold=$s
      if [[ $s == M* ]]; then
        s="\M${s//(#s)M(-|)/}"
      elif [[ $s == C* ]]; then
        s="\C${s//(#s)C(-|)/}"
      elif [[ $s == e* ]]; then
        s="\e${s//(#s)e/}"
      fi
      builtin print -r -- "$sold: ${(q)s}, ${(q+)s}, ${(V)s}"
    }
  }
elif (( $+Opts[-c] + $+Opts[--command] )); then
  zle -N ".$@[-1]" .__exec_cmd
  builtin bindkey "$@[1,-2]" ".$@[-1,-2]"
else
  ___bind $1 $2
fi

# Taken from `romkatv/z4h`

# local -a          left=(  '^['{\[,O}D )
# local -a    shift_left=(  '^['{'[1;',\[,O}2D )
# local -a      alt_left=(  '^['{'[1;',\[,O}3D '^[^['{\[,O}D )
# local -a     ctrl_left=(  '^['{'[1;',\[,O}5D )
# local -a alt_ctrl_left=(  '^['{'[1;',\[,O}7D '^[^['{'[1;',\[,O}5D )
# local -a          right=( '^['{\[,O}C )
# local -a    shift_right=( '^['{'[1;',\[,O}2C )
# local -a      alt_right=( '^['{'[1;',\[,O}3C '^[^['{\[,O}C )
# local -a     ctrl_right=( '^['{'[1;',\[,O}5C )
# local -a alt_ctrl_right=( '^['{'[1;',\[,O}7C '^[^['{'[1;',\[,O}5C )
# local -a page_up=(   '^[[5~' )
# local -a page_down=( '^[[6~' )
# local -a home=( '^['{\[,O}H )
# local -a  end=( '^['{\[,O}F )
# local backspace='^?'
# local -a      shift_backspace=( '^[[27;2;8~' )
# local -a        alt_backspace=( '^[[27;3;8~' '^[^?' )
# local -a       ctrl_backspace=( '^[[27;5;8~'   '^H' )
# local -a shift_ctrl_backspace=( '^[[27;6;8~' )
# local -a   alt_ctrl_backspace=( '^[[27;7;8~' '^[^H' )
# local delete='^[[3~'
# local -a      shift_delete=( '^[[3;2~' '^[^[[3~'    '^[(' )
# local -a        alt_delete=( '^[[3;3~' '^[^[[3~'    '^[(' )
# local -a       ctrl_delete=( '^[[3;5~' )
# local -a shift_ctrl_delete=( '^[[3;6~' )
# local -a   alt_ctrl_delete=( '^[[3;7~' '^[^[[3;5~' )
#
# typeset -gA _z4h_key=(
#   Tab                         '^I'
#   Space                       ' '
#   Ctrl+/                      '^_'
#   Ctrl+_                      '^_'
#   Ctrl+Space                  '^ '
#   Alt+Space                   '^[ '
#   Shift+Tab                   '^[[Z'
#
#   Up                          '^[[A'
#   Down                        '^[[B'
#   Right                       '^[[C'
#   Left                        '^[[D'
#   Home                        '^[[H'
#   End                         '^[[F'
#   Insert                      '^[[2~'
#   Delete                        '^[[3~'
#   PageUp                      '^[[5~'
#   PageDown                    '^[[6~'
#   Backspace                   '^?'
#
#   Shift+Up                    '^[[1;2A'
#   Shift+Down                  '^[[1;2B'
#   Shift+Right                 '^[[1;2C'
#   Shift+Left                  '^[[1;2D'
#   Shift+Home                  '^[[1;2H'
#   Shift+End                   '^[[1;2F'
#   Shift+Insert                '^[[2;2~'
#   Shift+Delete                  '^[[3;2~'
#   Shift+PageUp                '^[[5;2~'
#   Shift+PageDown              '^[[6;2~'
#   Shift+Backspace             '^?'
#
#   Alt+Up                      '^[[1;3A'
#   Alt+Down                    '^[[1;3B'
#   Alt+Right                   '^[[1;3C'
#   Alt+Left                    '^[[1;3D'
#   Alt+Home                    '^[[1;3H'
#   Alt+End                     '^[[1;3F'
#   Alt+Insert                  '^[[2;3~'
#   Alt+Delete                    '^[[3;3~'
#   Alt+PageUp                  '^[[5;3~'
#   Alt+PageDown                '^[[6;3~'
#   Alt+Backspace               '^[^?'
#
#   Alt+Shift+Up                '^[[1;4A'
#   Alt+Shift+Down              '^[[1;4B'
#   Alt+Shift+Right             '^[[1;4C'
#   Alt+Shift+Left              '^[[1;4D'
#   Alt+Shift+Home              '^[[1;4H'
#   Alt+Shift+End               '^[[1;4F'
#   Alt+Shift+Insert            '^[[2;4~'
#   Alt+Shift+Delete              '^[[3;4~'
#   Alt+Shift+PageUp            '^[[5;4~'
#   Alt+Shift+PageDown          '^[[6;4~'
#   Alt+Shift+Backspace         '^[^H'
#
#   Ctrl+Up                     '^[[1;5A'
#   Ctrl+Down                   '^[[1;5B'
#   Ctrl+Right                  '^[[1;5C'
#   Ctrl+Left                   '^[[1;5D'
#   Ctrl+Home                   '^[[1;5H'
#   Ctrl+End                    '^[[1;5F'
#   Ctrl+Insert                 '^[[2;5~'
#   Ctrl+Delete                 '^[[3;5~'
#   Ctrl+PageUp                 '^[[5;5~'
#   Ctrl+PageDown               '^[[6;5~'
#   Ctrl+Backspace              '^H'
#
#   Ctrl+Shift+Up               '^[[1;6A'
#   Ctrl+Shift+Down             '^[[1;6B'
#   Ctrl+Shift+Right            '^[[1;6C'
#   Ctrl+Shift+Left             '^[[1;6D'
#   Ctrl+Shift+Home             '^[[1;6H'
#   Ctrl+Shift+End              '^[[1;6F'
#   Ctrl+Shift+Insert           '^[[2;6~'
#   Ctrl+Shift+Delete           '^[[3;6~'
#   Ctrl+Shift+PageUp           '^[[5;6~'
#   Ctrl+Shift+PageDown         '^[[6;6~'
#   Ctrl+Shift+Backspace        '^?'
#
#   Ctrl+Alt+Up                 '^[[1;7A'
#   Ctrl+Alt+Down               '^[[1;7B'
#   Ctrl+Alt+Right              '^[[1;7C'
#   Ctrl+Alt+Left               '^[[1;7D'
#   Ctrl+Alt+Home               '^[[1;7H'
#   Ctrl+Alt+End                '^[[1;7F'
#   Ctrl+Alt+Insert             '^[[2;7~'
#   Ctrl+Alt+Delete             '^[[3;7~'
#   Ctrl+Alt+PageUp             '^[[5;7~'
#   Ctrl+Alt+PageDown           '^[[6;7~'
#   Ctrl+Alt+Backspace          '^[^H'
#
#   Ctrl+Alt+Shift+Up           '^[[1;8A'
#   Ctrl+Alt+Shift+Down         '^[[1;8B'
#   Ctrl+Alt+Shift+Right        '^[[1;8C'
#   Ctrl+Alt+Shift+Left         '^[[1;8D'
#   Ctrl+Alt+Shift+Home         '^[[1;8H'
#   Ctrl+Alt+Shift+End          '^[[1;8F'
#   Ctrl+Alt+Shift+Insert       '^[[2;8~'
#   Ctrl+Alt+Shift+Delete       '^[[3;8~'
#   Ctrl+Alt+Shift+PageUp       '^[[5;8~'
#   Ctrl+Alt+Shift+PageDown     '^[[6;8~'
#   Ctrl+Alt+Shift+Backspace    '^?'
# )
#
# for kb in ${@:2}; do
#   seqs=('')
#   for kb in ${(@s: :)kb}; do
#     if [[ -n ${seq::=$_z4h_key[$kb]} ]]; then
#       seqs=(${^seqs}$seq)
#     else
#       case $kb in
#         ?~[a-z])
#           seqs=(${^seqs}$kb ${^seqs}${(L)kb})
#         ;;
#         Ctrl+[A-Z'[]\'])
#           seqs=(${^seqs}'^'$kb[-1])
#         ;;
#         (Alt|Option)+[A-Z'[]\/.,'])
#           new_seqs=(${^seqs}'^['$kb[-1] ${^seqs}'^['${(L)kb[-1]})
#           if zstyle -T :z4h:bindkey macos-option-as-alt &&
#             [[ -n ${seq::=$_z4h_macos_opt_key[$kb[-1]]} ]]; then
#             new_seqs+=(${^seqs}$seq)
#             if [[ -n ${seq::=$_z4h_macos_opt_key[${(L)kb[-1]}]} ]]; then
#               new_seqs+=(${^seqs}$seq)
#             fi
#           fi
#           seqs=($new_seqs)
#         ;;
#         Ctrl+(Alt|Option)+[A-Z'[]\'])
#           seqs=(${^seqs}'^[^'$kb[-1])
#         ;;
#         *)
#           print -Pru2 -- '%F{3}z4h%f: invalid key binding: %F{1}'${kb//\%/%%}'%f'
#           return '_z4h_err()'
#         ;;
#       esac
#     fi
#   done
# done
#
# for seq in ${(u)seqs}; do
#   builtin bindkey -- $seq $1
# done

# vim: ft=zsh:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
