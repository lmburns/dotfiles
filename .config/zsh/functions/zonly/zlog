# @desc: dump all kinds of info

emulate -L zsh
setopt extendedglob
local cpat="\~config/" zpat="\~zsh/"
local err nonl
integer vanilla=0 expnd=0

# funcfiletrace   filename:abs ln called; same len funcsourcetrace functrace
# funcsourcetrace filename:ln defined
# funcstack       function
# functrace       function:rel ln called

local function __dump() {
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  print -Pru2 -- "%14F%B[DUMP]%b%f:%20F${func}%f:%21F${file}%f: $*"

  # $LINENO

  zmodload -Fa zsh/parameter p:functrace p:funcfiletrace p:funcstack p:funcsourcetrace
  local t tl eq
  t='Func File Trace' tl=$#t eq=${(l:(COLUMNS-tl-2) / 2::=:):-}
  print -Pl -- "%13F%B${eq} ${t} ${eq}\n%f%b$funcfiletrace[@]"
  t='Func Trace' tl=$#t eq=${(l:(COLUMNS-tl-2) / 2::=:):-}
  print -Pl -- "\n%13F%B${eq} ${t} ${eq}\n%f%b$functrace[@]"
  t='Func Stack' tl=$#t eq=${(l:(COLUMNS-tl-2) / 2::=:):-}
  print -Pl -- "\n%13F%B${eq} ${t} ${eq}\n%f%b$funcstack[@]"
  t='Func Source Trace' tl=$#t eq=${(l:(COLUMNS-tl-2) / 2::=:):-}
  print -Pl -- "\n%13F%B${eq} ${t} ${eq}\n%f%b$funcsourcetrace[@]"
}

function print::error()   {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%12F%B[ERROR]%b%f:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}
function print::warning() {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%13F%B[WARN]%b%f:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}
function print::info()    {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%52F%B[INFO]%b%f:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}
function print::debug()   {
  if (( DEBUG )) {
    setopt extendedglob
    local func=$funcstack[-1]
    local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
    local trace=${${functrace[-1]#_}%:*}
    local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
    local msg="%18F%B[DEBUG]%b%f:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
    if (($expnd)) {
      xzmsg $err $nonl $msg
    } else {
      print -Pr $err $nonl $msg
    }
  }
}
function print::trace()   {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%47F%B[TRACE]%b%f:${${${(M)vanill:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}
function print::hint()  {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%22F%B[HINT]%b%f:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}
function print::success() {
  setopt extendedglob
  local func=$funcstack[-1]
  local file=${${${(D)${${${funcsourcetrace[-1]#_}%:*}:A}}//${~zpat}}//${~cpat}}
  local trace=${${functrace[-1]#_}%:*}
  local line=${${${(M)trace:#*.zshrc}:+${${functrace[-2]#_}##*:}}:-${${functrace[-1]#_}##*:}}
  local msg="%53F%B[SUCCESS]%f%b:${${${(M)vanilla:#0}:+%20F${func}%f:%52F${line}%f:%21F${file}%f:}:-} ${*}"
  if (($expnd)) {
    xzmsg $err $nonl $msg
  } else {
    print -Pr $err $nonl $msg
  }
}

function print_help() {
  print::usage "zmsg" "[FLAGS] [TEXT]"
  print::header 12 "OPTIONS"
  print::help 20 "-E,--error     " "          Print ERROR message [5 <= L < 10]"
  print::help 20 "-W,--warn      " "          Print WARNING message [L:4]"
  print::help 20 "-H,--hint      " "          Print HINT message [L:3]"
  print::help 20 "-I,--info      " "          Print INFO message [L:2]"
  print::help 20 "-D,--debug     " "          Print DEBUG message [L:1]"
  print::help 20 "-T,--trace     " "          Print TRACE message [L:0, L:+]"
  print::help 20 "-S,--success   " "          Print SUCCESS message [L:00]"
  print::help 20 "-s,--stack     " "          Print the full stack [L:=, L:@, L:>=10]"
  print::help 20 "-x,--expand    " "          Expand the message with custom codes"
  print::help 20 "-n,--nonl      " "          Don't add newline"
  print::help 20 "-e,--stderr    " "          Print to stderr"
  print::help 20 "-q,--quiet     " "          Don't print"
  print::help 20 "-p,--noquiet   " "          Override quiet"
  print::help 20 "-l,--level     " "[LEVEL]   Specify level [0-5, 10, +, =, @]"
  print::help 20 "-N,--name      " "[name]    Specify log name"
  print::help 20 "-v,--vanilla   " "          Do not print function:lineno"
  print::help 20 "    --help     " "           Show help menu"
  # ERROR: zmsg -hfFE
}

local function __getstack() {
  local i ident abslnum lnum file line
  typeset -ga reply
  integer longest=$((${#${(D)${${ZDOTDIR}//${~zpat}}}} + 6))

  zmodload -Fa zsh/parameter p:functrace p:funcsourcetrace

  for i ({1..$#functrace}) {
    line=''
    ident=${functrace[i]%:*}
    lnum=${functrace[i]##*:}
    abslnum=${funcfiletrace[i]##*:}
    file=${${${(D)${${${${funcfiletrace[i]#_}%:*}:A}}:-$ZSH_NAME}//${~zpat}}//${~cpat}}

    if [[ $functrace[$i] == */* ]]; then
      ident="{method}${(l:longest:: :)${(D)${${ident:A}//${~zpat}}//${~cpat}}}{%}"
    elif [[ $ident == '('*')' ]]; then
      ident="{func}${(l:longest:: :)ident}{%}"
    else
      ident="{func}${(l:longest:: :):-${ident}()}{%}"
    fi

    line+="${ident} %54F@ {ln}${(r:5:: :)lnum}{%}"

    (( ! vanilla )) && {
      line+=" {tag}[{file}${file}{%} %54F@ {ln}${abslnum}{tag}]{%}"
    }

    reply+=( $line )
  }
}

function zsh::log() {
  builtin emulate -L zsh -o extendedglob -o nopromptsubst
  zmodload -Fa zsh/parameter p:functrace p:funcsourcetrace
  zmodload -Fa zsh/zutil b:zparseopts

  local -A Opts
  builtin zparseopts ${${(M)ZSH_VERSION:#(5.[8-9]|6.[0-9])}:+-F} \
      -D -E -A Opts -- \
        -error   E  \
        -warn    W  \
        -hint    H  \
        -info    I  \
        -debug   D  \
        -trace   T  \
        -success S  \
        -nonl    n  \
        -stderr  e  \
        -quiet   q  \
        -vanilla v  \
        -noquiet p  \
        -stack   s  \
        -expand  x  \
        -name:   N: \
        -level:  l: \
        -help    h  \
        || { builtin print -Pr "invalid option given, see %52F--help%f"; return 7; }

  (( $+Opts[--help] )) && { print_help; return 0; }

  local log_t
  local logname=${${${Opts[-N]}:+${Opts[-N]}:}:-}

  # Don't print function info
  (( $+Opts[-v] + $+Opts[--vanilla] )) && vanilla=1
  (( $+Opts[-x] + $+Opts[--expand] )) && expnd=1

  # Quiet mode?
  [[ ( $+Opts[-q] == 1 || $+Opts[--quiet] == 1 ) \
      && ( $+Opts[-p] != 1 && $+Opts[--noquiet] != 1 ) ]] \
      && return

  local l=$Opts[-l]
  (( $+Opts[--level] )) && l=$Opts[--level]

  integer aplus=$(printf "%d" "'+") aequals=$(printf "%d" "'=")

  [[ $l == $'\x2b' ]]                  && { l=$aplus;   log_t='trace' }
  [[ $l == $'\x3d' || $l == $'\x40' ]] && { l=$aequals; log_t='stack' }

  ( (( $+Opts[-T] + $+Opts[--trace] )) || (( l == 0 )) )           && { log_t='trace' }
  ( (( $+Opts[-D] + $+Opts[--debug] )) || (( l == 1 )) )           && { log_t='debug' }
  ( (( $+Opts[-I] + $+Opts[--info] ))  || (( l == 2 )) )           && { log_t='info'  }
  ( (( $+Opts[-H] + $+Opts[--hint] ))  || (( l == 3 )) )           && { log_t='hint'  }
  ( (( $+Opts[-W] + $+Opts[--warn] ))  || (( l == 4 )) )           && { log_t='warn'  }
  ( (( $+Opts[-E] + $+Opts[--error] )) || (( l >= 5 && l < 10 )) ) && { log_t='error'   }

  [[ $l == 00 ]] && { log_t='success' }

  # Output to stderr?
  (($+Opts[-e] + $+Opts[--stderr])) && {
    err=-u2
    (($expnd)) && err=-e
  }
  # No new line?
  (($+Opts[-n] + $+Opts[--nonl])) && nonl=-n

  case $log_t in
    (success) print -Pn "%U%53F${logname}%f%u"; print::success "$1" ;;
    (trace)   print -Pn "%U%54F${logname}%f%u"; print::trace   "$1" ;;
    (debug)   print -Pn "%U%54F${logname}%f%u"; print::debug   "$1" ;;
    (info)    print -Pn "%U%54F${logname}%f%u"; print::info    "$1" ;;
    (hint)    print -Pn "%U%54F${logname}%f%u"; print::hint    "$1" ;;
    (warn)    print -Pn "%S%54F${logname}%f%s"; print::warning "$1" ;;
    (error)   print -Pn "%S%12F${logname}%f%s"; print::error   "$1" ;;
    (dump)    print -Pn "%S%12F${logname}%f%s"; __dump         "$1" ;;
    (*)
      # Can get this with:
      #   -s         | --stack
      #   --level=10 | -l100
      #   -l=        | -l@     | --level=@
      if ( (( $+Opts[-s] + $+Opts[--stack] )) \
        || (( ( l >= 10 && l != aplus ) || l == aequals )) ) {
        __getstack; zmsg "${(@F)reply}"
      } else {
        print -Pn "%U%54F${logname}%f%u"; print::info "$1"
      }
    ;;
  esac
}

zsh::log "$@"
