# Copyright (c) 2018 Sebastian Gniazdowski
#
# @str-dump

# @desc Dumps the contents of the variable, whether it's being a scalar,
#       an array or a hash. The contents of the hash are sorted on the
#       keys numerically, i.e.: by using `(on)` flags.
#
# @param $1: name of the variable of which contents should be dumped
# @flag  -q: enables quoting of printed data with q-flag (i.e.: backslash quoting).
#
# @example:
# ```zsh
#   array=( "" "a value" "test" )
#   @str-dump array
# ```
# => ''
# => a\ value
# => test
#
# ```zsh
#   typeset -A hash=( "a key" "a value" key value )
#   @str-dump -q hash
# ```
# => a\ key: a\ value
# => key: value


function @str-dump() {
    local MATCH; integer MBEGIN MEND

    integer idx
    if [[ $1 = -q ]] {
        integer quote=1
        shift
    } else {
        integer quote=0
    }

    if [[ $1 = -- ]] { shift; }

    local __var_name="$1"

    (( ${(P)+__var_name} )) || {
        zerr "the parameter '$__var_name' doesn't exist"
        return 1
    }
    case ${(Pt)__var_name} in
        (*array*)
            (( quote )) && \
                { print -rl -- "${(@)${(@AP)__var_name}//(#m)*/$((++idx)): ${(q)MATCH}}"; ((1)); } \
                  || print -rl -- "${(@)${(@AP)__var_name}//(#m)((#s))/$((++idx)): }"
            ;;
        (*association*)
            # The double kv usage is because the behavior
            # changed in a Zsh version
            local -a keys
            local key access_string
            keys=( "${(@kon)${(@Pk)__var_name}}" )
            for key in "${keys[@]}"; do
                access_string="${__var_name}[$key]"
                (( quote )) && \
                    { print -r -- "${(q)key}: ${(qP)access_string}"; ((1)); } \
                      || print -r -- "$key: ${(P)access_string}"
            done
            ;;
        (*)
            (( quote )) && \
                { print -r -- "${(qP)__var_name}"; ((1)); } \
                  || print -r -- "${(P)__var_name}"
            ;;
    esac

    return 0
}

@str-dump "$@"

# vim:ft=zsh:sw=4:sts=4:et
