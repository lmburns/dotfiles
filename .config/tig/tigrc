#  ━━━Main━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
set main-options   = -n 1000 # User-defined options for `tig` (git-log)
set diff-context   = 3       # Number of lines to show around diff changes (diff)
# set diff-highlight = "/usr/bin/diff-so-fancy"    # String (or bool): Path to diff-highlight script,
# set diff-options  = -C             # User-defined options for `tig show` (git-diff)
# set blame-options    = -C -C -C    # User-defined options for `tig blame` (git-blame)
# set log-options    = --pretty=raw  # User-defined options for `tig log` (git-log)

# Display
set show-changes         = yes   # Show changes commits in the main view?
set show-untracked       = yes   # Show also untracked changes?
set wrap-lines           = yes   # Wrap long lines in pager views?
set tab-size             = 2     # Number of spaces to use when expanding tabs
set line-graphics        = utf-8
set truncation-delimiter = ~     # Character drawn for truncations, or "utf-8"

# Format reference names based on type.
#  - head   : The current HEAD.
#  - tag    : An annotated tag.
#  - local-tag    : A lightweight tag.
#  - remote   : A remote.
#  - tracked-remote : The remote tracked by current HEAD.
#  - replace    : A replaced reference.
#  - branch   : A branch.
#  - stash    : The stash.
#  - other    : Any other reference.
# If no format is defined for `local-tag` then the one for `tag` is used.
# Similarly, `remote` is used if no `tracked-remote` format exists.
# Prefix with `hide:` to not show that reference type, e.g. `hide:remote`.
# Expects a space-separated list of format strings.
set reference-format    = [branch] <tag> {remote} ~replace~

# Settings controlling how content is read from Git
set commit-order                = default # Enum: auto, default, topo, date, reverse (main)
set status-show-untracked-dirs  = no      # Show files in untracked directories? (status)
set status-show-untracked-files = yes     # Show untracked files?
set ignore-space                = no      # Enum: no, all, some, at-eol (diff)
set show-notes                  = yes     # When non-bool passed as `--show-notes=...` (diff)
set mailmap                     = yes     # Use .mailmap to show canonical name and email address?

# Misc
set start-on-head      = no   # Start with cursor on HEAD commit?
set refresh-mode       = auto # (manual, auto, after-command, periodic)
set refresh-interval   = 10   # Interval in seconds between refreshes
set ignore-case        = smart-case   # (no, yes, smart-case) ignore case when searching
set wrap-search        = yes  # Wrap around to top/bottom of view when searching?
set focus-child        = yes  # Move focus to child view when opened?
set send-child-enter   = yes  # Propagate "enter" keypresses to child views?
set horizontal-scroll  = 33%  # Number of columns to scroll as % of width
set split-view-height  = 67%  # Height of the bottom view for horizontal splits
set vertical-split     = horizontal # (horizontal, vertical, auto); auto to switch to horiz split when width allows it
set split-view-width   = 50%  # Width of right-most view for vertical splits
set editor-line-number = yes  # Automatically pass line number to editor? open file at line e.g. from a diff
set history-size       = 500  # Size of persistent history, 0 to disable
set mouse              = yes  # Enable mouse support?
set mouse-scroll       = 3    # Number of lines to scroll via the mouse
set mouse-wheel-cursor = no   # Prefer moving the cursor to scrolling the view?
set pgrp               = no   # Make tig process-group leader?
set pager-autoscroll   = no   # Scroll the pager view automatically while loading?
# ]]]

#  ━━━Views━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
# Supported column types and their options:
#
#   author
#     - display (enum) [no|full|abbreviated|email|email-user] : Show author information?
#     - width (int)      : Fixed width when nonzero
#     - maxwidth (int)   : Autosize limit
#   commit-title
#     - display (bool)             : Show the commit title?
#     - graph (enum) [no|v2|v1]    : Show the commit graph? (main view only)
#     - refs (bool)                : Show branches, tags and remotes? (main view only)
#     - overflow (boolint)         : Highlight overflows? Defaults to 50 when enabled.
#   date
#     - display (enum) [no|default|relative|relative-compact|custom] : Show dates?
#     - local (bool)         : Show local dates?
#     - format (string)      : Custom strftime(3) format Note: %Z is formatted as %z
#     - width (int)          : Fixed width when nonzero
#   file-name
#     - display (enum) [no|always|auto] : Show file names?
#     - width (int)                     : Fixed width when nonzero
#     - maxwidth (int)                  : Autosize limit
#   file-size
#     - display (enum) [no|default|units] : Show file sizes?
#     - width (int)                       : Fixed width when nonzero
#   id
#     - display (bool) : Show commit/tree ID?
#     - width (int)    : Fixed width when nonzero
#   line-number
#     - display (bool) : Show line numbers?
#     - interval (int) : Interval between line numbers; defaults to 5
#     - width (int)    : Fixed width when nonzero
#   mode
#     - display (bool) : Show file modes?
#     - width (int)    : Fixed width when nonzero
#   ref
#     - display (bool) : Show ref names?
#     - width (int)    : Fixed width when nonzero
#     - maxwidth (int) : Autosize limit
#   status
#     - display (enum) [no|short|long] : Show status label?
#   text
#     - display (bool)                  : Show text?
#     - commit-title-overflow (boolint) : Highlight overflow in log and diff view?
#
set main-view   = line-number:no,interval=5 id:yes date:relative author:full commit-title:yes,graph:v2,refs,overflow=no
set blame-view  = date:default,format="%Y-%m-%d" author:full file-name:auto id:yes,color line-number:yes,interval=5 text
set grep-view   = file-name:no line-number:yes,interval=1 text
# line-number:no id:no
set refs-view   = date:default,format="%Y-%m-%d" author:full ref commit-title
set stash-view  = line-number:no,interval=5 id:no date:default,format="%Y-%m-%d" author:full commit-title
set status-view = line-number:no,interval=5 status:short file-name
set tree-view   = line-number:no,interval=5 mode author:full file-size date:default,format="%Y-%m-%d" mode:yes id:no file-name
set reflog-view = line-number:no,interval=5 id:yes date:no,format="%Y-%m-%d" author:no commit-title:yes,refs,overflow=no

# Pager based views
set pager-view = line-number:no,interval=5 text
set stage-view = line-number:no,interval=5 text
set log-view   = line-number:no,interval=5 text
set blob-view  = line-number:no,interval=5 text
set diff-view  = line-number:no,interval=5 text:yes,commit-title-overflow=no
# ]]]

#  ━━━Bindings━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
# These commands allow to run shell commands directly from within Tig.
# Unless otherwise specified, commands are run in the foreground with
# their console output shown (as if '!' was specified). When multiple
# command options are specified their behavior are combined, e.g. "?<git
# commit" will prompt the user whether to execute the command and will
# exit Tig after completion.
#
#   ! Run the command in the foreground with output shown.
#   @ Run the command in the background with no output.
#   ? Prompt the user before executing the command.
#   + Run the command synchronously, and echo the first line of output to the status bar.
#   < Exit Tig after executing the command.
#   > Re-open Tig instantly in the last displayed view after executing the command.
#
#   %(head)          current ref ID. Defaults to HEAD
#   %(commit)        current commit ID.
#   %(blob)          current blob ID.
#   %(branch)        current branch name.
#   %(remote)        current remote name.
#   %(tag)           current tag name.
#   %(stash)         current stash name.
#   %(directory)     current directory path in the tree view; empty for the root directory.
#   %(file)          currently selected file.
#   %(ref)           reference given to blame or HEAD if undefined.
#   %(revargs)       revision arguments passed on the command line.
#   %(fileargs)      file arguments passed on the command line.
#   %(cmdlineargs)   All other options passed on the command line.
#   %(diffargs)      diff options from `diff-options` or `TIG_DIFF_OPTS`
#   %(prompt)        Prompt for the argument value.

#  ═══Generic═════════════════════════════════════════════════ [[[
# === View Switching === [[[
bind generic v  none
bind generic vm view-main
bind generic vd view-diff
bind generic vl view-log
bind generic vL view-reflog  # ve
bind generic vt view-tree
bind generic vx view-blob    # vf
bind generic vb view-blame
bind generic vr view-refs
bind generic vs view-status
bind generic vu view-stage   # vc
bind generic vy view-stash
bind generic vg view-grep
bind generic vp view-pager
bind generic vh view-help
# bind generic K  view-help
# ]]]

# === Option Toggling === [[[
# TODO: tree view toggle show id
# TODO: reflog-view-commit-title-graph

# author
# commit-order
# commit-title-graph
# commit-title-overflow
# commit-title-refs
# date
# file-filter
# file-name
# file-size
# id
# ignore-space
# line-graphics
# line-number
# rev-filter
# show-changes
# sort-field                    = tree refs
# sort-order                    = tree refs
# status
# status-show-untracked-dirs
# vertical-split

bind generic o  none
bind generic ow options                            # open the options menu
bind generic oo :toggle sort-order                 # toggle ascending/descending sort order
bind generic os :toggle sort-field                 # toggle field to sort by
bind generic on :toggle line-number                # toggle line numbers
bind generic od :toggle date                       # toggle date display
bind generic oa :toggle author                     # toggle author display
bind generic oG :toggle line-graphics              # toggle (line) graphics mode
bind generic of :toggle file-name                  # toggle file name display
bind generic oz :toggle file-size                  # toggle file size format
bind generic ol :toggle file-filter                # toggle filtering by pathspecs in file-args
bind generic op :toggle ignore-space               # toggle ignoring whitespace in diffs
bind generic oh :toggle show-changes               # toggle local changes display in the main view
bind generic oi :toggle id                         # toggle commit ID display
bind generic oe :toggle rev-filter                 # toggle filtering by revisions in rev-args
bind generic ou :toggle status-show-untracked-dirs # toggle display of file in untracked directories
bind generic ov :toggle vertical-split             # toggle vertical split
bind generic oj :toggle commit-order               # toggle commit ordering
bind generic ot :toggle commit-title-overflow      # toggle highlighting of commit title overflow

bind generic or :toggle commit-title-refs          # toggle reference display (tags/branches)
bind generic og :toggle commit-title-graph         # toggle revision graph visualization
bind generic oS :toggle status                     # toggle status display

bind generic oFn    :toggle file-name          # toggle file name display
bind generic oFz    :toggle file-size          # toggle file size format
bind generic oFl    :toggle file-filter        # toggle filtering by pathspecs in file-args
bind generic .      :toggle line-number        # toggle line numbers
bind generic %      :toggle file-filter        # toggle filtering by pathspecs in file-args
bind generic ~      :toggle line-graphics      # toggle (line) graphics mode
bind generic <Hash> :toggle id                 # toggle line numbers

bind tree    *    :toggle file-name          # toggle showing filename in tree view

bind main    og   :toggle commit-title-graph # toggle revision graph visualization
bind main    or   :toggle commit-title-refs  # toggle reference display (tags/branches)
bind reflog  or   :toggle commit-title-refs  # toggle reference display (tags/branches)
bind status  ot   :toggle status             # toggle status display
bind status  oS   :toggle status             # toggle status display
# ]]]

# === View Manipulation === [[[
bind generic g none
bind generic z none

bind generic  q      view-close  # close the current view
bind generic  Q      quit        # close all views and quit
bind generic  <C-C>  quit        # close all views and quit
bind generic  <F5>   refresh     # reload and refresh view
bind generic  R      refresh     # reload and refresh view
bind generic  O      maximize    # maximize the current view
bind generic  z/     maximize    # maximize the current view

bind generic <Enter>     enter       # enter and open selected entry
bind generic <Tab>       view-next   # move focus to the next view
bind generic <Lt>        back        # go back to the previous view state
bind generic <Down>      next        # move to next
bind generic <Up>        previous    # move to previous
bind generic <C-N>       next        # move to next
bind generic <C-P>       previous    # move to previous
bind generic <C-w><C-w>  view-next   # move focus to the next view

bind generic gj      next        # move to next
bind generic gk      previous    # move to previous
bind generic gn      view-next   # move focus to the next view
bind generic gp      parent      # move to parent
bind generic gP      back        # go back to the previous view state
bind generic H       back        # go back to the previous view state
# ]]]

# === Cursor / Scrolling === [[[
bind generic  j       move-down
bind generic  k       move-up
bind generic  h       scroll-left
bind generic  l       scroll-right
bind generic  gg      move-first-line
bind generic  G       move-last-line

bind generic  gJ      move-half-page-down
bind generic  gK      move-half-page-up
bind generic  J       scroll-half-page-down
bind generic  K       scroll-half-page-up
bind generic <PgDown> move-page-down
bind generic <PgUp>   move-page-up
bind generic <Space>  move-page-down
# bind generic  -       move-page-up
bind generic <Home>   move-first-line
bind generic <End>    move-last-line
bind generic <C-F>    scroll-page-down
bind generic <C-B>    scroll-page-up

bind generic  0       scroll-first-col
bind generic g0       scroll-first-col
bind generic |        scroll-first-col
bind generic <Left>   scroll-left
bind generic <Right>  scroll-right
bind generic <C-Y>    scroll-line-up
bind generic <C-E>    scroll-line-down
bind generic <Ins>    scroll-line-up
bind generic <Del>    scroll-line-down
bind generic <SBack>  scroll-page-up
bind generic <SFwd>   scroll-page-down
# bind generic  <>      scroll-half-page-up
# bind generic  <>      scroll-half-page-down
# ]]]

# === Search === [[[
bind generic  [    none
bind generic  ]    none
bind generic  /    search
bind generic  ?    search-back
bind generic  n    find-next
bind generic  N    find-prev
bind generic [q    find-prev
bind generic ]q    find-next

# Navigation keys used while searching
bind search <Down> find-next
bind search <C-N>  find-next
bind search <C-J>  find-next
bind search <Up>   find-prev
bind search <C-P>  find-prev
bind search <C-K>  find-prev
bind search q      view-close
# ]]]

# === Help === [[[
bind help  z    none
bind help  zc   enter         # toggle open/close of binding folds
bind help  zo   enter         # toggle open/close of binding folds
bind help  z.   enter         # toggle open/close of binding folds
bind help  d    scroll-half-page-down
bind help  u    scroll-half-page-up
# ]]]

# === Misc === [[[
bind generic  e     edit           # open in editor
bind generic  :     prompt         # open the prompt
bind generic  <C-L> screen-redraw  # redraw the screen
bind generic  zR    screen-redraw  # redraw the screen
bind generic  zr    refresh        # reload and refresh view
bind generic  zS    stop-loading   # stop all loading views
bind generic  zV    show-version   # show Tig version

bind generic @      none
bind generic @k     :?^@@                    # jump to previous (c)hunk
bind generic @j     :/^@@                    # jump to next (c)hunk
bind generic @-     :toggle diff-context -1  # decrease the diff context
bind generic @+     :toggle diff-context +1  # increase the diff context

bind generic [c     :?^@@                    # jump to previous (c)hunk
bind generic ]c     :/^@@                    # jump to next (c)hunk
bind generic [m     move-prev-merge
bind generic ]m     move-next-merge
# ]]]

# === External === [[[
bind generic E   none

# sh -c "${(z)@}" &>/dev/null &; disown
# nohup "${(z)@}" >/dev/null 2>&1 &
#   with '&', no confirm when coming back
bind generic Ec   !sh -c "$EDITOR $XDG_CONFIG_HOME/tig/tigrc" & # edit config
bind generic Er   :source ~/.config/tig/tigrc                   # reload config
bind generic xrc  !sh -c "$EDITOR $XDG_CONFIG_HOME/tig/tigrc" & # edit config
bind generic xrr  :source ~/.config/tig/tigrc                   # reload config
bind generic xre  :source ~/.config/tig/tigrc                   # reload config

bind generic c   none
bind generic cc  !git commit
bind generic cs  !git commit --gpg-sign
bind generic cl  !git commit --gpg-sign --all
bind generic ca  !git commit --gpg-sign --amend
bind generic ce  !?@git commit --gpg-sign --amend --no-edit
bind generic cw  !git commit --gpg-sign --amend --only
bind generic cva !git commit --gpg-sign -v --amend
bind generic cvc !git commit --gpg-sign -v
bind generic cRa !git commit --gpg-sign --reset-author --amend
bind generic cRe !?@git commit --gpg-sign --reset-author --amend --no-edit
bind generic cRw !git commit --gpg-sign --reset-author --amend --only
bind generic cf  !git commit --gpg-sign --fixup=%(commit)
bind generic cs  !?@git commit --gpg-sign --no-edit --squash=%(commit)
bind generic cA  !git commit --gpg-sign --edit --squash=%(commit)
bind generic cu  !git commit --gpg-sign --reuse-message=HEAD
bind generic +   !git commit --amend

bind generic crc   !git revert -S %(commit)
bind generic crn   !git revert --no-commit %(commit)

bind generic cm<Enter>  !git merge
# bind generic cmt        !git mergetool
bind generic cmt        status-merge      # open git-mergetool(1)

# --quiet
bind generic cz<Enter>  !git stash
bind generic cza        !git stash apply --index %(stash)
bind generic czA        !git stash apply %(stash)
bind generic czd        !git stash pop --index %(stash)
bind generic czp        !git stash pop %(stash)
bind generic czh        !git stash push --staged
bind generic czw        !git stash push --keep-index
bind generic czW        !git stash push --keep-index --all
bind generic czU        !git stash push --keep-index --include-untracked
bind generic czz        !git stash push
bind generic czZ        !git stash push --all
bind generic czu        !git stash push --include-untracked
bind generic czS        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit stash_show" &
bind generic czP        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit stash_push" &
bind generic czss        @git stash save "%(prompt New stash name: )"   # stash save
bind generic czsi        @git stash save --include-untracked "%(prompt New stash name: )"  # stash all – also untracked files

bind generic co<Enter>  !git checkout
bind generic coo        !git checkout %(commit)
bind generic <C-j>      !git checkout %(branch)
bind generic cob        !git switch %(branch)
bind generic cof        !git checkout %(file)
bind generic co-        !git switch -
bind generic coB        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_branch" &
bind generic coO        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_commit" &
bind generic coF        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_file" &
bind generic coT        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_tag" &

bind generic r          none
bind generic r<Enter>   !git rebase
bind generic rii        !git rebase --interactive
bind generic rir        !git rebase --interactive %(ref)
bind generic rih        !git rebase --interactive %(head)
bind generic ric        !git rebase --interactive %(commit)
bind generic rf         !git -c sequence.editor=true rebase --interactive --autosquash
bind generic ru         !git rebase --interactive @{upstream}
bind generic rp         !git rebase --interactive @{push}
bind generic rr         !git rebase --continue
bind generic rs         !git rebase --skip
bind generic ra         !git rebase --abort
bind generic re         !git rebase --edit-todo
bind generic rF         !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit blame" &

bind generic a   none
bind generic af  !git add %(file)        # add current file
bind generic ap  !git add -p %(file)     # partially add current file
bind generic al  !@git add -N %(file)    # record path will be added later
bind generic aF  !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit add" &

bind generic R     none
bind generic Rf    !@git reset HEAD %(file)      # unstage single file
bind generic RF    !@git reset -q HEAD           # unstage all
bind generic Rc    !@git reset --mixed HEAD~1    # uncommit last
bind generic Rs    !@git reset --soft HEAD^1     # undo last
bind generic Rh    !@git reset --hard HEAD %(file)
bind generic R1    !@git reset --hard HEAD~1
bind generic R2    !@git reset --hard HEAD~2
bind generic <C-r> !git reset --soft %(commit)

bind generic P  none
bind generic Pr !git pull origin %(branch) --rebase
bind generic Pm !git pull origin master
bind generic f  none
bind generic fa !git fetch --all
bind generic fp !git fetch --prune

bind generic s     none
bind generic sp    !git push %(remote) %(branch)
bind generic >     !git push %(remote) %(branch)
bind generic <C-b> !git push %(remote) --delete %(branch)

bind generic gl     !git log %(file)
bind generic <C-x>  !git branch -D %(branch)
bind generic T      !git notes edit %(commit)  # add notes to a commit

bind generic ,          none
bind generic ,a         !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit add" &
bind generic ,bl        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit blame" &
bind generic ,bd        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit branch_delete" &
bind generic ,fu        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit fixup" &
bind generic ,rh        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit reset_head" &
bind generic ,rb        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit rebase" &
bind generic ,rc        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit revert_commit" &
bind generic ,ss        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit stash_show" &
bind generic ,sp        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit stash_push" &
bind generic ,cl        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit clean" &
bind generic ,cp        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit cherry_pick" &
bind generic ,cb        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_branch" &
bind generic ,co        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_commit" &
bind generic ,cf        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_file" &
bind generic ,ct        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit checkout_tag" &
bind generic ,ig        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit ignore" &
bind generic ,di        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit diff" &
bind generic ,lo        !zsh -c "FORGIT_FZF_DEFAULT_OPTS='--height=100%' git forgit log" &

bind generic y none
# bind generic yy !@csh -c "echo -n %(commit) | xsel -ib"
# bind generic yb !@csh -c "echo -n %(branch) | xsel -ib"
# bind generic yr !@csh -c "echo -n %(remote) | xsel -ib"
bind generic yy +csh -c "printf %(commit) | xsel -ib && printf 'Copied: commit [%(commit)]' || printf 'Error copying commit ID: %(commit)'"
bind generic yc +csh -c "printf %(commit) | xsel -ib && printf 'Copied: commit [%(commit)]' || printf 'Error copying commit ID: %(commit)'"
bind generic yb +csh -c "printf %(branch) | xsel -ib && printf 'Copied: branch [%(branch)]' || printf 'Error copying branch: %(branch)'"
bind generic yr +csh -c "printf %(remote) | xsel -ib && printf 'Copied: remote [%(remote)]' || printf 'Error copying remote: %(remote)'"
bind generic yR +csh -c "printf %(ref) | xsel -ib && printf 'Copied: ref [%(ref)]' || printf 'Error copying ref: %(ref)'"
bind generic ys +csh -c "printf %(stash) | xsel -ib && printf 'Copied: stash [%(stash)]' || printf 'Error copying stash: %(stash)'"
bind generic yf +sh -c "xsel -ib <\"%(file)\" && printf 'Copied: file contents [%(file)]' || printf 'Error copying file contents: %(file)'"

#   ! Run the command in the foreground with output shown.
#   @ Run the command in the background with no output.
#   ? Prompt the user before executing the command.
#   + Run the command synchronously, and echo the first line of output to the status bar.
#   < Exit Tig after executing the command.
#   > Re-open Tig instantly in the last displayed view after executing the command.
#
#   %(head)          current ref ID. Defaults to HEAD
#   %(commit)        current commit ID.
#   %(blob)          current blob ID.
#   %(branch)        current branch name.
#   %(remote)        current remote name.
#   %(tag)           current tag name.
#   %(stash)         current stash name.
#   %(directory)     current directory path in the tree view; empty for the root directory.
#   %(file)          currently selected file.
#   %(ref)           reference given to blame or HEAD if undefined.
#   %(revargs)       revision arguments passed on the command line.
#   %(fileargs)      file arguments passed on the command line.
#   %(cmdlineargs)   All other options passed on the command line.
#   %(diffargs)      diff options from `diff-options` or `TIG_DIFF_OPTS`
#   %(prompt)        Prompt for the argument value.
# ]]]
# ]]]

#  ━━━View Specific━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[

# === Status === [[[
bind status D  none
bind status DD !@?rip %(file)  # delete a file

bind status R !@git reset HEAD %(file)
bind status A !@git commit --amend
bind status N !@git add -N %(file)
bind status P !git push %(remote)
bind status xpga !git push
bind status xpom !git push origin master
bind status xpog !git push origin
bind status xdf !sh -c "git difftool -y \"$(git rev-parse --show-toplevel)/%(file)\""   # compare changed file in status view
# bind status xss @git stash save "%(prompt New stash name: )"   # stash save
# bind status xsis @git stash save --include-untracked "%(prompt New stash name: )"  # stash all – also untracked files
# ]]]

# === Diff === [[[
bind diff @   none
bind diff [   none
bind diff ]   none

bind diff <Down> move-down
bind diff <Up>   move-up

bind diff _      :toggle diff-context -1  # decrease the diff context by 1
bind diff -      :toggle diff-context -1  # decrease the diff context by 1
bind diff +      :toggle diff-context +1  # increase the diff context by 1
bind diff g-     :toggle diff-context -5  # decrease the diff context by 5
bind diff g+     :toggle diff-context +5  # increase the diff context by 5

# Edit all files of commit
bind diff A !git add %(file)              # add current file
bind diff C !git commit -av               # add and commit
bind diff p !git add -p %(file)           # partially add current file
bind diff F !@sh -c "git show %(commit) --pretty=format: --name-only | xargs | xsel -ib"
bind diff E !<sh -c "nvim -c 'Gedit %(commit)' $(ls | head -1)"
bind diff V !<sh -c "nvim $(git show %(commit) --pretty=format: --name-only | xargs)"

bind diff P !git push %(remote)
bind diff xpga !git push
bind diff xpom !git push origin master
bind diff xpog !git push origin
# ]]]

# === Stage === [[[
bind stage @  none
bind stage [  none
bind stage ]  none
# ]]]

# === Pager === [[[
bind pager @  none
# ]]]

# === Main === [[[
bind main H    :goto HEAD    # jump to HEAD commit
# ]]]

# === Refs === [[[
bind refs <C-h> !@git reset --hard %(remote)/%(branch)                # create a new branch from the selected one
bind refs xnb   !@git checkout -b "%(prompt New branch name: )" %(branch)
# ]]]
# ]]]

bind status  u  none
bind stage   u  none
bind generic uu status-update     # stage/unstage changes in file
bind generic ur status-revert     # revert changes in file
bind generic um status-merge      # open git-mergetool(1)
bind generic ul stage-update-line # stage/unstage current line
bind generic up stage-update-part # stage/unstage part of chunk
bind generic us stage-split-chunk

bind stage  1 stage-update-line  # stage a single line
bind stage  2 stage-update-part  # stage/unstage part of chunk
bind stage  ! status-revert      # revert current diff (c)hunk
# ]]]

# Main [[[
bind main  G   move-last-line

bind main g    none
bind main gf   !git fetch
bind main gr   !git revert %(commit)

bind main ! !git revert %(commit)
bind main A @git commit --amend --reuse-message=HEAD
bind main C !?git checkout %(commit)
bind main H !?git reset --hard %(commit)
bind main R !git rebase -i --autosquash %(commit)^
bind main Z !git cherry-pick %(commit)
bind main F @git commit --fixup %(commit)
# bind main E !<sh -c "vim -c 'Gedit %(commit)' $(ls | head -1)"
bind main V !<sh -c "nvim $(git show %(commit) --pretty=format: --name-only | xargs)"
bind main Y !@csh -c "echo -n %(commit) | pbcopy"

bind main ! !git revert %(commit)   # revert a commit

bind main Pu !git push %(remote)
bind main xpga !git push
bind main xpom !git push origin master
bind main xpog !git push origin

# Compare selected commit in log view (main view) with its parent
bind main xdp !git difftool -d %(commit)^!

# Compare two selected commits
bind main xd2 !sh -c "echo Checking branch existence; \
    if [ \"$(git branch --list temp-compare-base)\" != \"\" ]; then\
        echo Branch exists, comparing with %(commit); \
        git difftool -d temp-compare-base..%(commit); \
        git branch --delete temp-compare-base; \
    else \
        echo Creating initial branch at %(commit); \
        git branch temp-compare-base %(commit); \
    fi;"
# ]]]

# Tree [[[
bind tree V !nvim %(file)
bind tree B !bat --paging=always -f %(file)
# ]]]

# Branch [[[
bind branch N !@git branch %(prompt)
bind branch C !@git co %(branch)
bind branch R !@git rebase
bind branch D !@git branch -D %(branch)
# ]]]

# Refs [[[
bind refs C !git checkout %(ref)
bind refs D !@git branch -D %(branch)
bind refs ! ?@git branch -D %(branch)

bind refs d none
bind refs dd !@git branch -D %(branch)

bind refs g none
bind refs gc !@git checkout %(ref)
# ]]]

# Stage [[[
# bind stage  \ stage-split-chunk # Split current diff (c)hunk
bind stage 1 stage-update-line # Stage a single line
bind stage C !@git commit # Commit staging changes
bind stage P !git push %(remote)
bind stage xpga !git push
bind stage xpom !git push origin master
bind stage xpog !git push origin
# ]]]

# Stash [[[
# Drop the selected stash
bind stash D !?git stash drop %(stash)
# Apply the selected stash
bind stash A !?git stash apply %(stash)
# ]]]
# ]]]

#  ━━━Colors━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
color cursor white blue
color status white default
color title-focus white blue
color title-blur white default
color date yellow default
color author red default bold
color main-head magenta default
color main-tag magenta default
color stat-staged green default
color stat-unstaged red default
color stat-untracked yellow default
color tree.header white default
color tree.directory cyan default
# Can define new for: pager, blob, diff, stage
#
# Prefix the name of a view to set a color only for that view, e.g.
#      `color grep.file     blue  default`
#
# As an example, this setting will to color Signed-off-by lines with a
# yellow foreground color and use the default background color.
#
#       color "    Signed-off-by" yellow  default
#
# Note the four leading spaces in the string to match. This is because
# Git automatically indents commit messages by four spaces.

# color "---"     blue  default
# color "diff --"     yellow  default
# color "--- "      yellow  default
# color "+++ "      yellow  default
# color "@@"      magenta default
# color "+"     green default
# color " +"      green default
# color "-"     red default
# color " -"      red default
# color "index "      blue  default
# color "old file mode "    yellow  default
# color "new file mode "    yellow  default
# color "deleted file mode "  yellow  default
# color "copy from "    yellow  default
# color "copy to "    yellow  default
# color "rename from "    yellow  default
# color "rename to "    yellow  default
# color "similarity "   yellow  default
# color "dissimilarity "    yellow  default
# color "\ No newline at end of file" blue  default
# color "diff-tree "    blue  default
# color "Author: "    cyan  default
# color "Commit: "    magenta default
# color "Tagger: "    magenta default
# color "Merge: "     blue  default
# color "Date: "      yellow  default
# color "AuthorDate: "    yellow  default
# color "CommitDate: "    yellow  default
# color "TaggerDate: "    yellow  default
# color "Refs: "      red default
# color "Reflog: "    red default
# color "Reflog message: "  yellow  default
# color "stash@{"     magenta default
# color "commit "     green default
# color "parent "     blue  default
# color "tree "     blue  default
# color "author "     green default
# color "committer "    magenta default
# color "    Signed-off-by:"  yellow  default
# color "    Acked-by:"   yellow  default
# color "    Reviewed-by:"  yellow  default
# color "    Helped-by:"    yellow  default
# color "    Reported-by:"  yellow  default
# color "    Mentored-by:"  yellow  default
# color "    Suggested-by:" yellow  default
# color "    Cc:"     yellow  default
# color "    Noticed-by:"   yellow  default
# color "    Tested-by:"    yellow  default
# color "    Improved-by:"  yellow  default
# color "    Thanks-to:"    yellow  default
# color "    Based-on-patch-by:"  yellow  default
# color "    Contributions-by:" yellow  default
# color "    Co-authored-by:" yellow  default
# color "    Requested-by:" yellow  default
# color "    Original-patch-by:"  yellow  default
# color "    Inspired-by:"  yellow  default
# color default     default default normal
# color cursor      white green bold
# color status      green default
# color delimiter     magenta default
# color date      blue  default
# color mode      cyan  default
# color id      magenta default
# color overflow      red default
# color header      yellow  default
# color section     cyan  default
# color directory     yellow  default
# color file      default default
# color grep.file     blue  default
# color file-size     default default
# color line-number   cyan  default
# color title-blur    white blue
# color title-focus   white blue  bold
# color main-commit   default default
# color main-annotated    default default bold
# color main-tag      magenta default bold
# color main-local-tag    magenta default
# color main-remote   yellow  default
# color main-replace    cyan  default
# color main-tracked    yellow  default bold
# color main-ref      cyan  default
# color main-head     cyan  default bold
# color stat-none     default default
# color stat-staged   magenta default
# color stat-unstaged   magenta default
# color stat-untracked    magenta default
# color help-group    blue  default
# color help-action   yellow  default
# color diff-stat     blue  default
# color diff-add-highlight  green default standout
# color diff-del-highlight  red default standout
# color palette-0     magenta default
# color palette-1     yellow  default
# color palette-2     cyan  default
# color palette-3     green default
# color palette-4     default default
# color palette-5     white default
# color palette-6     red default
# color palette-7     magenta default bold
# color palette-8     yellow  default bold
# color palette-9     cyan  default bold
# color palette-10    green default bold
# color palette-11    default default bold
# color palette-12    white default bold
# color palette-13    red default bold
# color graph-commit    blue  default
# color search-result   black yellow
#
# # Mappings for colors read from git configuration.
# # Set to "no" to disable.
# set git-colors = \
#   branch.current=main-head \
#   branch.local=main-ref \
#   branch.plain=main-ref \
#   branch.remote=main-remote \
#   \
#   diff.meta=diff-header \
#   diff.meta=diff-index \
#   diff.meta=diff-oldmode \
#   diff.meta=diff-newmode \
#   diff.frag=diff-chunk \
#   diff.old=diff-del \
#   diff.new=diff-add \
#   \
#   diff-highlight.oldHighlight=diff-del-highlight \
#   diff-highlight.newHighlight=diff-add-highlight \
#   \
#   grep.filename=grep.file \
#   grep.linenumber=grep.line-number \
#   grep.separator=grep.delimiter \
#   \
#   status.branch=status.header \
#   status.added=stat-staged \
#   status.updated=stat-staged \
#   status.changed=stat-unstaged \
#   status.untracked=stat-untracked
# ]]]

# UNBOUND
# bind generic {  back
# bind generic }  back
# bind generic (  back
# bind generic )  back
# bind generic <Hash> :toggle line-number   # toggle line numbers
# bind generic  -       move-page-up
# bind generic  R      refresh     # reload and refresh view

# vim: ft=tmux:et:sw=4:ts=4:sts=2:fdm=marker:fmr=[[[,]]]:
