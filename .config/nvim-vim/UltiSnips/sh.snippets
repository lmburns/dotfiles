snippet usage "Show usage..." b
usage() { echo "Usage: \$(basename "\$0") <${1:param}>" >&2; }
endsnippet

snippet sdir "Description" b
SDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)${1: && cd "$SDIR"${2: || exit 1}}
endsnippet

snippet sdir1 "Set SCRIPT_DIR variable to directory script is located."
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# getopt
endsnippet

snippet continue? "Continue? [y/N]" b
read -n1 -rp "${1:Continue? [y/N] }" res; echo
${2:[[ ! $res =~ y|Y ]] && exit 1}

endsnippet

snippet hascmd "If command exists..." b
hash ${1:cmd} &>/dev/null ${2:&&} ${3:do something with $1}
endsnippet


snippet Continue? "Continue? [y/N]" b
if [ "$1" != "-y" ]; then
	read -r -p "Continue? [y/N] " response
	case "$response" in
		[yY][eE][sS]|[yY])
			;;
		*)
			exit 0
			;;
	esac
fi
endsnippet

snippet root "Get root privilege" b
[ "$(whoami)" != "root" ] && exec sudo -- "\$0" "$@"

endsnippet

snippet temp "Temp file or directory"
${6:trap 'command rm -rf $$1' ${7:EXIT INT TERM HUP}}
${1:TEMP}="$(mktemp -${2:d}t ${5:"$(basename "\$0")"}.XXXXXX)"
endsnippet

snippet daily_schedule "Daily schedule template" b
usage() {
	echo "Usage: \$0 <yyyy-MM-dd>" >&2
	exit 1
}

if [[ \$# -ne 1 ]]; then
	usage
	exit
fi
date=\`date --date=\$1 +%F\`

SCRIPT_DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
cd \$SCRIPT_DIR

endsnippet

snippet ls_full_path "List with full path" b
ls -d${2} "${1:$PWD}"/*
endsnippet

snippet path "Export PATH env" b
PATH=${1:$2/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$HOME/.local/bin:$HOME/bin$3}

endsnippet

snippet gemhome "export GEM_HOME=..." b
export GEM_HOME="`gem env home |sed "s#$HOME#\$HOME#"`"
$1
endsnippet

snippet gohome "export GOPATH=..." b
export GOPATH="`echo $GOPATH |sed "s#$HOME#\$HOME#"`"
export PATH="$PATH:$GOPATH/bin"
$1
endsnippet

# snippet logpath "setting log path..." b
# logdir="logs/$(date -I)"
# logPath="$logdir/${1:`!v expand('%:t')`}.log"
# mkdir -p "$logdir"
# endsnippet

snippet logfile "log to file" b
log() { echo "$(date -Iseconds)" "$*"${1: >>"$logfile"}; }
$2
endsnippet

snippet join_by "join function" b
join_by() { local d=\$1; shift; echo -n "\$1"; shift; printf "%s" "${@/#/$d}"; }
endsnippet

snippet link_target "get link target" i
$(dirname $(readlink "${1:\$0}"))
endsnippet

snippet ifssh "If in ssh session..." b
[ "$SSH_CLIENT" ] ${1:&&} ${2:do something with}
endsnippet

snippet #! "#!/usr/bin/env bash" b
#!/usr/bin/env bash
endsnippet

snippet sbash "safe bash guard" b
set -euo pipefail
IFS=$'\n\t'

$0
endsnippet

snippet logstagefn "Simple function to log stage message" b
logstage() { echo "$(date -Iseconds) - [\$1]: \$2"; }
endsnippet

snippet logstage "Log stage message" b
logstage "beg" "${1:do something} ..."
${2:${VISUAL}}
logstage "end" "$1." && echo
endsnippet

snippet readlines "Read a file line by line" b
while IFS='' read -r line || [[ -n "$line" ]]; do
	${1:echo "$line"}
done < "${2:$file}"
endsnippet

snippet arrayfromfile "Read lines to array" b
readarray -t ${1:arr} <${2:/path/to/file}
endsnippet

snippet arrayfromcmd "Read lines to array from cmd" b
readarray -t ${1:arr} <(${2:cmd})
endsnippet

snippet log "log messages with color" b
info() { printf "${1:$(date -Is) }%b[info]%b %s\n" '\e[0;32m\033[1m' '\e[0m' "$*" >&2; }
warn() { printf "$1%b[warn]%b %s\n" '\e[0;33m\033[1m' '\e[0m' "$*" >&2; }
erro() { printf "$1%b[erro]%b %s\n" '\e[0;31m\033[1m' '\e[0m' "$*" >&2; }
endsnippet

snippet require "description"
require() {
	for var in "$@"; do
		eval "test -z \\$$var" && echo "variable $var not set" >&2 && return 1
	done
	return 0
}
endsnippet

snippet shellcheck "shellcheck disable..." b
# shellcheck disable=SC$1
endsnippet

snippet sdf "function documentation" b
#######################################
# ${1:Descirption}
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
#######################################
endsnippet

snippet sds "script documentation" b
#
# ${1:Description}
#
# @params
# Globals
#   None
# Arguments
#   None
endsnippet

snippet #!
#!/usr/bin/env sh
endsnippet

snippet s#!
#!/usr/bin/env sh
set -euo pipefail
endsnippet

snippet safe
set -euo pipefail
endsnippet

snippet bash "bash shebang"
#!/usr/bin/env bash
endsnippet

snippet zsh "zsh shebang"
#!/usr/bin/env zsh
endsnippet

snippet sbash "Strict mode"
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'
endsnippet

snippet if "Simple if stament"
if [ ${1:condition} ]; then
	${0:${VISUAL}}
fi
endsnippet

snippet elif "Else if"
elif [ ${1:condition} ]; then
	${0:${VISUAL}}
endsnippet

snippet for "For loop"
for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet forin "For in"
for ${1:needle} in ${2:haystack} ; do
	${0:${VISUAL}}
done
endsnippet

snippet while "While conditional"
while [[ ${1:condition} ]]; do
	${0:${VISUAL}}
done
endsnippet

snippet until "Until conditional"
until [[ ${1:condition} ]]; do
	${0:${VISUAL}}
done
endsnippet

snippet case "Sh case statement"
case ${1:word} in
	${2:pattern})
		${0};;
esac
endsnippet

snippet go "getopts"
while getopts '${1:o}' ${2:opts}
do
	case $$2 in
	${3:o0})
		${0:#staments};;
	esac
done
endsnippet

snippet root
if [ \$(id -u) -ne 0 ]; then exec sudo \$0; fi
endsnippet

snippet fun-sh "function()"
${1:function_name}() {
	${0:#function_body}
}
endsnippet


snippet fun "function fun()"
function ${1:function_name}() {
	${0:#function_body}
}
endsnippet

snippet 16fg "Escape code for truecolor foreground"
'\\033[38;2;$1;$2;$3m'$0
endsnippet

snippet 16bg "Escape code for truecolor background"
'\\033[48;2;$1;$2;$3m'$0
endsnippet

snippet 256fg "Escape code for 256 color foreground"
'\\033[38;5;$1m'$0
endsnippet

snippet 256bg "Escape code for 256 color background"
'\\033[48;5;$1m'$0
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${3:--suffix=${4:.SUFFIX}} ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`}.XXXXXX)"
${5:${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'}${6/(.+)/" 0               # EXIT\n/}${7/(.+)/trap "/}${7:rm -f '$${1/.*\s//}'; exit 1}${7/(.+)/" 2       # INT\n/}${8/(.+)/trap "/}${8:rm -f '$${1/.*\s//}'; exit 1}${8/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet here "here document (here)"
<<-${2:'${1:TOKEN}'}
	$0
${1/['"`](.+)['"`]/$1/}
endsnippet
