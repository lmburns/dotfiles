# Import additional configuration files
#
# Imports are loaded in order, skipping all missing files, with the importing
# file being loaded last. If a field is already present in a previous import, it
# will be replaced.
#
# All imports must either be absolute paths starting with `/`, or paths relative
# to the user's home directory starting with `~/` .
# import:
#   - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.

#  ╭──────────────────────────────────────────────────────────╮
#  │                       Environment                        │
#  ╰──────────────────────────────────────────────────────────╯
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  # TERM: xterm-256color
  TERM: alacritty

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Window                          │
#  ╰──────────────────────────────────────────────────────────╯
window:
  # Window dimensions (changes require restart)
  #
  # Number of lines/columns (not pixels) in the terminal. Both lines and columns
  # must be non-zero for this to take effect. The number of columns must be at
  # least `2`, while using a value of `0` for columns and lines will fall back
  # to the window manager's recommended size
  dimensions:
    columns: 0
    lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: true

  # Window decorations
  #
  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full

  # Background opacity
  #
  # Window opacity as a floating point number from `0.0` to `1.0`.
  # The value `0.0` is completely transparent and `1.0` is opaque.
  opacity: 0.90

  # Startup Mode (changes require restart)
  #
  # Values for `startup_mode`:
  #   - Windowed
  #   - Maximized
  #   - Fullscreen
  startup_mode: Windowed

  # Window title
  title: Alacritty
  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  # Window class (Linux/BSD only):
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # Decorations theme variant
  #
  # Override the variant of the System theme/GTK theme/Wayland client side
  # decorations. Commonly supported values are `Dark`, `Light`, and `None` for
  # auto pick-up. Set this to `None` to use the default theme variant.
  decorations_theme_variant: Dark

  # Resize increments
  #
  # Prefer resizing window by discrete steps equal to cell dimensions.
  resize_increments: true

# ╭──────────────────────────────────────────────────────────╮
# │                        Scrolling                         │
# ╰──────────────────────────────────────────────────────────╯
scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 15000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 1

#  ╭──────────────────────────────────────────────────────────╮
#  │                    Font Configuration                    │
#  ╰──────────────────────────────────────────────────────────╯

font:
  normal:
    # family: FiraMono Nerd Font Mono
    # family:  FiraCode Nerd Font Mono
    # family: FuraMono Nerd Font
    family: FuraMono Nerd Font Mono
    # family: FiraMono Nerd Font
    # family: FiraMono Nerd Font
    # family:  FiraCode Nerd Font
    # family:  Go Mono Nerd Font Mono
    # family:  Hasklug Nerd Font Mono
    # family:  Roboto Mono Nerd Font
    # family:  Roboto Mono Nerd Font Mono
    # family:  BitstreamVeraSansMono Nerd Font Mono
    # family:  JetBrainsMono Nerd Font Mono
    # family:  Hack Nerd Font Mono
    style: Medium

  bold:
    family: FuraMono Nerd Font Mono
    style: Bold
  italic:
    family: FuraMono Nerd Font Mono
    style: Italic
  bold_italic:
    family: FuraMono Nerd Font Mono
    style: Bold Italic

  # Point size
  size: 12

  # Offset is the extra space around each character. `offset.y` can be thought
  # of as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: -1
    y: -1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the
  # right, increasing `y` moves the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # Use built-in font for box drawing characters.
  #
  # If `true`, Alacritty will use a custom built-in font for box drawing
  # characters (Unicode points 2500 - 259f).
  #
  builtin_box_drawing: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

#  ╭──────────────────────────────────────────────────────────╮
#  │                         Schemas                          │
#  ╰──────────────────────────────────────────────────────────╯
schemes:
  kimbie: &kimbie
    transparent_background_colors: false
    primary:
      background: '#221a02'
      foreground: '#c2a383'

      # Bright and dim foreground colors
      #
      # The dimmed foreground color is calculated automatically if it is not
      # present. If the bright foreground color is not set, or
      # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
      # color will be used.
      bright_foreground: '#f06431'
      # dim_foreground: '#9a9a9a'

    # Cursor colors
    #
    # Colors which should be used to draw the terminal cursor. If these are unset,
    # the cursor color will be the inverse of the cell color.
    cursor:
      text: '#221a02'
      cursor: '#f79a32'
      # text: CellBackground
      # cursor: CellForeground

    # Vi mode cursor colors
    #
    # Colors for the cursor when the vi mode is active.
    #
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    # Selection colors
    #
    # Colors which should be used to draw the selection area. If selection
    # background is unset, selection color will be the inverse of the cell colors.
    # If only text is unset the cell text color will remain the same.
    selection:
      text: '#221a02'
      background: '#889b4a'

    # Search colors
    #
    # Colors used for the search bar and match highlighting.
    search:
      # Allowed values are CellForeground/CellBackground, which reference the affected cell.
      # Or hexadecimal
      matches:
        foreground: '#000000'
        background: '#7E9CD8'
      focused_match:
        foreground: '#000000'
        background: '#CC6666'

    # Keyboard hints
    hints:
      # First character in the hint label
      #
      # Allowed values are CellForeground/CellBackground, which reference the affected cell.
      # Or hexadecimal
      start:
        foreground: '#201f1f'
        background: '#f79a32'
      # All characters after the first one in the hint label
      #
      # Allowed values are CellForeground/CellBackground, which reference the affected cell.
      # Or hexadecimal
      end:
        foreground: '#201f1f'
        background: '#f79a32'

    # Line indicator
    #
    # Color used for the indicator displaying the position in history during
    # search and vi mode.
    #
    # By default, these will use the opposing primary color.
    line_indicator:
      foreground: '#FF5D62'
      background: '#221a02'

    # Footer bar
    #
    # Color used for the footer bar on the bottom, used by search regex input,
    # hyperlink URI preview, etc.
    #
    footer_bar:
      background: '#221a02'
      foreground: '#A25BC4'
      # foreground: '#c2a383'

    normal:
      black: '#201F1F'
      red: '#DC3958'
      green: '#819C3B'
      yellow: '#F79A32'
      blue: '#924F79'
      magenta: '#7E5053'
      cyan: '#088649'
      white: '#A89983'
    bright:
      black: '#676767'
      red: '#F14A68'
      green: '#A3B95A'
      yellow: '#F79A32'
      blue: '#DC3958'
      magenta: '#FE8019'
      cyan: '#4C96A8'
      white: '#51412C'
    dim:
      black: '#676F78'
      red: '#DC3958'
      green: '#088649'
      yellow: '#F79A32'
      blue: '#733E8B'
      magenta: '#7E5053'
      cyan: '#088649'
      white: '#A89983'

    # Indexed Colors
    #
    # The indexed colors include all colors from 16 to 256.
    # When these are not set, they're filled with sensible defaults.
    #
    # Example:
    #   `- { index: 16, color: '#ff00ff' }`
    #
    indexed_colors:
      - { index: 16, color: '#FFA066' }
      - { index: 17, color: '#FF5D62' }
      - { index: 18, color: '#89B482' }
      - { index: 19, color: '#D3869B' }
      - { index: 20, color: '#719190' }
      - { index: 21, color: '#957FB8' }
      - { index: 22, color: '#938AA9' }
      - { index: 23, color: '#EA6962' }
      - { index: 24, color: '#E46876' }
      - { index: 25, color: '#418292' }
      - { index: 26, color: '#2AB074' }
      - { index: 27, color: '#CC6666' }
      - { index: 28, color: '#77A172' }
      - { index: 29, color: '#83A598' }
      - { index: 30, color: '#7E9CD8' }
      - { index: 31, color: '#BD798B' }
      - { index: 32, color: '#E78A4E' }
      - { index: 33, color: '#7E602C' }
      - { index: 34, color: '#A89984' }
      - { index: 35, color: '#625A5A' }
      - { index: 36, color: '#39260E' }
      - { index: 37, color: '#362712' }
      - { index: 38, color: '#291804' }
      - { index: 39, color: '#5E452B' }
      - { index: 40, color: '#E8C097' }
      - { index: 41, color: '#665C54' }
      - { index: 42, color: '#D9AE80' }
      - { index: 43, color: '#7DAEA3' }
      - { index: 44, color: '#F79A32' }
      - { index: 45, color: '#F06431' }
      - { index: 46, color: '#C2A383' }
      - { index: 47, color: '#A25BC4' }
      - { index: 48, color: '#FF5813' }
      - { index: 49, color: '#A83232' }
      - { index: 50, color: '#989719' }
      - { index: 51, color: '#98676A' }
      - { index: 52, color: '#A06469' }
      - { index: 53, color: '#A3B95A' }
      - { index: 54, color: '#A0936A' }

  gruvbox_material_medium_dark: &gruvbox_material_medium_dark
    primary:
      background: '#282828'
      foreground: '#DFBF8E'
    normal:
      black: '#665C54'
      red: '#EA6962'
      green: '#A9B665'
      yellow: '#E78A4E'
      blue: '#7DAEA3'
      magenta: '#D3869B'
      cyan: '#89B482'
      white: '#DFBF8E'
    bright:
      black: '#928374'
      red: '#ea6962'
      green: '#a9b665'
      yellow: '#e3a84e'
      blue: '#7daea3'
      magenta: '#d3869b'
      cyan: '#89b482'
      white: '#dfbf8e'

  gruvbox: &gruvbox
    primary:
      background: '#1c1b1a'
      foreground: '#dfbf8e'
      # foreground: '#ebdbb2'
      bright_foreground: '#448488'
      #dim_foreground: '#9a9a9a'

    cursor:
      text: '#1c1b1a'
      cursor: '#dfbf8e'

    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    selection:
      text: '#655b53'
      background: '#dfbf8e'

    hints:
      start:
        foreground: '#201f1f'
        background: '#f79a32'
      end:
        foreground: '#201f1f'
        background: '#f79a32'

    normal:
      black: '#665c54'
      red: '#ea6962'
      green: '#989719'
      yellow: '#e78a4e'
      blue: '#689d69'
      magenta: '#b16185'
      cyan: '#448488'
      white: '#dfbf8e'
    bright:
      black: '#928374'
      red: '#EA6962'
      green: '#A9B665'
      yellow: '#E3A84E'
      blue: '#A43A57'
      magenta: '#D3869B'
      cyan: '#89B482'
      white: '#DFBF8E'

  mona_lisa: &mona_lisa
    primary:
      background: '#160b0e'
      foreground: '#af8d6e'
      bright_foreground: '#586081'

    cursor:
      text: '#160b0e'
      cursor: '#d08040'

    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    selection:
      text: '#160b0e'
      background: '#a0936a'

    hints:
      start:
        foreground: '#201f1f'
        background: '#f79a32'
      end:
        foreground: '#201f1f'
        background: '#f79a32'

    normal:
      black: '#44230f'
      red: '#ad3a23'
      green: '#989719'
      yellow: '#cf8233'
      blue: '#646f6f'
      magenta: '#ad2e36'
      cyan: '#689d69'
      white: '#bba45a'
    bright:
      black: '#9a5534'
      red: '#ff5b3e'
      green: '#b8ba25'
      yellow: '#ffa678'
      blue: '#b16185'
      magenta: '#d3869b'
      cyan: '#89b482'
      white: '#ffe8a7'

  kanagwa: &kanagwa
    primary:
      background: '#1f1f28'
      foreground: '#dcd7ba'

    normal:
      black: '#090618'
      red: '#c34043'
      green: '#76946a'
      yellow: '#c0a36e'
      blue: '#7e9cd8'
      magenta: '#957fb8'
      cyan: '#6a9589'
      white: '#c8c093'

    bright:
      black: '#727169'
      red: '#e82424'
      green: '#98bb6c'
      yellow: '#e6c384'
      blue: '#7fb4ca'
      magenta: '#938aa9'
      cyan: '#7aa89f'
      white: '#dcd7ba'

    selection:
      background: '#2d4f67'
      foreground: '#c8c093'

    indexed_colors:
      - { index: 16, color: '#ffa066' }
      - { index: 17, color: '#ff5d62' }

colors: *kimbie

#  ╭──────────────────────────────────────────────────────────╮
#  │                       Visual Bell                        │
#  ╰──────────────────────────────────────────────────────────╯
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 1
  color: '#ffffff'
  # command:
  #   program: notify-send
  #   args: ["Bell Rang"]

#  ╭──────────────────────────────────────────────────────────╮
#  │                        Selection                         │
#  ╰──────────────────────────────────────────────────────────╯
selection:
  # This string contains all characters that are used as separators for
  # "semantic words" in Alacritty.
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  # When set to `true`, selected text will be copied to the primary clipboard.
  save_to_clipboard: true

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Cursor                          │
#  ╰──────────────────────────────────────────────────────────╯
cursor:
  style:
    # Cursor shape
    #
    # Values for `shape`:
    #   - ▇ Block
    #   - _ Underline
    #   - | Beam
    shape: Block
    blinking: Always
    blink_interval: 750
    blink_timeout: 5
    unfocused_hollow: true
    vi_mode_style: Block
    thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Offer IPC using `alacritty msg` (unix only)
ipc_socket: true

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Hints                           │
#  ╰──────────────────────────────────────────────────────────╯
#
# Terminal hints can be used to find text or hyperlink in the visible part of
# the terminal and pipe it to other applications.
hints:
  # Keys used for the hint labels.
  alphabet: 'jfkdls;ahgurieowpq'

  # Each hint must have any of
  #   - `regex` or `hyperlinks` field and
  #   - either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
  # highlighted.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs and applies only to
  # `regex` matches.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.

  enabled:
    - regex:
        "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
        [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"

      # action: Copy
      hyperlinks: true
      command: xdg-open
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: O
        mods: Control|Alt|Shift

    - regex:
        "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
        [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
      action: Copy
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: C
        mods: Control|Alt|Shift

    # - regex: "((/|~|\\$[\\w_]+)[^/\0 ]*)+/?"
    - regex: "((/|~)[^/\0 ]*)+/?"
      action: Copy
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: Y
        mods: Control|Alt|Shift

# /home/lucas
# /home/lucas/
# ~/lucas/
# ~
# /
# $HOME HER/hey
# $HOME_HER/hey
# $HOME/hey

#  ╭──────────────────────────────────────────────────────────╮
#  │                          Mouse                           │
#  ╰──────────────────────────────────────────────────────────╯
mouse:
  # Click settings
  # wait for accepting multiple clicks
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false

  # Old??
  # hints:
  #   modifiers: Control
  #   launcher:
  #     program: xdg-open
  #     args: []

  #   # These are the modifiers that need to be held down for opening URLs when clicking
  #   # on them. The available modifiers are documented in the key binding section.
  #   modifiers: None

#  ╭────────────────╮
#  │ Mouse Bindings │
#  ╰────────────────╯
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
mouse_bindings:
  - { mouse: Middle, action: Copy }
  - { mouse: Middle, mods: Alt, action: Copy }
  - { mouse: Middle, mode: ~Vi, action: PasteSelection }
  - { mouse: Right, mode: ~Vi, action: ClearSelection }
  - { mouse: Right, mode: Vi, mods: Alt, action: Open }
  - { mouse: Right, action: ExpandSelection }
  - { mouse: Right, mods: Control, action: ExpandSelection }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/winit/*/winit/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - ToggleMaximized
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - CenterAroundViCursor
#       Center view around vi mode cursor
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
key_bindings:
  #- { key: Paste,                                       action: Paste          }
  #- { key: Copy,                                        action: Copy           }
  #- { key: L,         mods: Control,                    action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp   }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop    }
  #- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
  #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
  #- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
  #- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: Z,                           mode: Vi|~Search, action: CenterAroundViCursor    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Up,                          mode: Vi|~Search, action: Up                      }
  #- { key: Down,                        mode: Vi|~Search, action: Down                    }
  #- { key: Left,                        mode: Vi|~Search, action: Left                    }
  #- { key: Right,                       mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

  # Search Mode
  #- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  #- { key: Escape,                mode: Search,     action: SearchCancel          }
  #- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  #- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  #- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  #- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  #- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  #- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  #- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  #- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  #- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  #- { key: C,              mods: Control|Shift,                   action: Copy             }
  #- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                           action: PasteSelection   }
  #- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }
  - { key: Key0, mods: Control, action: ReceiveChar }
  - { key: Equals, mods: Control, action: ReceiveChar }
  - { key: Plus, mods: Control, action: ReceiveChar }
  - { key: Minus, mods: Control, action: ReceiveChar }
  - { key: F, mods: Control|Shift, mode: ~Search, action: ReceiveChar }
  - { key: B, mods: Control|Shift, mode: ~Search, action: ReceiveChar }

  #  ╭──────────────────────────────────────────────────────────╮
  #  │                          Custom                          │
  #  ╰──────────────────────────────────────────────────────────╯

  # VirtualKeyCodes
  # https://docs.rs/winit/latest/winit/event/enum.VirtualKeyCode.html
  #
  # Scancodes
  # https://www.win.tue.nl/~aeb/linux/kbd/scancodes-1.html
  #
  # Keycodes
  #  - sudo dumpkeys -l
  # Keycodes
  #  - sed -n l
  #
  # Example to get this info for double quote:
  #
  #   { key: 0x28, mods: Alt|Shift, chars: "\x1b[34;4u" }:
  #
  #  1. key:   Output of `sudo showkey --scancode`.
  #  2. chars: Output of `sudo showkey --ascii`. First column
  #            Output of `xev`'s 'keysym' (0x22). Convert 0x22 to decimal
  #  3. chars: After the semicolon, see table below.
  #
  # https://www.eso.org/~ndelmott/ascii.html
  # The actual modifier is a result of 1 + modifier
  # For example, Control|Alt = 4 + 2 + 1
  #
  # shift     0b1         (1)
  # alt       0b10        (2)
  # ctrl      0b100       (4)
  # super     0b1000      (8)
  # hyper     0b10000     (16)
  # meta      0b100000    (32)
  # caps_lock 0b1000000   (64)
  # num_lock  0b10000000  (128)

  # - { key: Y, mods: Control, action: Copy }
  # - { key: M, mods: Control|Shift, action: Minimize }
  # - { key: Insert, mods: Shift, action: Paste }
  - { key: P, mods: Control, action: Paste }

  # - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control|Alt, action: ResetFontSize }
  - { key: Plus, mods: Control|Shift, action: IncreaseFontSize }
  - { key: 0x0c, mods: Control|Shift, action: DecreaseFontSize } # Underscore
  - { key: NumpadAdd, mods: Control, action: IncreaseFontSize }
  - { key: NumpadSubtract, mods: Control, action: DecreaseFontSize }

  - { key: Minus, mods: Control|Alt|Super, action: ClearHistory }
  - { key: Comma, mods: Control|Alt|Super, action: ClearLogNotice }
  - { key: Period, mods: Control|Alt|Super, action: CreateNewWindow }
  # - { key: Comma, mods: Control|Alt|Super, action: SpawnNewInstance }
  # - {
  #     key: B,
  #     mods: Control|Alt,
  #     command: { program: 'alacritty', args: ['-e', 'btm'] },
  #   }

  #  ╭─────────────────────╮
  #  │ Shift + <character> │
  #  ╰─────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: Return, mods: Shift, chars: "\x1b[13;2u" }
  # - { key: 0x39, mods: Shift, chars: "\x1b[32;2u" } # Space

  #  ╭────────────────────╮
  #  │ Control + <letter> │
  #  ╰────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: H, mods: Control, chars: "\x1b[104;5u" }
  - { key: I, mods: Control, chars: "\x1b[105;5u" }
  - { key: J, mods: Control, chars: "\x1b[106;5u" }
  - { key: M, mods: Control, chars: "\x1b[109;5u" }
  # - { key: Space, mods: Control, chars: "\x1b[32;5u" }
  - { key: Return, mods: Control, chars: "\x1b[13;5u" }
  - { key: Grave, mods: Control, chars: "\x1b[96;5u" }
  - { key: Minus, mods: Control, chars: "\x1b[45;5u" }
  - { key: Equals, mods: Control, chars: "\x1b[61;5u" }
  - { key: LBracket, mods: Control, chars: "\x1b[91;5u" }
  - { key: RBracket, mods: Control, chars: "\x1b[93;5u" }
  - { key: Backslash, mods: Control, chars: "\x1b[92;5u" }
  # - { key: Semicolon, mods: Control, chars: "\x1b[59;5u" }
  - { key: Apostrophe, mods: Control, chars: "\x1b[39;5u" }
  - { key: Comma, mods: Control, chars: "\x1b[44;5u" }
  - { key: Period, mods: Control, chars: "\x1b[46;5u" }
  - { key: 0x35, mods: Control, chars: "\x1b[47;5u" } # Forward slash (/)

  #  ╭──────────────────────────╮
  #  │ Control + Alt + <letter> │
  #  ╰──────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: I, mods: Control|Alt, chars: "\x1b[105;7u" }
  - { key: O, mods: Control|Alt, chars: "\x1b[111;7u" }
  # - { key: Space, mods: Control|Alt, chars: "\x1b[32;7u" }
  - { key: Return, mods: Control|Alt, chars: "\x1b[13;7u" }
  - { key: Grave, mods: Control|Alt, chars: "\x1b[96;7u" }
  - { key: Minus, mods: Control|Alt, chars: "\x1b[45;7u" }
  - { key: Equals, mods: Control|Alt, chars: "\x1b[61;7u" }
  - { key: LBracket, mods: Control|Alt, chars: "\x1b[91;7u" }
  - { key: RBracket, mods: Control|Alt, chars: "\x1b[93;7u" }
  - { key: Backslash, mods: Control|Alt, chars: "\x1b[92;7u" }
  - { key: Semicolon, mods: Control|Alt, chars: "\x1b[59;7u" }
  - { key: Apostrophe, mods: Control|Alt, chars: "\x1b[39;7u" }
  - { key: Comma, mods: Control|Alt, chars: "\x1b[44;7u" }
  - { key: Period, mods: Control|Alt, chars: "\x1b[46;7u" }
  - { key: 0x35, mods: Control|Alt, chars: "\x1b[47;7u" } # Forward slash (/)

  #  ╭──────────────────────────────────╮
  #  │ Control + Alt + Shift + <letter> │
  #  ╰──────────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # Control + Alt + C ⇒ Copy link
  # Control + Alt + O ⇒ Open link
  # Control + Alt + Y ⇒ Copy path

  - { key: A, mods: Control|Alt|Shift, chars: "\x1b[97;8u" }
  - { key: B, mods: Control|Alt|Shift, chars: "\x1b[98;8u" }
  # - { key: C, mods: Control|Alt|Shift, chars: "\x1b[99;8u" }
  - { key: D, mods: Control|Alt|Shift, chars: "\x1b[100;8u" }
  - { key: E, mods: Control|Alt|Shift, chars: "\x1b[101;8u" }
  - { key: F, mods: Control|Alt|Shift, chars: "\x1b[102;8u" }
  - { key: G, mods: Control|Alt|Shift, chars: "\x1b[103;8u" }
  - { key: H, mods: Control|Alt|Shift, chars: "\x1b[104;8u" }
  - { key: I, mods: Control|Alt|Shift, chars: "\x1b[105;8u" }
  - { key: J, mods: Control|Alt|Shift, chars: "\x1b[106;8u" }
  - { key: K, mods: Control|Alt|Shift, chars: "\x1b[107;8u" }
  - { key: L, mods: Control|Alt|Shift, chars: "\x1b[108;8u" }
  - { key: M, mods: Control|Alt|Shift, chars: "\x1b[109;8u" }
  - { key: N, mods: Control|Alt|Shift, chars: "\x1b[110;8u" }
  # - { key: O, mods: Control|Alt|Shift, chars: "\x1b[111;8u" }
  - { key: P, mods: Control|Alt|Shift, chars: "\x1b[112;8u" }
  - { key: Q, mods: Control|Alt|Shift, chars: "\x1b[113;8u" }
  - { key: R, mods: Control|Alt|Shift, chars: "\x1b[114;8u" }
  - { key: S, mods: Control|Alt|Shift, chars: "\x1b[115;8u" }
  - { key: T, mods: Control|Alt|Shift, chars: "\x1b[116;8u" }
  - { key: U, mods: Control|Alt|Shift, chars: "\x1b[117;8u" }
  - { key: V, mods: Control|Alt|Shift, chars: "\x1b[118;8u" }
  - { key: W, mods: Control|Alt|Shift, chars: "\x1b[119;8u" }
  - { key: X, mods: Control|Alt|Shift, chars: "\x1b[120;8u" }
  # - { key: Y, mods: Control|Alt|Shift, chars: "\x1b[121;8u" }
  - { key: Z, mods: Control|Alt|Shift, chars: "\x1b[122;8u" }

  - { key: 0x39, mods: Control|Alt|Shift, chars: "\x1b[32;8u" } # FIX: Space
  - { key: Return, mods: Control|Alt|Shift, chars: "\x1b[13;8u" } # Return
  - { key: 0x29, mods: Control|Alt|Shift, chars: "\x1b[126;8u" } # Tilde
  - { key: 0x02, mods: Control|Alt|Shift, chars: "\x1b[33;8u" } # Exclamation
  - { key: 0x03, mods: Control|Alt|Shift, chars: "\x1b[64;8u" } # @
  - { key: 0x04, mods: Control|Alt|Shift, chars: "\x1b[35;8u" } # Pound
  - { key: 0x05, mods: Control|Alt|Shift, chars: "\x1b[36;8u" } # Dollar
  - { key: 0x06, mods: Control|Alt|Shift, chars: "\x1b[37;8u" } # Percent
  - { key: 0x07, mods: Control|Alt|Shift, chars: "\x1b[94;8u" } # Caret
  - { key: 0x08, mods: Control|Alt|Shift, chars: "\x1b[38;8u" } # Ampersand
  - { key: 0x09, mods: Control|Alt|Shift, chars: "\x1b[42;8u" } # Asterisk
  - { key: 0x0a, mods: Control|Alt|Shift, chars: "\x1b[40;8u" } # LParenthesis
  - { key: 0x0b, mods: Control|Alt|Shift, chars: "\x1b[41;8u" } # RParenthesis
  - { key: 0x0c, mods: Control|Alt|Shift, chars: "\x1b[95;8u" } # Underscore
  - { key: Plus, mods: Control|Alt|Shift, chars: "\x1b[43;8u" } # Plus
  - { key: 0x1a, mods: Control|Alt|Shift, chars: "\x1b[123;8u" } # LBrace
  - { key: 0x1b, mods: Control|Alt|Shift, chars: "\x1b[125;8u" } # RBrace
  - { key: 0x2b, mods: Control|Alt|Shift, chars: "\x1b[124;8u" } # Bar
  - { key: Colon, mods: Control|Alt|Shift, chars: "\x1b[58;8u" } # Colon
  - { key: 0x28, mods: Control|Alt|Shift, chars: "\x1b[34;8u" } # Double quote
  - { key: 0x33, mods: Control|Alt|Shift, chars: "\x1b[60;8u" } # Less than
  - { key: 0x34, mods: Control|Alt|Shift, chars: "\x1b[62;8u" } # Greater than
  - { key: 0x35, mods: Control|Alt|Shift, chars: "\x1b[63;8u" } # FIX: Question mark

  #  ╭────────────────────────────╮
  #  │ Control + Shift + <letter> │
  #  ╰────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: A, mods: Control|Shift, chars: "\x1b[97;6u" }
  - { key: B, mods: Control|Shift, chars: "\x1b[98;6u" }
  - { key: C, mods: Control|Shift, chars: "\x1b[99;6u" }
  - { key: D, mods: Control|Shift, chars: "\x1b[100;6u" }
  - { key: E, mods: Control|Shift, chars: "\x1b[101;6u" }
  - { key: F, mods: Control|Shift, chars: "\x1b[102;6u" }
  - { key: G, mods: Control|Shift, chars: "\x1b[103;6u" }
  - { key: H, mods: Control|Shift, chars: "\x1b[104;6u" }
  - { key: I, mods: Control|Shift, chars: "\x1b[105;6u" }
  - { key: J, mods: Control|Shift, chars: "\x1b[106;6u" }
  - { key: K, mods: Control|Shift, chars: "\x1b[107;6u" }
  - { key: L, mods: Control|Shift, chars: "\x1b[108;6u" }
  - { key: M, mods: Control|Shift, chars: "\x1b[109;6u" }
  - { key: N, mods: Control|Shift, chars: "\x1b[110;6u" }
  - { key: O, mods: Control|Shift, chars: "\x1b[111;6u" }
  - { key: P, mods: Control|Shift, chars: "\x1b[112;6u" }
  - { key: Q, mods: Control|Shift, chars: "\x1b[113;6u" }
  - { key: R, mods: Control|Shift, chars: "\x1b[114;6u" }
  - { key: S, mods: Control|Shift, chars: "\x1b[115;6u" }
  - { key: T, mods: Control|Shift, chars: "\x1b[116;6u" }
  - { key: U, mods: Control|Shift, chars: "\x1b[117;6u" }
  - { key: V, mods: Control|Shift, chars: "\x1b[118;6u" }
  - { key: W, mods: Control|Shift, chars: "\x1b[119;6u" }
  - { key: X, mods: Control|Shift, chars: "\x1b[120;6u" }
  - { key: Y, mods: Control|Shift, chars: "\x1b[121;6u" }
  - { key: Z, mods: Control|Shift, chars: "\x1b[122;6u" }

  # TODO: differentiate ctrl+_ ctrl+/
  - { key: 0x39, mods: Control|Shift, chars: "\x1b[32;6u" } # FIX: Space
  - { key: Return, mods: Control|Shift, chars: "\x1b[13;6u" } # Return
  - { key: 0x29, mods: Control|Shift, chars: "\x1b[126;6u" } # Tilde (works: chars: "\x1b[96;6u")
  - { key: 0x02, mods: Control|Shift, chars: "\x1b[33;6u" } # Exclamation
  - { key: 0x03, mods: Control|Shift, chars: "\x1b[64;6u" } # @
  - { key: 0x04, mods: Control|Shift, chars: "\x1b[35;6u" } # Pound
  - { key: 0x05, mods: Control|Shift, chars: "\x1b[36;6u" } # Dollar
  - { key: 0x06, mods: Control|Shift, chars: "\x1b[37;6u" } # Percent
  - { key: 0x07, mods: Control|Shift, chars: "\x1b[94;6u" } # Caret
  - { key: 0x08, mods: Control|Shift, chars: "\x1b[38;6u" } # Ampersand
  - { key: 0x09, mods: Control|Shift, chars: "\x1b[42;6u" } # Asterisk
  - { key: 0x0a, mods: Control|Shift, chars: "\x1b[40;6u" } # LParenthesis
  - { key: 0x0b, mods: Control|Shift, chars: "\x1b[41;6u" } # RParenthesis
  # - { key: 0x0c, mods: Control|Shift, chars: "\x1b[95;6u" } # Underscore
  # - { key: Plus, mods: Control|Shift, chars: "\x1b[43;6u" } # Plus
  - { key: 0x1a, mods: Control|Shift, chars: "\x1b[123;6u" } # LBrace
  - { key: 0x1b, mods: Control|Shift, chars: "\x1b[125;6u" } # RBrace
  - { key: 0x2b, mods: Control|Shift, chars: "\x1b[124;6u" } # Bar
  - { key: Colon, mods: Control|Shift, chars: "\x1b[58;6u" } # Colon
  - { key: 0x28, mods: Control|Shift, chars: "\x1b[34;6u" } # Double quote
  - { key: 0x33, mods: Control|Shift, chars: "\x1b[60;6u" } # Less than
  - { key: 0x34, mods: Control|Shift, chars: "\x1b[62;6u" } # Greater than
  - { key: 0x35, mods: Control|Shift, chars: "\x1b[63;6u" } # FIX: Question mark

  # - { key: Grave,      mods: Control|Shift, chars: "\x1b~"  }
  # - { key: Key1,       mods: Control|Shift, chars: "\x1b!"  }
  # - { key: Key2,       mods: Control|Shift, chars: "\x1b@"  }
  # - { key: Key3,       mods: Control|Shift, chars: "\x1b#"  }
  # - { key: Key4,       mods: Control|Shift, chars: "\x1b$"  }
  # - { key: Key5,       mods: Control|Shift, chars: "\x1b%"  }
  # - { key: Key6,       mods: Control|Shift, chars: "\x1b^"  }
  # - { key: Key7,       mods: Control|Shift, chars: "\x1b&"  }
  # - { key: Key8,       mods: Control|Shift, chars: "\x1b*"  }
  # - { key: Key9,       mods: Control|Shift, chars: "\x1b("  }
  # - { key: Key0,       mods: Control|Shift, chars: "\x1b)"  }
  # - { key: Minus,      mods: Control|Shift, chars: "\x1b_"  }
  # - { key: Equals,     mods: Control|Shift, chars: "\x1b+"  }
  # - { key: LBracket,   mods: Control|Shift, chars: "\x1b{"  }
  # - { key: RBracket,   mods: Control|Shift, chars: "\x1b}"  }
  # - { key: Backslash,  mods: Control|Shift, chars: "\x1b|"  }
  # - { key: Semicolon,  mods: Control|Shift, chars: "\x1b:"  }
  # - { key: Apostrophe, mods: Control|Shift, chars: "\x1b\"" }
  # - { key: Comma,      mods: Control|Shift, chars: "\x1b<"  }
  # - { key: Period,     mods: Control|Shift, chars: "\x1b>"  }
  # - { key: Slash,      mods: Control|Shift, chars: "\x1b?"  }

  #  ╭───────────────────╮
  #  │ Alt + <character> │
  #  ╰───────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # - { key: Space, mods: Alt, chars: "\x1b[32;3u" }
  - { key: Return, mods: Alt, chars: "\x1b[13;3u" }
  - { key: Grave, mods: Alt, chars: "\x1b[96;3u" }
  - { key: Minus, mods: Alt, chars: "\x1b[45;3u" }
  - { key: Equals, mods: Alt, chars: "\x1b[61;3u" }
  - { key: LBracket, mods: Alt, chars: "\x1b[91;3u" }
  - { key: RBracket, mods: Alt, chars: "\x1b[93;3u" }
  - { key: Backslash, mods: Alt, chars: "\x1b[92;3u" }
  - { key: Semicolon, mods: Alt, chars: "\x1b[59;3u" }
  - { key: Apostrophe, mods: Alt, chars: "\x1b[39;3u" }
  - { key: Comma, mods: Alt, chars: "\x1b[44;3u" }
  - { key: Period, mods: Alt, chars: "\x1b[46;3u" }
  - { key: 0x35, mods: Alt, chars: "\x1b[47;3u" } # Forward slash (/)

  # - { key: Grave,      mods: Alt, chars: "\x1b`"  }
  # - { key: Minus,      mods: Alt, chars: "\x1b-"  }
  # - { key: Equals,     mods: Alt, chars: "\x1b="  }
  # - { key: LBracket,   mods: Alt, chars: "\x1b["  }
  # - { key: RBracket,   mods: Alt, chars: "\x1b]"  }
  # - { key: Backslash,  mods: Alt, chars: "\x1b\\" }
  # - { key: Semicolon,  mods: Alt, chars: "\x1b;"  }
  # - { key: Apostrophe, mods: Alt, chars: "\x1b'"  }
  # - { key: Comma,      mods: Alt, chars: "\x1b,"  }
  # - { key: Period,     mods: Alt, chars: "\x1b."  }
  # - { key: Slash,      mods: Alt, chars: "\x1b/"  }

  #  ╭────────────────────────╮
  #  │ Alt + Shift + <letter> │
  #  ╰────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # - { key: A, mods: Alt|Shift, chars: "\x1b[97;4u" }
  # - { key: B, mods: Alt|Shift, chars: "\x1b[98;4u" }
  # - { key: C, mods: Alt|Shift, chars: "\x1b[99;4u" }
  # - { key: D, mods: Alt|Shift, chars: "\x1b[100;4u" }
  # - { key: E, mods: Alt|Shift, chars: "\x1b[101;4u" }
  # - { key: F, mods: Alt|Shift, chars: "\x1b[102;4u" }
  # - { key: G, mods: Alt|Shift, chars: "\x1b[103;4u" }
  # - { key: H, mods: Alt|Shift, chars: "\x1b[104;4u" }
  # - { key: I, mods: Alt|Shift, chars: "\x1b[105;4u" }
  # - { key: J, mods: Alt|Shift, chars: "\x1b[106;4u" }
  # - { key: K, mods: Alt|Shift, chars: "\x1b[107;4u" }
  # - { key: L, mods: Alt|Shift, chars: "\x1b[108;4u" }
  # - { key: M, mods: Alt|Shift, chars: "\x1b[109;4u" }
  # - { key: N, mods: Alt|Shift, chars: "\x1b[110;4u" }
  # - { key: O, mods: Alt|Shift, chars: "\x1b[111;4u" }
  # - { key: P, mods: Alt|Shift, chars: "\x1b[112;4u" }
  # - { key: Q, mods: Alt|Shift, chars: "\x1b[113;4u" }
  # - { key: R, mods: Alt|Shift, chars: "\x1b[114;4u" }
  # - { key: S, mods: Alt|Shift, chars: "\x1b[115;4u" }
  # - { key: T, mods: Alt|Shift, chars: "\x1b[116;4u" }
  # - { key: U, mods: Alt|Shift, chars: "\x1b[117;4u" }
  # - { key: V, mods: Alt|Shift, chars: "\x1b[118;4u" }
  # - { key: W, mods: Alt|Shift, chars: "\x1b[119;4u" }
  # - { key: X, mods: Alt|Shift, chars: "\x1b[120;4u" }
  # - { key: Y, mods: Alt|Shift, chars: "\x1b[121;4u" }
  # - { key: Z, mods: Alt|Shift, chars: "\x1b[122;4u" }

  # - { key: A, mods: Alt|Shift, chars: "\x1bA" }
  # - { key: B, mods: Alt|Shift, chars: "\x1bB" }
  # - { key: C, mods: Alt|Shift, chars: "\x1bC" }

  #  ╭───────────────────────────╮
  #  │ Alt + Shift + <character> │
  #  ╰───────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: 0x39, mods: Alt|Shift, chars: "\x1b[32;4u" } # Space
  - { key: Return, mods: Alt|Shift, chars: "\x1b[13;4u" } # Return
  - { key: 0x29, mods: Alt|Shift, chars: "\x1b[126;4u" } # Tilde (works: chars: "\x1b[96;4u")
  - { key: 0x02, mods: Alt|Shift, chars: "\x1b[33;4u" } # Exclamation
  - { key: 0x03, mods: Alt|Shift, chars: "\x1b[64;4u" } # @
  - { key: 0x04, mods: Alt|Shift, chars: "\x1b[35;4u" } # Pound
  - { key: 0x05, mods: Alt|Shift, chars: "\x1b[36;4u" } # Dollar
  - { key: 0x06, mods: Alt|Shift, chars: "\x1b[37;4u" } # Percent
  - { key: 0x07, mods: Alt|Shift, chars: "\x1b[94;4u" } # Caret
  - { key: 0x08, mods: Alt|Shift, chars: "\x1b[38;4u" } # Ampersand
  - { key: 0x09, mods: Alt|Shift, chars: "\x1b[42;4u" } # Asterisk
  - { key: 0x0a, mods: Alt|Shift, chars: "\x1b[40;4u" } # LParenthesis
  - { key: 0x0b, mods: Alt|Shift, chars: "\x1b[41;4u" } # RParenthesis
  - { key: 0x0c, mods: Alt|Shift, chars: "\x1b[95;4u" } # Underscore
  - { key: Plus, mods: Alt|Shift, chars: "\x1b[43;4u" } # Plus
  - { key: 0x1a, mods: Alt|Shift, chars: "\x1b[123;4u" } # LBrace
  - { key: 0x1b, mods: Alt|Shift, chars: "\x1b[125;4u" } # RBrace
  - { key: 0x2b, mods: Alt|Shift, chars: "\x1b[124;4u" } # Bar
  - { key: Colon, mods: Alt|Shift, chars: "\x1b[58;4u" } # Colon
  - { key: 0x28, mods: Alt|Shift, chars: "\x1b[34;4u" } # Double quote
  - { key: 0x33, mods: Alt|Shift, chars: "\x1b[60;4u" } # Less than
  - { key: 0x34, mods: Alt|Shift, chars: "\x1b[62;4u" } # Greater than
  - { key: 0x35, mods: Alt|Shift, chars: "\x1b[63;4u" } # FIX: Question mark

  # - { key: Grave,      mods: Alt|Shift, chars: "\x1b~"  }
  # - { key: Key1,       mods: Alt|Shift, chars: "\x1b!"  }
  # - { key: Key2,       mods: Alt|Shift, chars: "\x1b@"  }
  # - { key: Key3,       mods: Alt|Shift, chars: "\x1b#"  }
  # - { key: Key4,       mods: Alt|Shift, chars: "\x1b$"  }
  # - { key: Key5,       mods: Alt|Shift, chars: "\x1b%"  }
  # - { key: Key6,       mods: Alt|Shift, chars: "\x1b^"  }
  # - { key: Key7,       mods: Alt|Shift, chars: "\x1b&"  }
  # - { key: Key8,       mods: Alt|Shift, chars: "\x1b*"  }
  # - { key: Key9,       mods: Alt|Shift, chars: "\x1b("  }
  # - { key: Key0,       mods: Alt|Shift, chars: "\x1b)"  }
  # - { key: Minus,      mods: Alt|Shift, chars: "\x1b_"  }
  # - { key: Equals,     mods: Alt|Shift, chars: "\x1b+"  }
  # - { key: LBracket,   mods: Alt|Shift, chars: "\x1b{"  }
  # - { key: RBracket,   mods: Alt|Shift, chars: "\x1b}"  }
  # - { key: Backslash,  mods: Alt|Shift, chars: "\x1b|"  }
  # - { key: Semicolon,  mods: Alt|Shift, chars: "\x1b:"  }
  # - { key: Apostrophe, mods: Alt|Shift, chars: "\x1b\"" }
  # - { key: Comma,      mods: Alt|Shift, chars: "\x1b<"  }
  # - { key: Period,     mods: Alt|Shift, chars: "\x1b>"  }
  # - { key: Slash,      mods: Alt|Shift, chars: "\x1b?"  }

  #  ╭────────────────╮
  #  │ Alt + <number> │
  #  ╰────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: Key0, mods: Alt, chars: "\x1b[48;3u" }
  - { key: Key1, mods: Alt, chars: "\x1b[49;3u" }
  - { key: Key2, mods: Alt, chars: "\x1b[50;3u" }
  - { key: Key3, mods: Alt, chars: "\x1b[51;3u" }
  - { key: Key4, mods: Alt, chars: "\x1b[52;3u" }
  - { key: Key5, mods: Alt, chars: "\x1b[53;3u" }
  - { key: Key6, mods: Alt, chars: "\x1b[54;3u" }
  - { key: Key7, mods: Alt, chars: "\x1b[55;3u" }
  - { key: Key8, mods: Alt, chars: "\x1b[56;3u" }
  - { key: Key9, mods: Alt, chars: "\x1b[57;3u" }

  # - { key: Key0, mods: Alt, chars: "\x1b0" }
  # - { key: Key1, mods: Alt, chars: "\x1b1" }
  # - { key: Key2, mods: Alt, chars: "\x1b2" }
  # - { key: Key3, mods: Alt, chars: "\x1b3" }
  # - { key: Key4, mods: Alt, chars: "\x1b4" }
  # - { key: Key5, mods: Alt, chars: "\x1b5" }
  # - { key: Key6, mods: Alt, chars: "\x1b6" }
  # - { key: Key7, mods: Alt, chars: "\x1b7" }
  # - { key: Key8, mods: Alt, chars: "\x1b8" }
  # - { key: Key9, mods: Alt, chars: "\x1b9" }

  #  ╭────────────────────╮
  #  │ Control + <number> │
  #  ╰────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # - { key: Key0, mods: Control, chars: "\x1b[48;5u" }
  # - { key: Key1, mods: Control, chars: "\x1b[49;5u" }
  # - { key: Key2, mods: Control, chars: "\x1b[50;5u" }
  # - { key: Key3, mods: Control, chars: "\x1b[51;5u" }
  # - { key: Key4, mods: Control, chars: "\x1b[52;5u" }
  # - { key: Key5, mods: Control, chars: "\x1b[53;5u" }
  # - { key: Key6, mods: Control, chars: "\x1b[54;5u" }
  # - { key: Key7, mods: Control, chars: "\x1b[55;5u" }
  # - { key: Key8, mods: Control, chars: "\x1b[56;5u" }
  # - { key: Key9, mods: Control, chars: "\x1b[57;5u" }

  # https://aperiodic.net/phil/archives/Geekery/term-function-keys/

  #  ╭─────────────────────────────────────────────────────╮
  #  │ Control-([1-9]|[0-=]) => Control-[F1-F12] (F25-F36) │
  #  ╰─────────────────────────────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: Key1, mods: Control, chars: "\x1bOP" }
  - { key: Key2, mods: Control, chars: "\x1bOQ" }
  - { key: Key3, mods: Control, chars: "\x1bOR" }
  - { key: Key4, mods: Control, chars: "\x1bOS" }
  - { key: Key5, mods: Control, chars: "\x1b[15~" }
  - { key: Key6, mods: Control, chars: "\x1b[17~" }
  - { key: Key7, mods: Control, chars: "\x1b[18~" }
  - { key: Key8, mods: Control, chars: "\x1b[19~" }
  - { key: Key9, mods: Control, chars: "\x1b[20~" }
  - { key: Key0, mods: Control, chars: "\x1b[21~" }
  - { key: Minus, mods: Control, chars: "\x1b[23~" }
  - { key: Equals, mods: Control, chars: "\x1b[24~" }

  # - { key: Key1, mods: Control, chars: "\x1b\x5b\x31\x3b\x35\x50" }
  # - { key: Key2, mods: Control, chars: "\x1b\x5b\x31\x3b\x35\x51" }
  # - { key: Key3, mods: Control, chars: "\x1b\x5b\x31\x3b\x35\x52" }
  # - { key: Key4, mods: Control, chars: "\x1b\x5b\x31\x3b\x35\x53" }
  # - { key: Key5, mods: Control, chars: "\x1b\x5b\x31\x35\x3b\x35\x7e" }
  # - { key: Key6, mods: Control, chars: "\x1b\x5b\x31\x37\x3b\x35\x7e" }
  # - { key: Key7, mods: Control, chars: "\x1b\x5b\x31\x38\x3b\x35\x7e" }
  # - { key: Key8, mods: Control, chars: "\x1b\x5b\x31\x39\x3b\x35\x7e" }
  # - { key: Key9, mods: Control, chars: "\x1b\x5b\x32\x30\x3b\x35\x7e" }
  # - { key: Key0, mods: Control, chars: "\x1b\x5b\x32\x31\x3b\x35\x7e" }
  # - { key: Semicolon, mods: Control, chars: "\x1b\x5b\x32\x33\x3b\x35\x7e" }
  # - { key: Apostrophe, mods: Control, chars: "\x1b\x5b\x32\x34\x3b\x35\x7e" }

  #  ╭──────────────────────────────────────────────────────────────╮
  #  │ Control-Alt-([1-9]|[,.]) => Control-Shift-[F1-F12] (F37-F48) │
  #  ╰──────────────────────────────────────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # - { key: Key1, mods: Control|Alt, chars: "\x1b\x5b\x31\x3b\x36\x50" }
  # - { key: Key2, mods: Control|Alt, chars: "\x1b\x5b\x31\x3b\x36\x51" }
  # - { key: Key3, mods: Control|Alt, chars: "\x1b\x5b\x31\x3b\x36\x52" }
  # - { key: Key4, mods: Control|Alt, chars: "\x1b\x5b\x31\x3b\x36\x53" }
  # - { key: Key5, mods: Control|Alt, chars: "\x1b\x5b\x31\x35\x3b\x36\x7e" }
  # - { key: Key6, mods: Control|Alt, chars: "\x1b\x5b\x31\x37\x3b\x36\x7e" }
  # - { key: Key7, mods: Control|Alt, chars: "\x1b\x5b\x31\x38\x3b\x36\x7e" }
  # - { key: Key8, mods: Control|Alt, chars: "\x1b\x5b\x31\x39\x3b\x36\x7e" }
  # - { key: Key9, mods: Control|Alt, chars: "\x1b\x5b\x32\x30\x3b\x36\x7e" }
  # - { key: Key0, mods: Control|Alt, chars: "\x1b\x5b\x32\x31\x3b\x36\x7e" }
  # - { key: Comma, mods: Control, chars: "\x1b\x5b\x32\x33\x3b\x36\x7e" }
  # - { key: Period, mods: Control, chars: "\x1b\x5b\x32\x34\x3b\x36\x7e" }

  #  ╭──────────────────────────────────────────────────────╮
  #  │ Control-[ / Control-m => Alt-Shift-[F1-F2] (F61-F62) │
  #  ╰──────────────────────────────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  # - { key: LBracket, mods: Control, chars: "\x1b\x5b\x31\x3b\x34\x50" }
  # - { key: M, mods: Control, chars: "\x1b\x5b\x31\x3b\x34\x51" }

  #  ╭────────────────────────────╮
  #  │ Control + Shift + <number> │
  #  ╰────────────────────────────╯┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
  - { key: Key0, mods: Control|Shift, chars: "\x1b[48;6u" }
  - { key: Key1, mods: Control|Shift, chars: "\x1b[49;6u" }
  - { key: Key2, mods: Control|Shift, chars: "\x1b[50;6u" }
  - { key: Key3, mods: Control|Shift, chars: "\x1b[51;6u" }
  - { key: Key4, mods: Control|Shift, chars: "\x1b[52;6u" }
  - { key: Key5, mods: Control|Shift, chars: "\x1b[53;6u" }
  - { key: Key6, mods: Control|Shift, chars: "\x1b[54;6u" }
  - { key: Key7, mods: Control|Shift, chars: "\x1b[55;6u" }
  - { key: Key8, mods: Control|Shift, chars: "\x1b[56;6u" }
  - { key: Key9, mods: Control|Shift, chars: "\x1b[57;6u" }

  #  ╭──────────────────────────────────────────────────────────╮
  #  │                         Vi Mode                          │
  #  ╰──────────────────────────────────────────────────────────╯
  - { key: Space, mods: Shift|Control, mode: ~Search, action: ReceiveChar }
  - { key: Space, mods: Control, action: ToggleViMode }
  - { key: C, mods: Control, mode: Vi|~Search, action: ToggleViMode }
  - { key: Q, mode: Vi|~Search, action: ToggleViMode }
  - { key: Z, mods: Shift, mode: Vi, action: ToggleViMode }
  - { key: Escape, mode: Vi, action: ClearSelection }
  - { key: G, mode: Vi|~Search, action: ScrollToTop }
  - { key: G, mods: Shift, mode: Vi|~Search, action: ScrollToBottom }
  - { key: B, mods: Control, mode: Vi|~Search, action: ScrollPageUp }
  - { key: F, mods: Control, mode: Vi|~Search, action: ScrollPageDown }
  - { key: U, mods: Control, mode: Vi|~Search, action: ScrollHalfPageUp }
  - { key: D, mods: Control, mode: Vi|~Search, action: ScrollHalfPageDown }
  - { key: Y, mode: Vi|~Search, action: Copy }
  - { key: Y, mode: Vi|~Search, action: ClearSelection }
  - { key: V, mode: Vi|~Search, action: ToggleNormalSelection }
  - { key: V, mods: Shift, mode: Vi|~Search, action: ToggleLineSelection }
  - { key: V, mods: Control, mode: Vi|~Search, action: ToggleBlockSelection }
  - { key: V, mods: Alt, mode: Vi|~Search, action: ToggleSemanticSelection }
  - { key: Return, mode: Vi|~Search, action: Open }
  - { key: K, mode: Vi|~Search, action: Up }
  - { key: J, mode: Vi|~Search, action: Down }
  - { key: H, mode: Vi|~Search, action: Left }
  - { key: L, mode: Vi|~Search, action: Right }
  - { key: Up, mode: Vi|~Search, action: Up }
  - { key: Down, mode: Vi|~Search, action: Down }
  - { key: Left, mode: Vi|~Search, action: Left }
  - { key: Right, mode: Vi|~Search, action: Right }
  - { key: M, mods: Shift, mode: Vi|~Search, action: Middle }
  - { key: B, mode: Vi|~Search, action: SemanticLeft }
  - { key: W, mode: Vi|~Search, action: SemanticRight }
  - { key: E, mode: Vi|~Search, action: SemanticRightEnd }
  - { key: B, mods: Shift, mode: Vi|~Search, action: WordLeft }
  - { key: W, mods: Shift, mode: Vi|~Search, action: WordRight }
  - { key: E, mods: Shift, mode: Vi|~Search, action: WordRightEnd }
  - { key: Key5, mods: Shift, mode: Vi|~Search, action: Bracket }
  - { key: Slash, mode: Vi|~Search, action: SearchForward }
  - { key: Slash, mods: Shift, mode: Vi|~Search, action: SearchBackward }
  - { key: N, mode: Vi|~Search, action: SearchNext }
  - { key: N, mods: Shift, mode: Vi|~Search, action: SearchPrevious }
  - { key: H, mods: Shift, mode: Vi|~Search, action: First }
  - { key: L, mods: Shift, mode: Vi|~Search, action: Last }
  - { key: Z, mode: Vi|~Search, action: CenterAroundViCursor }
  - { key: Key6, mods: Shift, mode: Vi|~Search, action: FirstOccupied }
  - { key: Key4, mods: Shift, mode: Vi|~Search, action: Last }
  - { key: Key0, mode: Vi|~Search, action: First }
  - { key: Key4, mode: Vi|~Search, action: Last }

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Renderer override.
  #   - glsl3
  #   - gles2
  #   - gles2_pure
  #renderer: None

  # Print all received window events.
  print_events: false

  # Highlight window damage information.
  highlight_damage: false
