# Configuration for Alacritty, the GPU enhanced terminal emulator.

# Import additional configuration files
#
# Imports are loaded in order, skipping all missing files, with the importing
# file being loaded last. If a field is already present in a previous import, it
# will be replaced.
#
# Must start with '/' or '~'
# import:
#   - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  # TERM: xterm-256color
  TERM: alacritty

window:
  # Window dimensions (changes require restart)
  #
  # Specified in number of columns/lines, not pixels.
  # If both are `0`, this setting is ignored.
  #dimensions:
  #  columns: 0
  #  lines: 0

  # Window position (changes require restart)
  #
  # Specified in number of pixels.
  # If the position is not set, the window manager will handle the placement.
  #position:
  #  x: 0
  #  y: 0

  # Window padding (changes require restart)
  #
  # Blank space added around the window in pixels. This padding is scaled
  # by DPI and the specified value is always added at both opposing sides.
  padding:
    x: 2
    y: 2

  # Spread additional padding evenly around the terminal content.
  dynamic_padding: false

  # Values for `decorations`:
  #     - full: Borders and title bar
  #     - none: Neither borders nor title bar
  decorations: full

  # Window title
  title: Alacritty
  # Allow terminal applications to change Alacritty's window title.
  dynamic_title: true

  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty

  # GTK theme variant (Linux/BSD only)
  #
  # Override the variant of the GTK theme. Commonly supported values are `dark` and `light`.
  # Set this to `None` to use the default theme variant.
  gtk_theme_variant: dark

  opacity: 0.90

scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  history: 15000

  # Number of lines the viewport will move for every line scrolled when
  # scrollback is enabled (history > 0).
  multiplier: 1

# Font configuration
font:
  normal:
    # FiraMono has odd shaped characters for the double
    # lined p10k prompt when from the AUR, using Alacritty.

    # ─╮

    family: FiraMono Nerd Font Mono
    # family: FiraCode Nerd Font Mono
    # family: Go Mono Nerd Font Mono
    # family:  Hasklug Nerd Font Mono
    # family:  Roboto Mono Nerd Font
    # family:  Roboto Mono Nerd Font Mono
    # family:  BitstreamVeraSansMono Nerd Font Mono
    # family: JetBrainsMono Nerd Font Mono
    # family: Hack Nerd Font Mono
    style: Medium

  bold:
    family: FiraMono Nerd Font Mono
    style: Bold
  italic:
    family: JetBrainsMono Nerd Font
    style: Italic

  bold_italic:
    family: FiraMono Nerd Font Mono
    style: Bold Italic

  # Point size
  size: 12

  # Offset is the extra space around each character. `offset.y` can be thought of
  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.
  offset:
    x: -1
    y: -1

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increasing `x` moves the glyph to the right,
  # increasing `y` moves the glyph upwards.
  glyph_offset:
    x: 0
    y: 0

  builtin_box_drawing: true

# If `true`, bold text is drawn using the bright color variants.
draw_bold_text_with_bright_colors: true

schemes:
  kimbie: &kimbie
    transparent_background_colors: false
    primary:
      background: "#221a02"
      foreground: "#c2a383"
      bright_foreground: "#f06431"
      # dim_foreground: '#9a9a9a'

    # Cursor colors
    #
    # Colors which should be used to draw the terminal cursor. If these are unset,
    # the cursor color will be the inverse of the cell color.
    cursor:
      text: "#221a02"
      cursor: "#f79a32"
      # cursor: '#c2a383'
      # text: CellBackground
      # cursor: CellForeground

    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    # Selection colors
    #
    # Colors which should be used to draw the selection area. If selection
    # background is unset, selection color will be the inverse of the cell colors.
    # If only text is unset the cell text color will remain the same.
    selection:
      text: "#221a02"
      background: "#889b4a"
      # background: '#c2a383'

    # search:
    #   matches:
    #     foreground:
    #     background:
    #   focused_match:
    #     foreground:
    #     background:
    #   bar:
    #     foreground:
    #     background:

    # line_indicator:
    #     foreground:
    #     background:

    hints:
      start:
        foreground: "#201f1f"
        background: "#f79a32"
      end:
        foreground: "#201f1f"
        background: "#f79a32"

    # Line indicator
    #
    # Color used for the indicator displaying the position in history during
    # search and vi mode.
    #
    # By default, these will use the opposing primary color.
    # line_indicator:
    # foreground: '#dc3958'
    # background: None

    # blue:    '#733e8b'
    normal:
      black: "#201f1f"
      red: "#dc3958"
      green: "#819c3b"
      yellow: "#f79a32"
      blue: "#924f79"
      magenta: "#7e5053"
      cyan: "#088649"
      white: "#a89983"
    bright:
      black: "#676767"
      red: "#f14a68"
      green: "#a3b95a"
      yellow: "#f79a32"
      blue: "#dc3958"
      magenta: "#fe8019"
      cyan: "#4c96a8"
      white: "#51412c"
    dim:
      black: "#676f78"
      red: "#dc3958"
      green: "#088649"
      yellow: "#f79a32"
      blue: "#733e8b"
      magenta: "#7e5053"
      cyan: "#088649"
      white: "#a89983"

  gruvbox_material_medium_dark: &gruvbox_material_medium_dark
    primary:
      background: "#282828"
      foreground: "#dfbf8e"
    normal:
      black: "#665c54"
      red: "#ea6962"
      green: "#a9b665"
      yellow: "#e78a4e"
      blue: "#7daea3"
      magenta: "#d3869b"
      cyan: "#89b482"
      white: "#dfbf8e"
    bright:
      black: "#928374"
      red: "#ea6962"
      green: "#a9b665"
      yellow: "#e3a84e"
      blue: "#7daea3"
      magenta: "#d3869b"
      cyan: "#89b482"
      white: "#dfbf8e"

  gruvbox: &gruvbox
    primary:
      background: "#1c1b1a"
      foreground: "#dfbf8e"
      # foreground: '#ebdbb2'
      bright_foreground: "#448488"
      #dim_foreground: '#9a9a9a'

    cursor:
      text: "#1c1b1a"
      cursor: "#dfbf8e"

    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    selection:
      text: "#655b53"
      background: "#dfbf8e"

    hints:
      start:
        foreground: "#201f1f"
        background: "#f79a32"
      end:
        foreground: "#201f1f"
        background: "#f79a32"

    normal:
      black: "#665c54"
      red: "#ea6962"
      green: "#989719"
      yellow: "#e78a4e"
      blue: "#689d69"
      magenta: "#b16185"
      cyan: "#448488"
      white: "#dfbf8e"
    bright:
      black: "#928374"
      red: "#ea6962"
      green: "#a9b665"
      yellow: "#e3a84e"
      blue: "#a43a57"
      magenta: "#d3869b"
      cyan: "#89b482"
      white: "#dfbf8e"

  mona_list: &mona_lisa
    primary:
      background: "#160b0e"
      foreground: "#af8d6e"
      bright_foreground: "#586081"

    cursor:
      text: "#160b0e"
      cursor: "#d08040"

    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground

    selection:
      text: "#160b0e"
      background: "#a0936a"

    hints:
      start:
        foreground: "#201f1f"
        background: "#f79a32"
      end:
        foreground: "#201f1f"
        background: "#f79a32"

    normal:
      black: "#44230f"
      red: "#ad3a23"
      green: "#989719"
      yellow: "#cf8233"
      blue: "#646f6f"
      magenta: "#ad2e36"
      cyan: "#689d69"
      white: "#bba45a"
    bright:
      black: "#9a5534"
      red: "#ff5b3e"
      green: "#b8ba25"
      yellow: "#ffa678"
      blue: "#b16185"
      magenta: "#d3869b"
      cyan: "#89b482"
      white: "#ffe8a7"

colors:
  *kimbie

  # Indexed Colors
  #
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  #
  # Example:
  #   `- { index: 16, color: '#ff00ff' }`
  #
  #indexed_colors: [{ index: 16, color: '#ff00ff' }]

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Values for `animation`:
#   - Ease
#   - EaseOut
#   - EaseOutSine
#   - EaseOutQuad
#   - EaseOutCubic
#   - EaseOutQuart
#   - EaseOutQuint
#   - EaseOutExpo
#   - EaseOutCirc
#   - Linear
#
# Specifying a `duration` of `0` will disable the visual bell.
bell:
  animation: EaseOutExpo
  duration: 1
  color: "#ffffff"
  # command:
  #   program: notify-send
  #   args: ["Bell Rang"]

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  save_to_clipboard: true

# Allow terminal applications to change Alacritty's window title.

cursor:
  style:
    # Vim style zsh doesn't change back and forth
    shape: Block
    blinking: Always
    blink_interval: 750
    unfocused_hollow: true
    vi_mode_style: Block
    thickness: 0.15

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.
# Entries in `shell.args` are passed unmodified as arguments to the shell.
#
# Default:
#   - (macOS) /bin/bash --login
#   - (Linux/BSD) user login shell
#   - (Windows) powershell
#shell:
#  program: /bin/bash
#  args:
#    - --login

# Startup directory
#
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
working_directory: None

# Send ESC (\x1b) before characters when alt is pressed.
# alt_send_esc: true

# Offer IPC using `alacritty msg` (unix only)
ipc_socket: true

hints:
  # Keys used for the hint labels.
  alphabet: "jfkdls;ahgurieowpq"

  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.

  enabled:
    # - {
    #   key: Y,
    #   mods: Control|Shift,
    #   action: Copy,
    #   regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)[^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
    # }
    - regex:
        "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
        [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"

      # action: Copy
      command: xdg-open
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: O
        mods: Control|Shift

    - regex:
        "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
        [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
      action: Copy
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: Y
        mods: Control|Shift
    # - regex: "((/|~|\\$[\\w_]+)[^/\0 ]*)+/?"
    - regex: "((/|~)[^/\0 ]*)+/?"
      action: Copy
      post_processing: true
      mouse:
        enabled: true
        mods: None
      binding:
        key: P
        mods: Control|Shift

# /home/lucas
# /home/lucas/
# ~/lucas/
# ~
# /
# $HOME HER/hey
# $HOME_HER/hey
# $HOME/hey

# ========================== MOUSE ==========================
mouse:
  # Click settings
  # wait for accepting multiple clicks
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false

  # Old??
  # hints:
  #   modifiers: Control
  #   launcher:
  #     program: xdg-open
  #     args: []

  #   # These are the modifiers that need to be held down for opening URLs when clicking
  #   # on them. The available modifiers are documented in the key binding section.
  #   modifiers: None

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty captures the mouse, the
# `Shift` modifier is automatically added as a requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings)
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# - { mouse: Right, action: ExpandSelection }
mouse_bindings:
  - { mouse: Middle, action: Copy }
  - { mouse: Middle, mode: ~Vi, action: PasteSelection }
  - { mouse: Right, mode: ~Vi, action: ClearSelection }
  - { mouse: Middle, mods: Alt, action: Copy }
  - { mouse: Right, mode: Vi, mods: Alt, action: Open }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
#- { key: Paste,                                       action: Paste          }
#- { key: Copy,                                        action: Copy           }
#- { key: L,         mods: Control,                    action: ClearLogNotice }
#- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
#- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  }
#- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
#- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   }
#- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

# Vi Mode
#- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
#- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
#- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
#- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
#- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
#- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
#- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
#- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
#- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
#- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
#- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
#- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
#- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
#- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
#- { key: Y,                           mode: Vi|~Search, action: Copy                    }
#- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
#- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
#- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
#- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
#- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
#- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
#- { key: Return,                      mode: Vi|~Search, action: Open                    }
#- { key: K,                           mode: Vi|~Search, action: Up                      }
#- { key: J,                           mode: Vi|~Search, action: Down                    }
#- { key: H,                           mode: Vi|~Search, action: Left                    }
#- { key: L,                           mode: Vi|~Search, action: Right                   }
#- { key: Up,                          mode: Vi|~Search, action: Up                      }
#- { key: Down,                        mode: Vi|~Search, action: Down                    }
#- { key: Left,                        mode: Vi|~Search, action: Left                    }
#- { key: Right,                       mode: Vi|~Search, action: Right                   }
#- { key: Key0,                        mode: Vi|~Search, action: First                   }
#- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
#- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
#- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
#- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
#- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
#- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
#- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
#- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
#- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
#- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
#- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
#- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
#- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
#- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
#- { key: N,                           mode: Vi|~Search, action: SearchNext              }
#- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

# Search Mode
#- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
#- { key: Escape,                mode: Search,     action: SearchCancel          }
#- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
#- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
#- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
#- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
#- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
#- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
#- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
#- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
#- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

# (Windows, Linux, and BSD only)
#- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
#- { key: C,              mods: Control|Shift,                   action: Copy             }
#- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
#- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
#- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
#- { key: Insert,         mods: Shift,                           action: PasteSelection   }
#- { key: Key0,           mods: Control,                         action: ResetFontSize    }
#- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
#- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
#- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
#- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
#- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# at once.
key_bindings:
  # - { key: Y,         mods: Control,              action:  Copy             }
  - { key: P, mods: Control, action: Paste }
  - { key: Insert, mods: Shift, action: Paste }
  - { key: Key0, mods: Control, action: ResetFontSize }
  - { key: Equals, mods: Control, action: IncreaseFontSize }
  - { key: Plus, mods: Control, action: IncreaseFontSize }
  - { key: Minus, mods: Control, action: DecreaseFontSize }
  - { key: M, mods: Control|Shift, action: Minimize }
  - { key: Semicolon, mods: Control|Option|Super, action: ClearLogNotice }
  - { key: Period, mods: Control|Option|Super, action: CreateNewWindow }
  - { key: Comma, mods: Control|Option|Super, action: SpawnNewInstance }
  - { key: Space, mods: Control|Shift, action: ToggleViMode }
  - {
      key: B,
      mods: Control|Option,
      command: { program: "alacritty", args: ["-e", "btm"] },
    }
  # https://www.eso.org/~ndelmott/ascii.html
  - { key: Return, mods: Shift, chars: "\x1b[13;2u" }
  - { key: Return, mods: Control, chars: "\x1b[13;5u" }
  - { key: J, mods: Control|Shift, chars: "\x1b[74;6u" }
  - { key: K, mods: Control|Shift, chars: "\x1b[75;6u" }
  - { key: H, mods: Control|Shift, chars: "\x1b[72;6u" }
  - { key: L, mods: Control|Shift, chars: "\x1b[76;6u" }
  - { key: M, mods: Control|Shift, chars: "\x1b[77;6u" }
  - { key: N, mods: Control|Shift, chars: "\x1b[78;6u" }
  - { key: Comma, mods: Control, chars: "\x1b[44;5u" }
  - { key: Period, mods: Control, chars: "\x1b[46;5u" }

  # Vi Mode
  - { key: Space, mods: Control, mode: Vi, action: ScrollToBottom }
  - { key: Space, mods: Control, action: ToggleViMode }
  - { key: I, mode: Vi|~Search, action: ScrollToBottom }
  - { key: I, mode: Vi|~Search, action: ToggleViMode }
  - { key: C, mods: Control, mode: Vi|~Search, action: ScrollToBottom }
  - { key: C, mods: Control, mode: Vi|~Search, action: ToggleViMode }
  - { key: Escape, mode: Vi, action: ClearSelection }
  - { key: Y, mods: Control, mode: Vi|~Search, action: ScrollLineUp }
  - { key: E, mods: Control, mode: Vi|~Search, action: ScrollLineDown }
  - { key: G, mode: Vi|~Search, action: ScrollToTop }
  - { key: G, mods: Shift, mode: Vi|~Search, action: ScrollToBottom }
  - { key: B, mods: Control, mode: Vi|~Search, action: ScrollPageUp }
  - { key: F, mods: Control, mode: Vi|~Search, action: ScrollPageDown }
  - { key: U, mods: Control, mode: Vi|~Search, action: ScrollHalfPageUp }
  - { key: D, mods: Control, mode: Vi|~Search, action: ScrollHalfPageDown }
  - { key: Y, mode: Vi|~Search, action: Copy }
  - { key: Y, mode: Vi|~Search, action: ClearSelection }
  - { key: V, mode: Vi|~Search, action: ToggleNormalSelection }
  - { key: V, mods: Shift, mode: Vi|~Search, action: ToggleLineSelection }
  - { key: V, mods: Control, mode: Vi|~Search, action: ToggleBlockSelection }
  - { key: V, mods: Alt, mode: Vi|~Search, action: ToggleSemanticSelection }
  - { key: Return, mode: Vi|~Search, action: Open }
  - { key: K, mode: Vi|~Search, action: Up }
  - { key: J, mode: Vi|~Search, action: Down }
  - { key: H, mode: Vi|~Search, action: Left }
  - { key: L, mode: Vi|~Search, action: Right }
  - { key: Up, mode: Vi|~Search, action: Up }
  - { key: Down, mode: Vi|~Search, action: Down }
  - { key: Left, mode: Vi|~Search, action: Left }
  - { key: Right, mode: Vi|~Search, action: Right }
  - { key: Key0, mode: Vi|~Search, action: First }
  - { key: Key4, mode: Vi|~Search, action: Last }
  - { key: Key6, mods: Shift, mode: Vi|~Search, action: FirstOccupied }
  - { key: M, mods: Shift, mode: Vi|~Search, action: Middle }
  - { key: B, mode: Vi|~Search, action: SemanticLeft }
  - { key: W, mode: Vi|~Search, action: SemanticRight }
  - { key: E, mode: Vi|~Search, action: SemanticRightEnd }
  - { key: B, mods: Shift, mode: Vi|~Search, action: WordLeft }
  - { key: W, mods: Shift, mode: Vi|~Search, action: WordRight }
  - { key: E, mods: Shift, mode: Vi|~Search, action: WordRightEnd }
  - { key: Key5, mods: Shift, mode: Vi|~Search, action: Bracket }
  - { key: Slash, mode: Vi|~Search, action: SearchForward }
  - { key: Slash, mods: Shift, mode: Vi|~Search, action: SearchBackward }
  - { key: N, mode: Vi|~Search, action: SearchNext }
  - { key: N, mods: Shift, mode: Vi|~Search, action: SearchPrevious }
  - { key: Q, mode: Vi|~Search, action: ToggleViMode }
  - { key: H, mods: Shift, mode: Vi|~Search, action: First }
  - { key: L, mods: Shift, mode: Vi|~Search, action: Last }

debug:
  # Display the time it takes to redraw each frame.
  render_timer: false

  # Keep the log file after quitting Alacritty.
  persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - None
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  log_level: Warn

  # Print all received window events.
  print_events: false
