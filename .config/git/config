[user]
  name = Lucas Burns
  email = burnsac@me.com
  signingkey = C011CBEF6628B679
  # signingkey = E93ACCAAAEB024788C106EDEC011CBEF6628B679

[core]
  autocrlf = input
  excludesfile = ~/.config/git/gitignore_global
  editor = "nvr --remote-wait-silent" # or nvim
  pager = delta
  commitGraph = true
  # Set attributes on files. Used for general diff improvements.
  # attributesfile = ~/.gitattributes
  # Don't prompt for commit messages for merge commits.
  # mergeoptions = --no-edit

[credential "https://github.com"]
  helper = !gh auth git-credential

[help]
  autocorrect = 1

[init]
  defaultBranch = master

[color]
  ui = auto
  ; grep = auto

[color "branch"]
  current = "#4c96a8" bold
  upstream = "#fe8019" bold
  local = "#dc3958"
  remote = "#819c3b"
  plain = "#733e8b"

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[color "diff"]
  meta = 39
  commit = "#FF5813" bold
  whitespace = red reverse
  new = green bold
  old = red bold
  frag = magenta bold
  ; context =

[color "decorate"]
  branch = "#819C3B" bold
  remoteBranch = 12 bold
  HEAD = 14 bold
  tag = "#98676A" bold
  stash = "#7EB2B1" bold

[color "status"]
  header = "#7e5053" bold
  added = yellow
  updated = blue
  changed = green
  untracked = red
  branch = "#733e8b"
  nobranch = "#dc3958" bold
  unmerged = "#fe8019"

[color "interactive"]
  prompt = "#fe8019" bold
  header = "#7e5053" bold
  help = green bold
  error = red bold

; [color "grep"]
;   context = "#A06469" bold
;   filename = "#A06469" bold
;   function = "#A06469" bold
;   linenumber = "#A06469" bold
;   match = "#A06469" bold
;   matchContext = "#A06469" bold
;   matchSelected = "#A06469" bold
;   selected = "#A06469" bold
;   separator = "#A06469" bold

[diff]
  algorithm = patience
  colorMoved = default
  indentHeuristic = on
  mnemonicPrefix = true
  compactionHeuristic = true
#  renames = copies
[diff "ruby"]
  funcname = "^ *\\(\\(def\\) .*\\)"
[diff "image"]
  textconv = identify

[log]
  decorate = auto
  abbrevCommit = true

[status]
  short = true
  branch = false

[fetch]
  prune = true

[push]
  # Push to the set upstream branch being tracked by default.
  default = current

# Forgot: what is this for?
[diff "gpg"]
  texconv = gpg --no-tty --decrypt --quiet

[gpg]
  program = /usr/bin/gpg
  ; format = x509

; [tag]
;   gpgsign = true
;
; [gpg "x509"]
;   program = gitsign

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process

[checkout]
  defaultRemote = origin

[commit]
  gpgsign = true
  template = ~/.config/git/gitmessage
  verbose = true

[stash]
  showPatch = true

[pull]
  ff = only
  default = current
  rebase = false

[apply]
  # Cleanup whitespace by default when apply patches.
  whitespace = fix

[rebase]
  # Run `git stash` if needed before a `git rebase`
  autoStash = true
  # Auto-add `--autosquash` to `git rebase`
  autoSquash = true

[pretty]
  l  = * %C(auto)%h%Creset -%C(auto)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset
  lg = %C(auto)%h%Creset -%C(auto)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset
  rf = * %C(auto)%h%Creset - %<(10)%C(bold)%gD %Creset- %C(auto)%d %gs %C(bold green)(%cr) %C(bold blue)<%an>%Creset
  y = %C(bold yellow)%h%C(reset) %C(cyan)%s%C(reset) %C(bold magenta)-%C(reset) %ar %C(bold blue)<%an>%C(reset)%C(auto)%d%C(reset)%n

[merge]
  tool = nvim
  conflictstyle = diff3

[mergetool]
  keepBackup = false
  prompt = true

[mergetool "nvim"]
  cmd = nvim -f -c \"Gvdiffsplit\" \"$MERGED\"
;   cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[url "git@github.com:"]
  # Always use GitHub SSH protocol to push.
  # Allows use of git:// for public repositories with push access
  pushInsteadOf = git://github.com/

[url "https://github.com/"]
  # Use HTTP for GitHub instead of git:// or git@
  # Enable this in networks where git:// or git@ are blocked.
  #insteadOf = git://github.com/
  #insteadOf = git@github.com:
  insteadOf = gh:

[url "git@github.com:"]
  # Use SSH for GitHub instead of https://
  # Enable this in networks where https:// has issues.
  #insteadOf = https://github.com/

[alias]
  # https://stackoverflow.com/questions/2221658/whats-the-difference-between-head-and-head-in-git/2222920#2222920
  # HEAD~ = go back number of generations
  # HEAD^ = merge commits (2 or more immediate parents)
  sub = submodule
  subp = submodule foreach git pull
  subc = submodule foreach git co master

  aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\ \t => \\2/' | sort | bat
  alias-grep = !git config --list | grep ^alias\\. | cut -c 7- | grep -Ei --color \"$1\" "#"
  a = add
  # Add origin url
  addurl = remote set-url --add origin
  # Ammed to last commit
  amend = commit --amend --reuse-message=HEAD
  b = branch
  # List all branches - sorted
  branches = branch -a --sort=-authordate --color=always
  # Show all local and remote branches & commits within them
  sba = show-branch --color=always -a --more=10 --no-name
  # Create new branch off of default origin branch (origin/master or origin/main)
  newbranch = "!f() { [[ -n $@ ]] && git fetch origin && git checkout -b \"$@\" origin/$(git main) && git branch --unset-upstream; }; f"
  bclone = clone --bare
  # Rebase interactive for all commits on feature branch
  rebase-branch = !git rebase -i `git merge-base master HEAD`
  # Get remote url
  origin = remote get-url origin
  # Get name of default head branch
  main = !git remote show $(git upstream) | awk '/HEAD branch/ {print $NF}'
  unstage = reset -q HEAD --
  uncommit = reset --mixed HEAD~
  # Repeat last commit message
  recommit = commit --reuse-message=HEAD
  # when Git loses upstream tracking branch (haven't figured out why exactly) run:
  # git set-upstream
  # git pull
  set-upstream = !git branch --set-upstream-to=origin/`git symbolic-ref --short HEAD`

  root = rev-parse --show-toplevel
  croot = !cd $(git rev-parse --show-toplevel)

  cl = clone
  co = checkout
  c = commit
  cm = commit -m
  csm = commit -S -m
  cs = commit -S

  conflicts = !git --no-pager diff --name-only --diff-filter=U | xargs grep -c '^=======$'

  d = diff
  dc = diff --cached

  l = log -p
  lc = log ORIG_HEAD.. --stat --no-merges
  ; lgs = log --graph --abbrev-commit --decorate --pretty=lg --all
  ; lgf = log --graph --abbrev-commit --decorate --all --stat --pretty=l
  ; lol = log --graph --decorate --pretty=oneline --abbrev-commit
  ; lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ; lp = log --pretty=format:"%hCred %a%Cgreen | %s%C(yellow)%d%C(magenta) [%an]" --graph --date=short
  ; lhist = log --pretty=format:"%Cred%h %Cgreen%d | %s%C(yellow)%d%C(magenta) [%an%C(blue)]" --graph --date=short
  lp = "log --graph --abbrev-commit --date=relative \
        --pretty=format:'%Cred%h%Creset %Cblue%an%Creset: %s%Creset%C(yellow)%d%Creset %Cgreen(%cr)%Creset'"
  lo = "log --oneline --decorate --stat --graph \
        --format=format:'%C(bold #FF9500)%h%C(reset) %C(auto)%d%C(reset) %C(green)%s%C(reset) %C(green)(%ar)%C(reset) - %C(bold #98676A)[%C(reset)%C(#7EB2B1)%an%C(bold #98676A)]%C(reset)'"
  lt = "log --graph --abbrev-commit --decorate --date=relative -10 \
        --format=format:'%C(bold #FF5813)%h%C(reset) %C(auto)%d%C(reset) %C(dim white)%s%C(reset) %C(green)(%ar)%C(reset) - %C(bold #FF5D62)[%C(reset)%C(#957FB8)%an%C(bold #FF5D62)]%C(reset)'"
  la = "log --graph --abbrev-commit --decorate --date=relative \
        --format=format:'%C(bold #FF5813)%h%C(reset) %C(auto)%d%C(reset) %C(dim white)%s%C(reset) %C(green)(%ar)%C(reset) - %C(bold #FF5D62)[%C(reset)%C(#957FB8)%an%C(bold #FF5D62)]%C(reset)'"
  ls = "l --stat --graph --date=relative"
  # ll   = lp --numstat
  lpa  = lp --patch
  lss = log --show-signature
  # View the log and diff for a commit (previous if no SHA1 provided)
  details = log -n1 -p --format=fuller
  whenadded = log --diff-filter=A

  m = merge
  ms = merge --squash

  pl = pull
  plr = pull --rebase
  # Push to all remotes
  pa = !git remote | xargs -L1 git push --all

  ps = push
  pom = push origin master
  psf = push --force

  mkshallow = gc --prune=all

  rao = remote add origin
  remotes = remote -v
  rmc = rm --cached
  s = status -sb
  st = status
  sh = stash
  shp = stash pop
  stashes = stash list
  tags = tag --list
  # List tracked files
  tr = !git ls-tree -r $(git branch --show-current) --name-only
  # List tracked files in an actual tree with 'as-tree'
  trr = !git ls-tree -r $(git branch --show-current) --name-only | as-tree --color always
  # List untracked files
  utr = ls-files --other
  ls-del = ls-files -d
  ls-mod = ls-files -m
  ls-new = ls-files --exclude-standard -o
  ls-ign = ls-files --exclude-standard -o -i

  # Get name of default remote
  upstream = !git remote | egrep -o '(upstream|origin)' | tail -1
  # Use difftool
  vd = difftool --tool=nvimdiff --no-prompt
  vdc = difftool --tool=nvimdiff --no-prompt --cached
  # Generate changelog
  chg = !git changelog -x > CHANGELOG.md
  # Fzfgit
  fs = !fstat
  fad = !fadd
  fun = !funtrack
  # Grab a pull request
  pro = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # Open repository in the browser
  open = "!handlr open $(git remote get-url origin)"

  # Grep history
  ghist = "!f() { git grep --color=always \"$1\" $(git rev-list --all); }; f"
  ; ghistf = "!f() { git grep \"$1\" $(git rev-list --all -- \"$2\") -- \"$2\"; }; f"

  # wip - save work in progress quickly and ready to push it if necessary
  wip = "!f() { git checkout -b wip/\"$1\" && git add --update && git commit -m \"wip: $1\"; }; f"

  undo = reset --soft HEAD^
  r1 =  reset --hard HEAD~1
  r2 =  reset --hard HEAD~2
  r3 =  reset --hard HEAD~3
  r4 =  reset --hard HEAD~4
  r5 =  reset --hard HEAD~5
  r6 =  reset --hard HEAD~6
  r7 =  reset --hard HEAD~7
  parent = merge-base  HEAD  #git merge-base  branch1 branch2

[blame "gpg"]
  texconv = gpg --no-tty --decrypt --quiet

[global]
  ignore = .cargo,.zinit,.ipynb_checkpoints,Downloads,Music,Movies,Music,Videos,target
  basedir = /home/lucas/projects/github

[credential]
  helper = cache

# ================== THIRD PARTY ==============================
[ghq]
  vcs = git
  root = ~/ghq

[delta]
  features = decorations color-moved # hyperlinks
  # side-by-side unobstrusive-line-numbers
  paging = auto
  max-line-distance = 0.3
  syntax-theme = kimbro
  dark = true
  whitespace-error-style = 22 reverse
  zero-style = syntax

  line-numbers = true
  line-numbers-left-format = "┊{nm:>4}┊"
  line-numbers-left-style = "#D9AE80"
  line-numbers-right-format = "│{np:>4}│"
  line-numbers-right-style = "#D9AE80"
  line-numbers-minus-style = "#EF1D55"
  line-numbers-plus-style = "#819C3B"
  line-numbers-zero-style = "#7E602C"

  commit-style = raw
  commit-decoration-style = bold "#98676A" ul

  file-added-label = [+]
  file-copied-label = [C]
  file-modified-label = [M]
  file-removed-label = [-]
  file-renamed-label = [R]
  ; file-style = omit
  file-style = bold "#7EB2B1" ul
  file-decoration-style = "#4C96A8" box

  ; hunk-header-style = syntax bold
  hunk-header-style = file line-number syntax bold
  hunk-header-decoration-style = 13 bold box ul
  hunk-header-line-number-style = "#A06469"
  hunk-header-file-style = "#dc3958" bold

  blame-format = "{author:<18} ({commit:>7}) ┊{timestamp:^16}┊ "
  blame-palette = "#101010 #200020 #002800 #000028 #202000 #280000 #002020 #002800 #202020"

  plus-style = syntax "#182d09"
  plus-emph-style = syntax "#134d0d"
  minus-style = syntax "#461c16"
  minus-emph-style = syntax "#742d21"
  minus-empty-line-marker-style = syntax "#FF9500"

  # ??
  ; map-styles = \
    ;     bold purple => syntax "#330f29", \
    ;     bold blue => syntax "#271344", \
    ;     bold cyan => syntax "#0d3531", \
    ;     bold yellow => syntax "#222f14"

[interactive]
  diffFilter = delta --color-only

; vim: ft=gitconfig:et:sw=2:ts=2:sts=-1:fdm=marker:fmr=[[[,]]]:
