# === Core =============================================================== [[[
[user]
  name = Lucas Burns
  email = burnsac@me.com
  signingkey = C011CBEF6628B679
[github]
  user = lmburns

[core]
  eol = lf
  autocrlf = input
  excludesfile = ~/.config/git/gitignore_global
  # editor = nvim
  editor = "nvr --remote-wait-silent"
  # pager = "delta --pager=\"less $LESS_QUIT\""
  pager = delta
  commitGraph = true
  symlinks = true
  precomposeunicode = true
  bigFileThreshold = 512M
  whitespace = trailing-space,space-before-tab
  askPass = zenpass

  # Set attributes on files. Used for general diff improvements.
  # attributesfile = ~/.gitattributes
  # Don't prompt for commit messages for merge commits.
  # mergeoptions = --no-edit

# [include]
#   path = ~/.config/github/gitconfig
#   path = ~/.gitconfig-system

# [credential]
#   helper = cache
[credential "https://github.com"]
  helper =
  helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
  helper =
  helper = !/usr/bin/gh auth git-credential

[url "git@github.com:"]
  # Always use GitHub SSH protocol to push.
  # Allows use of git:// for public repositories with push access
  pushInsteadOf = https://github.com/
  pushInsteadOf = http://github.com/
  pushInsteadOf = gh:
  insteadOf = gh:
  insteadOf = https://github.com/
  insteadOf = http://github.com/
  # pushInsteadOf = git://github.com/

[url "git@gitlab.com:"]
  insteadOf = https://gitlab.com/
  insteadOf = http://gitlab.com/
  insteadOf = "gl:"

[url "git://git.suckless.org/"]
  insteadOf = "suckless:"

[url "https://gist.github.com/"]
  insteadOf = "gist:"

[url "git@github.com:lmburns/"]
  # Customized reference to my repos
  insteadOf = "ghl:"

# [url "git://github.com:"]
#   # Has to be git:// instead of git@ for cargo
#   # Use SSH for GitHub instead of https://
#   insteadOf = https://github.com/

# [url "ssh://git@github.com:"]
#   # Use SSH for GitHub instead of https://
#   insteadOf = https://github.com/

# [url "git@github.com:"]
#   # Use SSH for GitHub instead of https://
#   insteadOf = https://github.com/

# [url "https://github.com/"]
#   # Use HTTP for GitHub instead of git:// or git@
#   # Enable this in networks where git:// or git@ are blocked.
#   insteadOf = git://github.com/
#   insteadOf = git@github.com:
#   insteadOf = gh:

[hub]
  protocol = ssh
# ]]]

# === Color ============================================================== [[[
[color]
  ui = true
  push = true
  status = true
  remote = true
  branch = true
  showBranch = true
  transport = true
  pager = true
  advice = true
  interactive = true

[color "branch"]
  current = "bold #7DAEA3"
  upstream = "bold #FE8019"
  local = "#EA6962"
  remote = "#819C3B"
  plain = "#957FB8"
  # master = "#A76C8C"
  # main = "#A4B494"

[color "blame"]
  highlightRecent = "blue,12 month ago,white,1 month ago,bold #7E82CC"
  repeatedLines = "#7DAEA3"

[color "push"]
  error = "bold #DC3958"
[color "transport"]
  rejected = "bold #DC3958"

[color "status"]
  header = "bold #7E82CC"
  added = "bold #819C3B"
  updated = "#4C96A8"
  changed = "#689D6A"
  untracked = "#EF1D55"
  branch = "bold #7DAEA3"
  nobranch = "bold #dc3958"
  localBranch = "bold #EA6962"
  remoteBranch = "bold #819C3B"
  unmerged = "#fe8019"

[color "diff"]
  context = "#C2A383"       # context text
  meta = "#5E452B"          # metainformation
  frag = "bold #FF5813"     # hunk header
  commit = "bold #A06469"
  whitespace = red reverse
  new = "bold #819C3B"
  old = "bold #DC3958"
  newMoved = "bold #819C3B"  # added lines
  oldMoved = "bold #DC3958"  # deleted lines
  func = "bold #A06469"

[color "remote"]
  hint = "bold #4C96A8"
  warning = "bold #FF9500"
  success = "bold #819C3B"
  error = "bold #EF1D55"

[color "decorate"]
  branch = "bold #7DAEA3"
  remoteBranch = "bold #819C3B"
  HEAD = "bold #7E82CC"
  tag = "bold #98676A"
  stash = "bold #D3869B"
  grafted = "#EA6962"

[color "interactive"]
  prompt = "bold #FE8019"
  header = "bold #7E5053"
  help = green bold
  error = red bold

# [color "advice"]
#   # Customized colors for hints
#   hint = ""

# [color "grep"]
#   context = "#A06469" bold
#   filename = "#A06469" bold
#   function = "#A06469" bold
#   linenumber = "#A06469" bold
#   match = "#A06469" bold
#   matchContext = "#A06469" bold
#   matchSelected = "#A06469" bold
#   selected = "#A06469" bold
#   separator = "#A06469" bold

[column]
  # auto column row dense nodense
  ui = auto column nodense
  branch = plain
  clean = auto column nodense
  status = auto column nodense
  tag = plain
# ]]]

# === Subcommands ======================================================== [[[
# [branch]

[interactive]
  diffFilter = delta --color-only

[help]
  autocorrect = 1

[init]
  defaultBranch = master

[fetch]
  prune = true

[clone]
  defaultRemoteName = origin

[push]
  default = current  # Push to the set upstream branch being tracked by default
  followTags = false

[pull]
  ff = only
  default = current
  rebase = false

[checkout]
  defaultRemote = origin

[commit]
  gpgsign = true
  template = ~/.config/git/gitmessage  # Use a template for commit message
  verbose = true                       # Show diff when preparing commit message

[status]
  short = true
  branch = false
  showUntrackedFiles = all

[log]
  decorate = auto
  abbrevCommit = true

[tag]
  gpgsign = true
  sort = version:refname

[stash]
  showPatch = true
[gc]
  writeCommitGraph = true
[pack]
  sparse = true

[blame]
  coloring = highlightRecent  # repeatedLines
  date = relative
  markUnblamableLines = true
  markIgnoredLines = true
  showEmail = true

[blame "gpg"]
  texconv = gpg --no-tty --decrypt --quiet

[apply]
  whitespace = fix  # Cleanup whitespace by default when apply patches

[diff]
  tool = nvim
  guitool = nvimdiff
  renames = copies
  algorithm = histogram  # patience
  colorMoved = default
  indentHeuristic = on
  mnemonicPrefix = true
  compactionHeuristic = true
[difftool]
  prompt = false
[diff "nvim"]
  cmd = nvim -f -c \"Gvdiffsplit\" \"$MERGED\"
[diff "ruby"]
  funcname = "^ *\\(\\(def\\) .*\\)"
[diff "image"]
  textconv = identify
[diff "gpg"]
  texconv = gpg --no-tty --decrypt --quiet

[merge]
  tool = nvim
  guitool = nvimdiff
  # Display diffs between ancestor commit and each of the two merge parents
  #   diff3 zdiff3
  conflictStyle = diff3
  # Equivalent to passing --ff-only
  ff = only
  renames = copies
  directoryRenames = conflict
  # Print diffstat between ORIG_HEAD and the merge result at the end of the merge
  stat = true
  # Along with branch names, show log with branch description text
  branchdesc = true
  # Along with branch names, show log with at most N 1-line descs from the merged commits
  log = true
[mergetool]
  keepBackup = false
  prompt = false
[mergetool "nvim"]
  cmd = nvim -f -c \"Gvdiffsplit\" \"$MERGED\"
  # cmd = nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'

[rebase]
  # Run `git stash` if needed before a `git rebase`
  autoStash = true
  # Auto-add `--autosquash` to `git rebase`
  autoSquash = true

[filter "lfs"]
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
# ]]]

# === EXTERNAL =========================================================== [[[
[gpg]
  program = /usr/bin/gpg
  # format = x509
# [gpg "x509"]
#   program = gitsign

# [man]
#   viewer =

# [pager]
#   diff = delta
#   log = delta
# ]]]

# === THIRD PARTY ======================================================== [[[
[global]
  ignore = .cargo,.zinit,.ipynb_checkpoints,Downloads,Music,Movies,Music,Videos,target,node_modules
  # basedir = /home/lucas/projects/github

[ghq]
  vcs = git
  root = ~/ghq

[tig]
  line-graphics = utf-8
  tab-size = 2

# [diff-so-fancy]
#   markEmptyLines = true
#   changeHunkIndicators = true
#   stripLeadingSymbols = true
#   useUnicodeRuler = true

[color "diff-highlight"]
  # oldNormal = red bold
  # oldHighlight = red bold 52
  # newNormal = green bold
  # newHighlight = green bold 22
  oldNormal = syntax "#461c16"
  oldHighlight = syntax "#742d21"
  newNormal = syntax "#182d09"

[delta "unobtrusive-line-numbers"]
  line-numbers = true
  line-numbers-minus-style = "bold #EF1D55"
  line-numbers-plus-style = "bold #819C3B"
  line-numbers-zero-style = "#7E602C"
  line-numbers-left-format = "{nm:>4}┊"
  line-numbers-right-format = "{np:>4}│"
  line-numbers-left-style = "#D9AE80"
  line-numbers-right-style = "#D9AE80"

[delta "decorations"]
  commit-decoration-style = bold yellow box ul
  file-style = bold yellow ul
  file-decoration-style = none
  hunk-header-decoration-style = yellow box newHighlight = syntax "#134d0d"

[delta]
  paging = auto
  dark = true
  syntax-theme = kimbox
  tabs = 4
  # features = decorations unobtrusive-line-numbers

  # use n/N to navigate diff sections
  navigate = true
  side-by-side = true
  hyperlinks = true
  # hyperlinks-commit-link-format = "https://github.com/"

  diff-stat-align-width = 48
  wrap-left-symbol = "↵"
  wrap-right-symbol = "↴"
  wrap-right-prefix-symbol = "…"
  wrap-max-lines = 2
  wrap-right-percent = 37.0

  zero-style = syntax
  plus-style = syntax "#182d09"
  plus-emph-style = syntax "#134d0d"
  plus-non-emph-style = syntax "#182d09"
  plus-empty-line-marker-style = syntax "#445321"
  minus-style = syntax "#461c16"
  minus-emph-style = syntax "#742d21"
  minus-non-emph-style = syntax "#461c16"
  minus-empty-line-marker-style = syntax "#961134"
  whitespace-error-style = "reverse #938AA9"
  keep-plus-minus-markers = false

  inline-hint-style = "bold #A25BC4"

  line-numbers = true
  # line-fill-method = "ansi"  # ansi, spaces
  line-numbers-left-format = "┊{nm:>4}┊"
  line-numbers-left-style = "#D9AE80"
  line-numbers-right-format = "│{np:>4}│"
  line-numbers-right-style = "#D9AE80"
  line-numbers-minus-style = "bold #EF1D55"
  line-numbers-plus-style = "bold #819C3B"
  line-numbers-zero-style = "#7E602C"
  line-buffer-size = 32
  ### within-line diff algorithm
  max-line-distance = 0.3
  max-line-length = 512

  relative-paths = true
  right-arrow = "⟶  "
  file-added-label = [+]
  file-copied-label = [C]
  file-modified-label = [M]
  file-removed-label = [-]
  file-renamed-label = [R]
  file-style = "bold ul #7EB2B1"
  file-decoration-style = "box #4C96A8"
  # file-transformation = 'sed command'

  commit-style = raw
  commit-decoration-style = bold ul "#98676A"

  hunk-label = "• "
  hunk-header-decoration-style = bold box ul "#FE8019"
  hunk-header-file-style = bold "#DC3958"
  hunk-header-line-number-style = "bold #938AA9"
  hunk-header-style = file line-number syntax bold

  ### Style string for non-matching lines of grep output. [zero-style]
  # grep-context-line-style = syntax
  ### Style string for file paths in grep output. [hunk-header-file-style]
  grep-file-style = "bold #957FB8"
  ### Style string for line numbers in grep output. [hunk-header-line-number-style]
  grep-line-number-style = "bold #DC3958"
  ### Style string for matching lines of grep output. [plus-style]
  # grep-match-line-style = syntax "#182d09"
  ### Style string for the matching substrings within a matching line of grep output. [plus-emph-style]
  # grep-match-word-style = syntax "#134d0d"
  ### Separator symbol printed after the file path and line number in grep output. ["keep"]
  grep-separator-symbol = ":"

  blame-format = "{author:<18} ({commit:>7}) ┊{timestamp:^16}┊ "
  blame-palette = "#101010 #200020 #002800 #000028 #202000 #280000 #002020 #002800 #202020"
  blame-code-style = syntax
  # blame-separator-format = "{n:^4_block}"
  blame-separator-format = "│{n:^4}│"
  blame-separator-style = "#7E602C"
  blame-timestamp-format = "%Y-%m-%d %H:%M:%S %z"

  merge-conflict-begin-symbol = "▼"
  merge-conflict-end-symbol = "▲"
  merge-conflict-ours-diff-header-decoration-style = "box bold #77A172"
  merge-conflict-ours-diff-header-style = "bold #A89984"
  merge-conflict-theirs-diff-header-decoration-style = "box bold #7E5053"
  merge-conflict-theirs-diff-header-style = "bold #A89984"

  # ??
  ; map-styles = \
    ;     bold purple => syntax "#330f29", \
    ;     bold blue => syntax "#271344", \
    ;     bold cyan => syntax "#0d3531", \
    ;     bold yellow => syntax "#222f14"
# ]]]

# ===================== ALIAS ================================= [[[
[alias]
  # === Alias ==============================================================
  # aliases = config --get-regexp alias
  aliases = !git config --list | rg 'alias\\.' | sed -E 's/alias\\.([^=]*)=(.*)/\\1\\ \t => \\2/' | sort
  alias-grep = !git config --list | rg '^alias\\.' | cut -c 7- | grep -Ei --color \"$1\" "#"

  # === Misc ===============================================================
  # Grab a pull request
  pro = "!f() { git fetch -fu ${2:-origin} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
  # Grep history
  ghist = "!f() { git grep --color=always \"$1\" $(git rev-list --all); }; f"
  # ghistf = "!f() { git grep \"$1\" $(git rev-list --all -- \"$2\") -- \"$2\"; }; f"
  # wip - save work in progress quickly and ready to push it if necessary
  wip = "!f() { git checkout -b wip/\"$1\" && git add --update && git commit -m \"wip: $1\"; }; f"

  # === Directory ==========================================================
  # Show directory where this project is
  root = rev-parse --show-toplevel
  # Show directory where this project is
  toplevel = rev-parse --show-toplevel

  # === Remotes ============================================================
  # Get name of default remote
  upstream = !git remote | perl -lne 'print && exit if /(upstream|origin)/'
  # When lose upstream tracking branch run: git set-upstream; git pull;
  set-upstream = !git branch --set-upstream-to=origin/$(git symbolic-ref --short HEAD)

  # Add a URL named origin
  add-url = remote set-url --add origin
  # Get remote url
  origin = remote get-url origin
  # Change the existing origin URL
  set-origin = remote set-url origin
  # Add an origin
  add-origin = remote add origin
  # Display information about the default remote branch
  show-origin = remote show origin
  # List remotes
  remotes = remote -v
  # Add an origin
  rao = remote add origin

  # === Branch =============================================================
  br = branch
  # Get name of default head branch
  main = !git remote show $(git upstream) | awk '/HEAD branch/ {print $NF}'
  # Get name of default head branch (faster) TODO: finish
  mainf = branch --list master main
  # Show all local and remote branches & commits within them
  branch-commits = show-branch -a --more=10 --no-name --color=always
  # Create new branch off of default origin branch (origin/master or origin/main)
  branch-new = "!f() { [[ -n $@ ]] && git fetch origin && git checkout -b \"$@\" origin/$(git main) && git branch --unset-upstream; }; f"
  # List branches
  branches = branch -a --sort=-authordate --color=always
  # List remote branches
  ls-remote-branches = branch --remotes --sort=-authordate --color=always
  remote-branches = branch --remotes --sort=-authordate --color=always
  # List branches that haven't been merged
  unmerged-branches = branch --no-merged
  # Show all local and remote branches & commits within them
  sba = show-branch -a --more=10 --no-name --color=always
  # Export branch and its history to file
  export-branch = bundle create
  # Import a branch created with bundle: <repo> -b <branch>
  import-branch = clone repo.bundle
  # Archive the master branch
  archivem = !git archive $(git main) --format=zip --output=$(git main).zip
  # Rename (move) a branch
  branch-mv = branch -m
  # Copy a branch
  branch-cp = branch -c

  # Gets the name of the current branch
  # current-branch = branch --current
  # current-branch = rev-parse --abbrev-ref HEAD

  # === Add ================================================================
  a = add
  # Record path will be added later
  track = add -N
  # Partially add file
  partial = add -p
  # Record path will be added later
  addl = add -N
  # Partially add file
  addp = add -p

  # === Clone ==============================================================
  cl = clone
  clone1 = clone --depth 1
  clone2 = clone --depth 2
  cloneb = clone --bare
  clonef = clone --recurse-submodules

  # === Pull ===============================================================
  pl = pull
  plr = pull --rebase
  plm = pull --merge
  pullr = pull --rebase
  pullm = pull --merge
  # Undo a shallow clone
  unshallow = fetch --unshallow
  # Create a shallow clone (NOTE: see git-compact)
  mkshallow = !git pull --depth 1 && git gc --prune=all
  # Delete remote branches that no longer exist in origin
  prune = fetch --prune
  # prune-local = remote prune origin
  prune-all = fetch --all --prune
  # Cleanup repo without making it shallow
  clean-repo = !git remote prune origin && git repack && git prune-packed && git reflog expire --expire=1.month.ago && git gc --aggressive

  rm-refs = reflog expire --expire=1.month.ago

  # === Push ===============================================================
  ps = push
  pom = push origin master
  psom = push origin master
  psf = push --force
  psd = push --delete
  # Push to all remotes
  psa = !git remote | xargs -L1 git push --all
  # Push to all remotes
  pa = !git remote | xargs -L1 git push --all
  # Push to all remotes
  push-all = !git remote | xargs -L1 git push --all
  publish = !git remote | xargs -L1 git push --all

  # === Checkout ===========================================================
  co = checkout
  discard = checkout --
  # Create a new branch
  branchout = checkout -b
  # New branch with no history
  orphan = checkout --orphan
  # Switch to the previous branch
  back = switch -

  # === Commit =============================================================
  c = commit
  # Commit and message
  cm = commit -m
  # Commit, sign, and message
  csm = commit -S -m
  # Commit and sign
  cs = commit -S
  # Amend to last commit (same message)
  amend = commit -S --amend --reuse-message=HEAD
  # Amend to last commit
  resave = commit -S --amend
  # Reuse last commit again
  recommit = commit -S --reuse-message=HEAD
  # Change last commit's author
  reauthor = commit -S --reset-author --amend --no-edit
  # Mark the commit as a solution to the previous commit
  fixup = commit -S --fixup

  # === Cherry-pick ========================================================
  chp = cherry-pick
  chpn = cherry-pick --no-commit
  chpa = cherry-pick --abort
  chpc = cherry-pick --continue

  # === Reset ==============================================================
  unstage = reset -q HEAD --
  uncommit = reset --mixed HEAD~
  # Undo last
  undol = reset --soft HEAD^
  # Undo reset
  undo-reset = "!f() { [[ -n $1 ]] && git reset HEAD@{1} && git reset --hard origin/\"$1\"; }; f"
  # Undo the last push
  undo-push = "!f() { [[ -n $1 ]] && git push -f origin HEAD^:\"$1\"; }; f"
  # Clean working directory and startover
  nevermind = !git reset --hard HEAD && git clean -df
  # Clean working directory + ignored files and startover
  startover = !git reset --hard HEAD && git clean -dfx
  # Undo TODO: checkout
  undou = update-index --no-assume-unchanged

  r1 =  reset --hard HEAD~1
  r2 =  reset --hard HEAD~2
  r3 =  reset --hard HEAD~3
  rh1 =  reset --hard @{1}

  # === Revert =============================================================
  invert = revert

  # === Merge ==============================================================
  m = merge
  ma = merge --abort
  mF = merge --no-ff
  ms = merge --ff-only --squash
  mt = mergetool
  parent = merge-base HEAD

  # === Rebase =============================================================
  rewrite = rebase --interactive
  # Rebase interactive for all commits on feature branch
  rebase-branch = !git rebase -i $(git merge-base master HEAD)
  rb = rebase
  rbs = rebase --skip
  rbi = rebase --interactive
  rbe = rebase --edit-todo
  rbc = rebase --continue
  rba = rebase --abort
  rbt = rebase --strategy-option=theirs
  rbo = rebase --strategy-option=ours
  # Stash changes before rearranging
  rbst = rebase --autostash
  # Squash correction
  rbq = rebase -i --autosquash

  # === Diff ===============================================================
  d = diff
  dc = diff --cached
  diffc = diff --cached
  prestage = diff -w --word-diff=color
  precommit = diff --cached -w --word-diff=color --word-diff-regex='[^[:space:]<>]+'
  unmergedd = diff --name-only --diff-filter=U
  conflicts = !git --no-pager diff --name-only --diff-filter=U | xargs grep -c '^=======$'
  vd = difftool --tool=nvimdiff --no-prompt
  vdc = difftool --tool=nvimdiff --no-prompt --cached

  # === Remove =============================================================
  remove = rm
  rmc = rm --cached
  untrack = rm -r --cached

  # === Status =============================================================
  s = status -sb --renames
  sall = status --long -b -uall --ignored --renames --show-stash --ignore-submodules=all
  changed = status -sb -uno --renames
  overview = status -sb -uall
  what = show -w
  # Shows changes in current branch that have not been merged with the master
  unmergedc = !git cherry -v $(git main)

  # === Stash ==============================================================
  st = stash
  stp = stash pop
  stl = stash list
  sta = stash apply
  stc = stash clear
  std = stash drop
  sts = stash show -p --ext-diff
  stu = stash --include-untracked --keep-index
  stashes = stash list
  stash-all = stash save --include-untracked
  unstash = stash pop

  # === Bisect ==============================================================
  bs = bisect
  bsb = bisect bad
  bsg = bisect good
  bsr = bisect reset
  bss = bisect start

  # === Am ==================================================================
  fp = format-patch --stdout -1
  aa = am --abort
  ac = am --continue
  as = am --skip
  a3 = am --3way <

  # === Worktree ============================================================
  wt = worktree
  wtl = worktree list
  wta = worktree add
  wtr = worktree remove

  # === Tag ================================================================
  # List tags
  tags = tag -n1 --list
  # tags = tag -n1 --list --format="%(objectname) SPC %(objecttype) TAB %(refname)"
  # tags = tag -n1 --list --format="%(color:bold 52)%(objectname)%(color:reset) %(color:bold 48)%(HEAD)%(color:reset) %(contents:subject)"
  # Create a new tag
  tagc = tag --sign
  # Create a new tag with a message on the command line
  tagcm = tag --sign --message
  # Fetch tags
  fetch-tags = fetch --all --tags
  # Shows the most recent tags of the current branch
  # tag-latest = !git describe --tags $(git rev-list --tags --max-count=1)
  tag-latest = describe --tags --abbrev=0
  # Remove a tag locally and remotely
  rmtag = "!f() { [[ -n $1 ]] && git tag -d \"$1\" && git push origin \"refs/tags/$1\"; }; f"

  # === Submodule ==========================================================
  sub = submodule
  sub-pull = submodule foreach git pull
  sub-checkout = submodule foreach git checkout master
  sub-update = submodule update --init --recursive
  sub-upgrade = submodule update --init --remote

  # === Browser ============================================================
  # Open repository in the browser
  open = brws
  b = brws

  # === Latest =============================================================
  # latest-tag = !git describe --tags $(git rev-list --tags --max-count=1)
  latest-tag = describe --tags --abbrev=0

  # === Count ==============================================================
  # Count number of commits
  count-commit = rev-list HEAD --count
  # Count unprepared objects and their disk size
  count-obj = count-objects --human-readable

  # === Ls-variants ========================================================
  ls-contribs = shortlog --summary --numbered
  ls-remotes = remote -v
  ls-branches = branch -a --sort=-authordate --color=always
  ls-branch-commits = show-branch -a --more=10 --no-name --color=always
  ls-subs = submodule status
  ls-stashes = stash list
  ls-tags = tag -n1 --list
  # Retrieve the commit hash from the initial revision
  first-commit = !git rev-list --reverse HEAD | head -1

  # === Files ==============================================================
  # List tracked files in an actual tree with 'as-tree'
  trr = ls-ttracked
  # List untracked files in a tree
  utr = ls-tuntracked

  # List tracked files
  # Files that are tracked
  ls-tracked = ls-tree -tr --name-only HEAD
  # tr = !git ls-tree -r $(git branch --show-current) --name-only
  tr = ls-tracked
  # Files that are untracked
  ls-untracked = ls-files --others
  # Files with an unstaged deletion
  ls-deleted = ls-files --deleted
  # Files with an unstaged modification (includes deletion)
  ls-modified = ls-files --modified
  # Untracked files that need to be removed
  ls-killed = ls-files --killed
  # Files that are untracked but respect .gitignore
  ls-new = ls-files --exclude-standard --others
  # Files that are ignored
  ls-ignored = ls-files --exclude-standard --others --ignored
  # List the ignored files
  ignored = check-ignore *
  # Status of ignored files
  ignores = status --ignored
  # Ignore changes to the trace file
  ignore-changes = update-index --assume-unchanged

  # === Misc ===============================================================
  # Generate changelog
  chg = !git changelog -x > CHANGELOG.md
  # List contributors with number of commits.
  contributors = shortlog --summary --numbered

  # === External ===========================================================
  fs = !fstat
  fa = !fadd
  fu = !funtrack

  # git notes
  # git maintenance
  # git restore                # restore working tree files
  # git replace                # create/list/delete refs to replace objects
  # git instaweb               # browse working directory in browser
  # git whatchanged            # commit logs and differences they introduced
  # git blame                  # revision for each line (use more)
  # git merge-base             # find best common ancestor for merge
  # git pr                     # list/checkout pull request
  # git pull-request           # create a new pull request

  # git diff-tree --stat HEAD

  # === git shortlog # summarize git log outuput ===========================
  # | --grep=        | --grep-reflog=         |
  # | --invert-grep  | --extended-regexp (-E) | --fixed-strings (-F)  --perl-regexp (-P)
  # | --skip=        | --number=              |
  # | --author=      | --committer=           |
  shortl = shortlog --pretty=ref --email

  # Summarize log output; group alphabetically by author
  sl = shortlog --pretty=ref --email
  # Summarize log output; group by author commit count
  sln = shortlog --pretty=ref --numbered --email

  # Summarize log output; group by alphabetically by committer
  slc = shortlog --committer --pretty=ref --email
  # Summarize log output; group by committer commit count
  slcn = shortlog --committer --pretty=ref --numbered --email

  # Summarize tag log
  slt = shortlog --pretty=ref --tags --email
  # Summarize tag log; group by author commit count
  sltn = shortlog --pretty=ref --tags --email --numbered

  # === git log # show commit logs =========================================
  l = log -p --color=always
  last = log -1 HEAD --format=format:"%Cred%H"
  # View the log and diff for a commit (previous if no SHA1 provided)
  details = log -1 -p --format=fuller
  # Show commit of when a file was added
  whenadded = log --diff-filter=A
  # List the commits and changes of a specific file
  filetrail = log --follow -p -w
  mergetrail = log --ancestry-path --merges

  # Show normal diffs
  lpc   = !git -P l --graph --cumulative --date=relative | less
  lpt   = !git -P l --graph --tags --date=relative | less
  lpsc  = !git -P l --graph --stat --cumulative --date=relative | less
  lpsx  = !git -P l --graph --stat --ignore-all-space | less
  lp    = !git -P l --graph --stat --date=relative -n20 | less

  # Show diffs with delta
  ldc   = l --graph --cumulative --date=relative
  ldt   = l --graph --tags --date=relative
  ldsc  = l --graph --stat --cumulative --date=relative
  ldsx  = l --graph --stat --ignore-all-space
  ld    = l --graph --stat --date=relative -n20

  # --numstat

  ls  = log --graph --stat --date=relative --decorate
  lsg = ls --show-signature
  lsm = ls --no-merges ORIG_HEAD..
  ls1 = ls --oneline
  lso = ls --pretty=stat

  lo    = log --graph --date=relative --decorate --abbrev-commit
  # Reference style + gpg key status  (BEST)
  lr    = lo --pretty=ref
  # Reference style (s)imple
  lrs   = lo --pretty=ref-simple
  # Reference style + right aligned and (w)ide
  lrw   = lo --pretty=ref-wide
  # Reference style + gpg key status:signers name
  lrgpg = lo --pretty=ref-gpg

  # Decoration + gpg key status:key ID + full commit message
  ldf   = lo --pretty=decorate-full
  lrf   = lo --pretty=decorate-full
  # Decoration + gpg key status:signer's name
  ldgpg = lo --pretty=decorate-gpg

  # git log --raw --no-renames --date=relative --pretty=format:"%C(bold 48)%h%C(reset) %C(bold 43)%cd%C(reset)"
  # git log --no-walk --tags --pretty="%h %ci %d %s"
  # git diff @{1}
  # git diff @
  # git log --no-walk --tags --pretty="%h %ci %d %s"
  # git log --pretty="%h %ci %d %s" --first-parent
# ]]]

[pretty]
  # STAT STYLE
  #   %h%d %s (%ar) - [%an]%n
  stat = %C(bold 48)%h%C(reset)%C(auto)%d%C(reset) %C(2)%s%C(reset) %C(bold 80)(%ar)%C(reset) - %C(bold 51)[%C(reset)%C(79)%an%C(bold 51)]%C(reset)

  # REFERENCE STYLE (short everything one line)
  # Reference style + gpg key status
  #   %h%d %<|(65,trunc)%s (%cr) %<|(82)[%G?] <%an>
  ref = %C(bold 52)%h%C(reset)%C(bold 48)%d%C(reset) %<|(65,trunc)%C(43)%s%C(reset) %C(bold 80)(%cr)%C(reset) %<|(82)%C(bold 50)[%C(bold 2)%G?%C(reset)%C(bold 50)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)
  # Reference style
  #   %h %<|(25)%an %<|(78)%s%d (%cr)
  ref-simple = %C(bold 52)%h%C(reset) %<|(25)%C(21)%an%C(reset) %<|(78)%C(43)%s%C(reset)%C(auto)%d%C(reset) %C(bold 80)(%cr)%C(reset)
  # Reference style + right aligned and wide
  #   %h %>>(20)%an %>>(68)%s%d %<(12)(%cr)
  ref-wide = %C(bold 52)%h%C(reset) %>>(20)%C(21)%an%C(reset) %>>(68)%C(43)%s%C(reset)%C(bold 48)%d%C(reset) %<(12)%C(bold 80)(%cr)%C(reset)
  # Reference style + decoration
  #   %h %s - (%ar) <%an>%d
  ref-decorate = %C(bold 48)%h%C(reset) %C(43)%s%C(reset) %C(bold 13)-%C(reset) %C(17)(%ar)%C(reset) %C(bold 52)<%an>%C(reset)%C(auto)%d%C(reset)%n
  # Reference style + gpg key status:signers name
  #   %h %d %s (%cr) %<|(76)[%G?:%GS] <%an>
  ref-gpg = %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 48)[%C(bold 2)%G?%C(reset):%C(bold 19)%GS%C(bold 48)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)

  # DECORATION STYLE
  # Decoration + gpg key status:signer's name + full commit message
  #   %h %d %s (%cr) %<|(76)[%G?:%GS] <%an>
  #   %b
  decorate-gpg = %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 48)[%C(bold 2)%G?%C(reset):%C(bold 19)%GS%C(bold 48)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)%n%C(3)%b%C(reset)
  # Decoration + gpg key status:key ID + full commit message
  #   commit %h %d %s (%cr) [%G?:%GK] <%an>
  #   %b
  decorate-full = %C(bold 48)commit%C(reset) %C(bold 52)%h%C(reset) %C(auto)%d%C(reset) %C(43)%s%C(reset) %C(17)(%cr)%C(reset) %C(bold 18)[%C(bold 2)%G?%C(reset):%C(bold 19)%GK%C(bold 13)]%C(reset) %C(bold 13)<%C(reset)%C(21)%an%C(bold 13)>%C(reset)%n%C(3)%b%C(reset)

# $ git diff               # changes in working tree since last commit (unstaged)
# $ git diff HEAD          # changes in working tree since last commit (staged + unstaged)
# $ git diff --cached      # changes in working tree since last commit (staged)

# $ git diff top master    # changes between tips of top and master branches
# $ git diff top..master   # equivalent to above
# $ git diff top...master  # changes that occured on master branch since topic branch started off of it

# $ git diff cab3 abf3     # view changes between two commits
# $ git diff cab3..abf3    # equivalent to above
# $ git diff HEAD^ HEAD    # version before last commit and last commit

# $ git diff A A^@         # results of a merge commit (first commit must be a merge)
# $ git diff A^!           # results of a merge commit (first commit must be a merge)
# $ git show A             # results of a merge commit (first commit must be a merge)

#  @                When alone, equiv to HEAD
#  HEAD^0           HEAD itself
#  HEAD^            Parent of HEAD
#  HEAD^1           Parent of HEAD
#  HEAD^^           Grandparent of HEAD
#  HEAD^1^1         Grandparent of HEAD
#  HEAD^2           Grandparent of HEAD
#  HEAD~3           Great-grandparent of HEAD
#  HEAD~3           Great-grandparent of HEAD
#  HEAD~4           Great-great-grandparent of HEAD
#  HEAD^@           All reachable from HEAD's parents, but not HEAD itself (all parents of HEAD)
#  HEAD^!           Includes HEAD, excludes all parents (alone it is equiv to HEAD)
#  HEAD@{yesterday} Value of ref at given time
#  master@{1}       First prior value of master
#  @{1}             First prior value of current branch
#  @{-1}            First commit/branch before current
#  <rev>^{commit}   Deref object at <rev> until commit is found or cannot deref
#  <rev>^0          Equivalent to <rev>^{commit}
#  <rev>^{tree}     Deref object at <rev> until tree is found or cannot deref
#  <rev>^{object}   Make sure <rev> names an object that exists, w/o requiring <rev> to be a tag, w/o deref
#  <rev>^{tag}      Make sure <rev> identifies a tag object
#  <rev>^{}         Object could be a tag, deref until non-tag is found
#  <rev>^{/<txt>}   Find youngest matching commit reachable from <rev> before ^
#  :/<txt>          Find youngest matching commit reachable from any ref, including HEAD
#  <rev>:<path>     Names blob or tree at given path
#  <rev>            Include commits reachable from <rev> (i.e. <rev> and its ancestors)
#  ^<rev>           Exclude commits reachable from <rev> (i.e. <rev> and its ancestors).
#  ^<rev1> <rev2>   Equivalent to <rev1>..<rev2>
#  <rev1>..<rev2>   Include commits reachable from <rev2>; exclude reachable from <rev1> (default HEAD)
#  <rev1>...<rev2>  Include commits reachable from <rev1> or <rev2>; exclude reachable from both (default HEAD) (symdiff)
#  <rev>^@          Include all parents of <rev>, not <rev> itself
#  <rev>^!          Include <rev>, exclude all of its parents. Alone it is equiv to <rev>
#  <rev>^-<n>       Include <rev>, exclude <n>th parent (equiv: <rev>^<n>..<rev>) (default <n> = 1) (e.g., HEAD^-, HEAD^-2)

# Args   Expanded arguments    Selected commits
# D                            G H D
# D F                          G H I J D F
# ^G D                         H D
# ^D B                         E I J F B
# ^D B C                       E I J F B C
# C                            I J F C
# B..C   = ^B C                C
# B...C  = B ^F C              G H D E B C
# B^-    = B^..B
#        = ^B^1 B              E I J F B
# C^@    = C^1
#        = F                   I J F
# B^@    = B^1 B^2 B^3
#        = D E F               D G H E F I J
# C^!    = C ^C^@
#        = C ^C^1
#        = C ^F                C
# B^!    = B ^B^@
#        = B ^B^1 ^B^2 ^B^3
#        = B ^D ^E ^F          B
# F^! D  = F ^I ^J D           G H D F

# SEE: man gitrevisions
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# HEAD       = currently checked out commit/branch
# FETCH_HEAD = recently fetched branch from remote
# ORIG_HEAD  = backup reference to HEAD

# fast forward merge = linearly moving the pointer of master forward

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# Overwrite pull
#    git fetch --all && git reset --hard origin/master

# Find the branches that contain commit hash
#    git branch -a --contains <commit ish>
#    git branch --contains <commit ish>
# Restore deleted file.
#    git checkout <deleting_commit>^ - <file_path>
# Extract a file from another branch.
#    git show <branch_name>:<file_name>
# Checks if the change is part of a release.
#    git name-rev --name-only <SHA-1>

# Look for differences.
#    git diff --word-diff
# List of all files up to a commit
#    git ls-tree --name-only -r <commit ish>
# Update the reference to the first commit
#    git update-ref -d HEAD
# List of all files in conflict
#    git diff --name-only --diff-filter = U
# List of all files changed in commit
#    git diff-tree --no-commit-id --name-only -r <commit ish>

# Selecting commits across branches using cherry-pick
#    git checkout <branch name> && git cherry pick <commit ish>
# Take a specific file that has been stashed
#    git checkout <stash@{n}> -- <file_path>
# Create a new repository working tree (git 2.5)
#    git worktree add -b <branch name> <path> <start point>
# Create a new working tree from a HEAD
#    git worktree add --detach <path> HEAD

# Add a project to a repository using subtree
#    git subtree add --prefix =<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.gitmaster
# Get the latest changes from your repository for a linked project using subtree
#    git subtree pull --prefix =<directory_name>/<project_name> --squash git@github.com:<username>/<project_name>.gitmaster
# Search by id in local branch
#    git fetch origin pull /<id>/ head:<branch name>
#    git pull origin pull /<id>/ head:<branch name>
# Ignore a file that has already been committed (eg Changelog).
#    git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog

# List all branches that have already merged with your master
#    git branch --merged master
# View all commits of the master forks
#    git log --no-merges --stat --reverse master ..
# List only the root and confirm the merge
#    git log --first-parent
# Find using binary search
#    git bisect start git bisect bad git bisect good v2.6.13-rc2 git bisect bad git bisect good git bisect reset

# Update 'feature' and make merged 'master'
#    git checkout feature && git rebase @{-1} && git checkout @{-2} && git merge @{-1}
# Merge between two commits
#    git rebase --interactive HEAD ~ 2

# vim: ft=gitconfig:et:sw=2:ts=2:sts=-1:fdm=marker:fmr=[[[,]]]:
