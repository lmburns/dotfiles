# == Plugins ================================================================ [[[
set -g @plugin 'tmux-plugins/tpm'
set -g @tpm-install 'I'
set -g @tpm-update 'U'
set -g @tpm-clean "C-u"

# -- fzf menu --
set -g @plugin 'sainnhe/tmux-fzf'
TMUX_FZF_LAUNCH_KEY="f"
TMUX_FZF_OPTIONS="-p -w 80% -h 48% -m"

# == Fzf URLS ===============================================================
set -g @plugin 'wfxr/tmux-fzf-url'
set -g @fzf-url-fzf-options '-w 100% -h 50% --multi -0 --no-preview --no-border'
set -g @fzf-url-bind 'u'

# == Prefix-Highlight =======================================================
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_empty_prompt ' '
set -g @prefix_highlight_empty_attr "fg=$base0E,bg=$base00"
set -g @prefix_highlight_prefix_prompt '[⌨]﬿'
set -g @prefix_highlight_fg $baseWaveRed
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '[C]﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$base0D,bg=$base00"
set -g @prefix_highlight_sync_prompt '[S]﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr "fg=$base0A,bg=$base00"

# == EasyJump ===============================================================
set -g @plugin "roy2220/easyjump.tmux"
set -g @easyjump-key-binding "j"
set -g @easyjump-label-chars "fjdkslaghrueiwoqptyvncmxzb1234567890"
set -g @easyjump-label-attrs "\e[1m\e[38;5;172m"
set -g @easyjump-text-attrs  "\e[0m\e[38;5;237m"
set -g @easyjump-smart-case  "on"

# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-copycat'

# == Thumbs =================================================================
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @thumbs-unique enabled
set -g @thumbs-command 'echo -n {} | xsel -b && tmux display-message \"Copied {}\"'
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 'Vlan\d+' # match Vlan interface on network devices
set -g @thumbs-regexp-4 "Vlan\\d+" # alternative method of defining regexp
set -g @thumbs-regexp-5 Vlan\\d+ # alternative method of defining regexp
set -g @thumbs-fg-color green
set -g @thumbs-hint-fg-color blue
set -g @thumbs-contrast 3
# ]]]

# == Palette ================================================================ [[[
base00=default
base01='#7E602C'
base02='#434C5E'
base03='#A06469'
base04='#ABB2BF'
base05='#D3869B'
base06='#FF5D62'
base07='#56B6C2'
base08='#88C0D0'
base09='#8BBA7F'
base0A='#83A598'
base0B='#F2594b'
base0C='#F28534'
base0D='#FF9500'
base0E='#8EC07C'
base0F='#EF1D55'
base10='#E8C097'
base11='#98676A'
baseOcean='#221A02'
baseSalmon='#EA6962'
baseWaveRed='#E46876'
baseAmethyst="#938AA9"
baseGreen="#819C3B"
baseOldRose='#BD798B'
baseViolet='#957FB8'
# ]]]

# == Colors ================================================================= [[[
# Prefix Config
set -g @prefix_highlight_empty_prompt ' '
set -g @prefix_highlight_empty_attr "fg=$base0E,bg=$base00"
set -g @prefix_highlight_prefix_prompt '[⌨]﬿'
set -g @prefix_highlight_fg $baseWaveRed
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '[C]﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$base0D,bg=$base00"
set -g @prefix_highlight_sync_prompt '[S]﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr "fg=$base0A,bg=$base00"

# set -ag terminal-overrides ",alacritty:Tc"

# set -ga terminal-overrides ",xterm-256color:RGB"
set -g  default-terminal   "tmux-256color"         # set TMUX as default terminal
set -ga terminal-overrides "xterm-256color:RGB"
set -ga terminal-overrides "alacritty:RGB"        # add truecolor support
set -sa terminal-overrides '*:Smulx=\E[4::%p1%dm' # support undercurl
set -sa terminal-overrides '*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m' # colors for undercurl

# set -s default-terminal 'tmux-256color'
# set -ga terminal-overrides 'alacritty:RGB'

set -g display-panes-active-colour $base08 # Pane number display
set -g display-panes-colour        $base01 # Color used by the display-panes command to show indicators for inactive panes

set -wg pane-border-status       top        # Turn pane border status lines off or set their position.
set -wg pane-border-lines        heavy      # Set the typerof characters used for drawing pane borders
set -wg pane-active-border-style fg=$base09 # Pane border colors
set -wg pane-border-style        fg=$base03 # Set the pane border style for panes aside from the active pane

set -wg pane-border-format '#[align=right] #{?#{&&:#{pane_active},#{client_prefix}},#[underscore],}\
#{pane_current_command}  #{pane_tty} #{?pane_active,❐ #S:#I/#{session_windows} ,}\
#{?window_zoomed_flag,⬢,❄} #P '

set -wg pane-active-border-style '#{?pane_in_mode,fg=yellow,\
#{?synchronize-panes,fg=brightcyan#,bold,#{?#{==:#{client_key_table},resize},fg=white,fg=blue#,bold}}}'

set -wg copy-mode-mark-style          "bg=$base00,underscore" # Style of the line containing the mark in copy mode
set -wg copy-mode-match-style         "bg=$baseAmethyst"       # Style of search matches in copy mode
set -wg copy-mode-current-match-style "bg=$base00,underscore" # Style of current search match in copy mode

set -g lock-after-time 1000       # Lock the session after number seconds of inactivity
set -g lock-command    'pipes-rs' # Command to run when locking each client
# ]]]

# == Status Bar ============================================================= [[[
# bind G set status                                            # Hide and show status
bind C-s if -F '#{==:#{status},on}' 'set status off' 'set status on'

tm_date="#[fg=magenta] %Y-%m-%d %I:%M %p "
tm_cpu=" #($HOME/mybin/other/tmux/cpu)"
tm_mem=" #($HOME/mybin/other/tmux/mem)"
# tm_prefix="#[bold,fg=$baseAmethyst]#{?client_prefix, ⌨ ,  }"
# tm_prefix="#[bold,#{?client_prefix,fg=$baseGreen] ⌨ ,fg=$baseAmethyst] ⌨ }"
tm_prefix="#{prefix_highlight}"
tm_zoom="#[default,bg=$base00,fg=$base0D] #{?window_zoomed_flag,,}"
tm_upTime="#[default,fg=$base07,bg=$base00] #($HOME/mybin/other/tmux/tmux_pretty_time)"
tm_pane="#[default,bg=$base00, fg=$base0F]  #P"

set -g status              'on'                            # Show or hide the status line or specify its size
set -g status-left-length  30                              # Set the maximum length of the left component of STL
set -g status-right-length 150                             # Set the maximum length of the right component of STL
set -g status-position     bottom                          # Put status bar on top or bottom
set -g status-interval     10                              # Interval in s to update status
set -g status-justify      centre                          # Set the position of the window list in the status line: left, centre or right
set -g status-style        "fg=$base02,bg=$base00,default" # Appearance of status messages


set  -g  status-bg     $base00
set  -g  status-right "$tm_prefix $tm_pane $tm_upTime $tm_mem $tm_cpu $tm_zoom $tm_date" # Display string to the right of the status line
set  -g  status-left                  "#[default,bg=$base00,fg=$base0F]  #S " # Display string to the left of STL
setw -g  window-status-format         "#[fg=$baseWaveRed] #I #W "              # Set format in which window is displayed in status line window list
setw -g  window-status-style          "fg=$base03,bg=$base00"                  # Set status line style for a single window.
setw -g  window-status-current-style  "fg=$base0D,bg=$base00"                  # Set status line style for the currently active window
setw -g  window-status-current-format " #[bold,fg=$base0F][#W #T]"             # Like WSF, but is format used when the window is the current window
setw -g  window-status-separator      ''                                       # Sets the separator drawn between windows in the status line
setw -g  window-status-activity-style "bg=black"                               # Set STL for windows with an activity alert
setw -g  window-status-bell-style     "bg=black"                               # Set STL for windows with a bell alert

set -g message-style         "bold,bg=$base00,fg=$base0F"      # Set status line message style. Used for msgs & command prompt
set -g message-command-style "bold,fg=$base11"                 # Appearance of status message cmds

set -g clock-mode-colour $base0B             # Set clock colour
set -g clock-mode-style 12                   # Set clock colour
set -g mode-style "fg=$baseOcean,bg=$base11" # Set window modes style.
bind C-t clock-mode                          # Show clock
# ]]]
# ]]]

# == General ================================================================ [[[
unbind t
unbind '"'
unbind %

# -- Display
set -g  base-index       1  # Start numbering from 1
set -wg pane-base-index  1  # Set starting index for other base numbers
set -wg automatic-rename on # Control automatic window renaming
set -g  renumber-windows on # Renumber windows on close
set -g  set-titles       on # Attempt to set the client terminal title using the tsl and fsl terminfo(5)

set -sg escape-time        10           # Vim esc time
set -s  focus-events       on           # Focus events are requested from terminal
set -s  exit-empty         off          # Server will exit when there are no active sessions.
set -g  status-interval    5            # Status refersh 5sec
set -g  display-panes-time 2000         # Time indicators shown by display-pane are shown
set -g  display-time       4000         # Tmux messages are displayed for 4 seconds
set -g  allow-rename       off          # Don't rename windows automatically
set -g  set-clipboard      on           # Attempt to set the terminal clipboard content using the xterm(1) escape sequence
set -s  copy-command       'xsel -i -b' # Command used to copy text

# -- Misc
set -g   word-separators   ' =+!@#$%^&*,.<>/?;:\\|~`(){}[]"' # What are considered word separators
set -g   mouse             on       # Tmux captures and follows mouse
set -g   history-limit     50000    # Increase scrollback buffer size
set -s   buffer-limit      200      # Set the number of buffers
set -g   default-command   ${SHELL} # Set default shell
set -g   editor            nvim     # Set the command used when tmux runs an editor
set -g   repeat-time       300      # Increase repeat time (repeat after prefix with -r flag)
set -g   wrap-search       off      # Searches will wrap around the end of the pane contents
set -g   visual-activity   off      # None means all activity is ignored
set -wg  monitor-bell      off      # Monitor for a bell in the window
set -wg  monitor-activity  off      # Monitor for activity in the window.  Windows with activity are highlighted in the status line
set -wg  activity-action   other    # Set action on window activity when monitor-activity is on
set -wg  aggressive-resize on       # Means that tmux will resize the window to the size of the smallest or largest session
set -qg  status-utf8       on       # Monitor for a bell in the window.
set -wqg utf8              on       # Deprecated

# set  -g  default-command   "/usr/bin/env zsh"
# set    default-path "$PWD"

set -ga update-environment '\
    DISPLAY \
    DBUS_SESSION_BUS_ADDRESS \
    SESSION_MANAGER \
    PATH \
    XDG_CONFIG_HOME \
    XDG_CACHE_HOME \
    XDG_DATA_HOME \
    XDG_RUNTIME_DIR \
    XDG_SESSION_CLASS \
    XDG_SESSION_DESKTOP \
    XDG_SESSION_TYPE \
    XDG_CURRENT_DESKTOP \
    FZF_DEFAULT_OPTS \
    SSH_AUTH_SOCK \
    SSH_CONNECTION'

# XXX: Doesn't work
# Run when a client is attached.
# set-hook -g client-attached    'run -b "cut -c3- ~/.config/tmux/tmux.conf | sed /word-separators/d | bash -s update_env_event"'

# Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
set-hook -g after-new-session  { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-new-window   { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-kill-pane    { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g pane-exited        { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-split-window { run -b "if [ #{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi" }

set-hook -g after-resize-pane {
    if -F '#{||:#{==:#{window_panes},1},#{window_zoomed_flag}}' \
        'set -g pane-border-status off' \
        'set -g pane-border-status top'
}

# set-hook -g after-split-window { select-pane -T "" }
# set-hook -g after-new-window   { select-pane -T "" }
# set-hook -g after-new-session  { select-pane -T "" }

# Allow for respawning windows after the command has exited
set-hook -g session-created 'set remain-on-exit on'
unbind R
bind R respawn-pane -k

# set-hook -ga client-focus-in  { set -w status on }
# set-hook -ga client-focus-out { set -w status off }

# ]]]

# == Keybinds =============================================================== [[[
# TIP:
# Prefix + '               => Select index
# Prefix + i               => Show information
# Prefix + C               => Customize options
# :tmux display-message -a => Show values of all variables

unbind C-b
# bind C-a send-prefix
set -g prefix C-a
bind C-a send C-a

# Set an additional prefix
set -g prefix2 C-F11
bind C-F11 send C-F11

# Clear screen and scrollback history

# Some of these don't work
# Run when a client is attached
# bind -n C-l send-keys C-l \; run 'tmux clear-history'
bind C-l send C-l
# bind C-f send C-f
# bind C-x send C-x
# bind C-q send C-q

# Select panes
# bind C-k selectp -U
# bind C-h selectp -L
# bind C-j selectp -D
# bind C-l selectp -R

bind ,      lastp # Last pane
bind l      last  # Last window
bind -n M-y last  # Last window

bind -n M-S-Left  selectp -L
bind -n M-S-Down  selectp -D
bind -n M-S-Up    selectp -U
bind -n M-S-Right selectp -R

bind c   neww -c "#{pane_current_path}" # Create a new window
bind C-c new                            # Create a new session

bind -n M-Space choose-tree -Z
bind -n M-e choose-session

# Swap windows
# bind -n M-< previous-window
# bind -n M-> next-window
# bind -n S-Left previous-window
# bind -n S-Right next-window

# bind -r M-<     if -F '#{>:#{session_windows},1}' 'previous-window' 'neww -c "#{pane_current_path}"'
# bind -r M->     if -F '#{>:#{session_windows},1}' 'next-window'     'neww -c "#{pane_current_path}"'
bind -n S-Left  if -F '#{>:#{session_windows},1}' 'previous-window' 'neww -c "#{pane_current_path}"'
bind -n S-Right if -F '#{>:#{session_windows},1}' 'next-window'     'neww -c "#{pane_current_path}"'
bind -n S-Up    choose-tree -Zw "swapw -t '%%'"

# bind -r < swapw -t -1
# bind -r > swapw -t +1

# Swap windows
bind "{" swapw  -t -1
bind "}" swapw  -t +1
# Swap pane
bind  [  swapp -U
bind  ]  swapp -D
# Switch sessions
bind -r ( switchc -p
bind -r ) switchc -n

# Rename session
bind C-r command-prompt -I "#S" "rename-session '%%'"
bind A command-prompt "renamew %%"

# Cycle windows/panes (no prefix)
# bind -n M-S-a selectp -t :.+ \; resizep -Z # next pane zoom
# bind -n M-S-s selectp -t :.+               # next pane
# bind -n M-S-q selectw -t :-                # previous window
# bind -n M-S-w selectw -t :+                # next window

# Switch between synchronize all pane
# bind E setw synchronize-panes
bind C-g if -F '#{pane_synchronized}' \
  'set -w synchronize-panes off; display "Sync off"' \
  'set -w synchronize-panes on; display  "Sync on"'

bind m set-option -g -q mouse on  \; display 'Mouse: ON'  # Turn mouse on
bind M set-option -g -q mouse off \; display 'Mouse: OFF' # Turn mouse off

# Resize
bind -r H resizep -L 2
bind -r J resizep -D 2
bind -r K resizep -U 2
bind -r L resizep -R 2

bind /    resizep -Z # Maximize pane
bind M-.  switchc -T resize

bind -r M-r rotate-window
bind . next-layout

# edit config
bind e neww -n 'conf' \
  'nvim $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux display "===== Configuration reloaded ====="'

# bind s display-popup -E bmux -a # Bmux
# bind "C-'" display-popup -h 40 -w 95 -E "tmux new-session -A -s popup"  # Start a floating session
# bind C-b splitw -h 40 -w 95 -p 40 -b -c ' # {pane_current_path}' lf # Open lf file manager
# ]]]

# == Vim Keybinds =========================================================== [[[
# Vim keys in command prompt
set  -g status-keys vi
setw -g mode-keys   vi

# unbind -n C-Enter

# bind Escape copy-mode     # default: [
bind Enter copy-mode
# bind -n C-Enter copy-mode
bind -n C-F12 copy-mode
bind C-F12 send C-F12

bind C-b    lsb    # List buffers
bind p      pasteb # default: ] ; interactively clipboard history: prefix =
bind +      deleteb \; display "Deleted current buffer"

# bind-key . run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "copy to tmux clipboard"
# bind-key > run-shell 'tmux show-buffer | xsel -i -b' \; display-message "copy to system clipboard"

# Vim copy mode rebinds for
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
# Fix mouse
unbind -T root         MouseDrag1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
bind   -T copy-mode-vi MouseDown1Pane selectp\; send -X clear-selection

bind -T copy-mode-vi i                 send -X select-word
bind -T copy-mode-vi V                 send -X select-line
bind -T copy-mode-vi v                 send -X begin-selection
bind -T copy-mode-vi C-v               send -X rectangle-toggle
# bind -T copy-mode-vi y               send -X copy-pipe "xsel -pi"
bind -T copy-mode-vi y                 send -X copy-selection-and-cancel
bind -T copy-mode-vi Enter             send -X copy-pipe "xsel -b"
bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xsel -b"
bind -T copy-mode-vi Escape            send -X cancel
bind -T copy-mode-vi L                 send -X end-of-line
bind -T copy-mode-vi H                 send -X start-of-line
bind -T copy-mode-vi m                 send -X set-mark
bind -T copy-mode-vi M                 send -X jump-to-mark
bind -T copy-mode-vi z                 send -X middle-line

# These don't work
bind -T choice-mode-vi h   send -X tree-collapse
bind -T choice-mode-vi l   send -X tree-expand
bind -T choice-mode-vi H   send -X tree-collapse-all
bind -T choice-mode-vi L   send -X tree-expand-all
bind -T copy-mode-vi   u   send -X halfpage-up
bind -T copy-mode-vi   d   send -X halfpage-down

bind -T copy-mode-vi * \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-forward-text '#{buffer_sample}'
  } {
     send -FX search-forward '#{copy_cursor_word}'
  }

bind -T copy-mode-vi "#" \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-backward-text '#{buffer_sample}'
     send -X search-again
  } {
     send -FX search-backward '#{copy_cursor_word}'
  }

bind -T copy-mode-vi 'o' \
    send -X copy-selection \;\
    neww -n google \;\
    send -t google 'sr google "$(tmux show-buffer)" && tmux killw' 'Enter'

bind -T copy-mode-vi 'U' \
    send -X copy-selection \;\
    neww -n youtube \;\
    send -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux killw' 'Enter'

bind -T copy-mode-vi 'O' \
    send -X copy-selection \;\
    neww -n w3m \; \
    send -t w3m 'w3m "$(tmux show-buffer)" && tmux killw' 'Enter'

bind -T choice-mode    C-d send -X halfpage-down
bind -T choice-mode    C-u send -X halfpage-up

# == Pane Switch ============================================================ [[[
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -n C-h if "$is_vim" 'send C-h'  'selectp -L'
bind -n C-j if "$is_vim" 'send C-j'  'selectp -D'
bind -n C-k if "$is_vim" 'send C-k'  'selectp -U'
bind -n C-l if "$is_vim" 'send C-l'  'selectp -R'

bind -T copy-mode-vi 'C-h' selectp -L
bind -T copy-mode-vi 'C-j' selectp -D
bind -T copy-mode-vi 'C-k' selectp -U
bind -T copy-mode-vi 'C-l' selectp -R
bind -T copy-mode-vi 'C-\' selectp -l
# ]]]
# ]]]

# == Interactive Keybinds =================================================== [[[
# Join pane to window/session (interactively)
bind C-w choose-tree -Zw "movew -t '%%'"
bind C-i choose-tree -Zw "movep -t '%%'"
bind W   choose-tree -Zw "swapw -t '%%'"
bind P   choose-tree -Zw "swapp -t '%%'"
bind '@' choose-tree -Zw 'joinp -h +s "%%"'     # join pane
bind '#' choose-tree -Zw 'joinp -t "%%"'        # send pane
# bind @ join-pane -h -s ! # most recently visited

# Split panes using | and - (with same profile path)
# bind |   splitw -fh -c "#{pane_current_path}"
# bind -   splitw -fv -c "#{pane_current_path}"

# Throw a pane into current pane from another window
bind h      choose-tree { join-pane -fv -s "%%" }
bind v      choose-tree { join-pane -fh -s "%%" }
bind -n M-_ choose-tree { join-pane -fv -s "%%" }
bind -n M-| choose-tree { join-pane -fh -s "%%" }

# Swap current pane with the selected pane
bind q displayp "swap-pane -t "%%""
bind Q displayp

# swap panes around
# bind -r -T prefix C-M-k selectp -U \; swap-pane -t !
# bind -r -T prefix C-M-j selectp -D \; swap-pane -t !
# bind -r -T prefix C-M-h selectp -L \; swap-pane -t !
# bind -r -T prefix C-M-l selectp -R \; swap-pane -t !

# bind C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swapw -t '%%'"
# bind C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"
# ]]]

# === Mouse === [[[
bind -T root WheelUpPane \
  if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'

bind -T root WheelDownPane \
  if -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# bind -T root WheelUpPane   if -F -t = "#{alternate_on}" "send -M" "selectp -t =; copy-mode -e; send -M"
# bind -T root WheelDownPane if -F -t = "#{alternate_on}" "send -M" "selectp -t =; send -M"
# ]]]

#Send command to all window
# bind C-e command-prompt \
#   -p "session?,message?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\| xargs -I\{\} tmux send -t %1:\{\} %2 Enter\""

# bind 0 send C-l \; run 'tmux clear-history' \; display-message "Deleted current Tmux Clipboard History"
bind -T resize M-1 selectl even-horizontal \; switchc -T resize
bind -T resize M-2 selectl even-vertical   \; switchc -T resize
bind -T resize M-3 selectl main-horizontal \; switchc -T resize
bind -T resize M-4 selectl main-vertical   \; switchc -T resize
bind -T resize M-5 selectl tiled           \; switchc -T resize

bind -T resize 1 selectp -t :.1 \; switchc -T resize
bind -T resize 2 selectp -t :.2 \; switchc -T resize
bind -T resize 3 selectp -t :.3 \; switchc -T resize
bind -T resize 4 selectp -t :.4 \; switchc -T resize
bind -T resize 5 selectp -t :.5 \; switchc -T resize
bind -T resize 6 selectp -t :.6 \; switchc -T resize
bind -T resize 7 selectp -t :.7 \; switchc -T resize
bind -T resize 8 selectp -t :.8 \; switchc -T resize
bind -T resize 9 selectp -t :.9 \; switchc -T resize
bind -T resize 0 selectp -t :.10 \; switchc -T resize

bind-key C-q display-menu -x W -y S \
    "Horizontal Split"                   | "split-window -h" \
    "Vertical Split"                     - "split-window -v"  \
    "Swap Up"                            u "swap-pane -U" \
    "Swap Down"                          d "swap-pane -D" \
    "Kill Pane"                          x kill-pane \
    "New Window"                         N new-window \
    "Rename Window"                      R "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

bind -n C-S-F11 resizep -Z
bind    C-S-F11 send C-S-F11
bind -n C-S-F12 switchc -T resize

BIN_DIR="$ZDOTDIR/zinit/polaris/bin"

if "[[ -x $BIN_DIR/fzf-panes.tmux ]]" {
    set -g '@fzf_panes_ex_session_pat' '^(floating)$'
    set-hook -g pane-focus-in[10] "if -F \
        '#{&&:#{!=:#{client_key_table},resize},#{!=:#{session_name},floating}}' \
        'run -b \"$BIN_DIR/fzf-panes.tmux update_mru_pane_ids\"'"
    bind    w run -b "$BIN_DIR/fzf-panes.tmux new_window"
    bind    \; run -b "$BIN_DIR/fzf-panes.tmux select_last_pane"
    bind -n M-= run -b "$BIN_DIR/fzf-panes.tmux new_window"
} {
    set-hook -ug pane-focus-in[10]
    bind w choose-tree -Z
    bind S choose-tree 'move-pane -v -s "%%"'
    bind V choose-tree 'move-pane -h -s "%%"'
}

# Floating shell
bind "C-'" if -F '#{==:#S,floating}' {
    detach
} {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

bind -n M-S-F2 if -F '#{==:#S,floating}' {
    detach
} {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

# Split pane horizontally
bind - if -F '#{!=:#S,floating}' {
    splitw -v -c '#{pane_current_path}'
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux joinp -v -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

# Split pane vertically
bind | if -F '#{!=:#S,floating}' {
  splitw -h -c '#{pane_current_path}'
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux joinp -h -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

# Break pane, send to end and follow
bind B if -F '#{!=:#S,floating}' {
    breakp
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux breakp -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

# Break pane, send to end and not follow
bind '%' if -F '#{!=:#S,floating}' {
    breakp -d
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux breakp -d -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

# bind Q confirm-before 'kill-session'
# unlink-window -k = unlink if multiple session else kill
# bind X kill-session -a # Kill all other sessions

bind x killp # Kill without confirm
bind & confirm-before 'killw' # Kill with confirm
bind X confirm-before -p "kill-session #S? [Y/n]" kill-session # Kill this session
bind C-x break-pane -bd                                        # Break pane, send to left, not follow
bind ! break-pane \; display "Broken pane"

# == External Programs ======================================================= [[[
# bind M-v neww -n ytfzf \; send -t ytfzf 'ytfzf && tmux killw' 'Enter'     # YT FZF
# bind 'C-]' neww -n bookmarks -c $HOME \; send 'fsr && tmux killw' 'Enter' # Newsboat bookmarks
# bind Enter splitw -fv \; send 'BROWSER=w3m sr '                           # General surfraw

# === Youtube-viewer ===
bind Y splitw -fv \;\
     send 'youtube-viewer '

# === Surfraw Google ===
bind G neww -n google \;\
    send -t google 'BROWSER=w3m sr google '

# == Neomutt ==
bind -n M-m neww -n email -c $HOME \;\
    send 'neomutt && tmux killw' 'Enter'

# === RSS ===
bind C-n neww -n rss -c $HOME \;\
    send 'newsboat && tmux killw' 'Enter'

bind C-h neww -n htop -c $HOME \;\
    send 'htop && tmux killw' 'Enter'

# task spooler -- M-t
bind M-t neww -n spool -c $HOME \;\
    send -t spool 'tsp -C && watch ts' 'Enter' \;\
    splitw -t spool -v \; \
    send -t spool 'TS_SOCKET=/tmp/fm tsp -C && watch TS_SOCKET=/tmp/fm tsp' 'Enter' \;\
    splitw -t spool -v -p 10

# == Fzf Integration ======================================================== [[[

# == Buku Bookmarks (GUI) ==
bind b splitw -fv \;\
    send 'bo && tmux kill-pane' 'Enter'

# == Buku Bookmarks (w3m) ===
bind 'C-\' neww -n bookmarks -c $HOME \;\
    send 'bow && tmux killw' 'Enter'

# == Taskwarrior ==
# bind T splitw -fv \;\
#     send 'taskf && tmux kill-pane' 'Enter'

# === Taskwarrior TUI ===
bind -n M-9 neww -n taskwarrior -c $HOME \;\
    send 'taskwarrior-tui && tmux killw' 'Enter'

# == Tmux completion ==
bind -n M-0 run "tmux-fzf-panes || :"                                   # Select pane
bind-key t  run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words)"'       # Paste words from buffer
bind-key T  run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words --all)"' # Paste words from all buffers

# Capture pane and open in Vim
bind M-c run \
  'FILE=/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; \
  tmux capture-pane -J -S -102400 -p > $FILE; \
  tmux neww "nvim $FILE"'

# bind j capture-pane \;\
#     save-buffer /tmp/tmux-buffer \;\
#     new-window -n "vim-copymode" '$SHELL -c "nvim /tmp/tmux-buffer"'

# Screen capture window
bind M-o run "prtwindow"
# ]]]
# ]]]

## ???
# bind '"' set -gF @statx "#{?#{==:#{@statx},off},on,off}"

# == Fixes ================================================================== [[[
# 3.4 version later
if -F '#{m/r:3\.[4-9]$,#{version}}' {
    set -wg popup-border-lines rounded
    set -wg popup-border-style fg=blue
}
# ]]] === Fixes ===

# == Source ================================================================= [[[
# Reload config file directly using prefix r
# Would be nice to multiply '=' by #{client_width}
bind r source-file ~/.config/tmux/tmux.conf \;\
  display-message "=================== Configuration reloaded ==================="

run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
# ]]]

# vim: ft=tmux:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:

# EOF
# update_env_event() {
#     local event='client-attached'
#     local event_dir=${TMUX%%,*}-event
#     mkdir -p $event_dir 2>/dev/null
#     rm $event_dir/$event-pane* 2>/dev/null
#     tmux list-panes -a -F '#D' | sed -E "s|^(.*)$|$event_dir/$event-pane-\1|g" | xargs touch
# }
#
# "$@"
