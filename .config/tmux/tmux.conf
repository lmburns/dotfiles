# == Plugins ================================================================ [[[

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'wfxr/tmux-fzf-url'

TMUX_FZF_LAUNCH_KEY="f"
TMUX_FZF_OPTIONS="-p -w 80% -h 48% -m"
set -g @tpm-install 'I'
set -g @tpm-update 'U'
set -g @tpm-clean "C-u"
set -g @fzf-url-fzf-options '-w 100% -h 50% --multi -0 --no-preview --no-border'

# == Thumbs ================================================================= [[[
set -g @thumbs-unique enabled
set -g @thumbs-command 'echo -n {} | xsel -b && tmux display-message \"Copied {}\"'
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 'Vlan\d+' # match Vlan interface on network devices
set -g @thumbs-regexp-4 "Vlan\\d+" # alternative method of defining regexp
set -g @thumbs-regexp-5 Vlan\\d+ # alternative method of defining regexp
set -g @thumbs-fg-color green
set -g @thumbs-hint-fg-color blue
set -g @thumbs-contrast 3
# ]]]
# ]]]

# == Palette ================================================================ [[[
# base03='#abb2bf' # - window title
# base0F='#d3869b' # - active border, session
base00=default   # - Default background color
base01='#7E602C' # - pane number
base02='#434c5e' # - pane border
base03='#A06469' # - window title
base04='#d8dee9'
base05='#e5e9f0'
base06='#eceff4'
base07='#56b6c2' # - status date
base08='#88c0d0' # - clock, active pane number
base09='#8bba7f' # - status battery
base0A='#83a598'
base0B='#f2594b' # - status prefix highlight
base0C='#f28534' # - mux message
base0D='#FF9500' # - active window, status zoom
base0E='#8ec07c' # - status prefix off
base0F='#EF1D55' # - active border, session
base10='#e8c097'
base11='#98676A'
baseTXT_BG='#291804'
# ]]]

# == Colors ================================================================= [[[
set -g  default-terminal   "tmux-256color"                                                                # set TMUX as default terminal
set -sa terminal-overrides 'alacritty:RGB'
set -sa terminal-overrides ',*:Smulx=\E[4::%p1%dm'                                                        # support undercurl
set -sa terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m' # colors for undercurl

# XXX: Both of these?
set -g  display-panes-active-colour $base08       # Pane number display
set -g  display-panes-colour $base01              # Color used by the display-panes command to show indicators for inactive panes
set-option -g display-panes-active-colour $base08 # Pane number display
set-option -g display-panes-colour $base01        # Color used by the display-panes command to show indicators for inactive panes

set-option -g display-panes-time 2000 # Set display timelimit
set-option -g display-time       1000 # Amount of time for which status line messages are displayed

set -g pane-active-border-style fg=$base09 # Pane border colors
set -g pane-border-style        fg=$base02 # Pane border style for panes aside from the active pane
set -wg pane-border-status      top        # Turn pane border status lines off or set their position.
set -wg pane-border-format '#[align=right] #{?#{&&:#{pane_active},#{client_prefix}},#[underscore],}\
#{pane_current_command}  #{pane_tty} #{?pane_active,❐ #S:#I/#{session_windows} ,}\
#{?window_zoomed_flag,⬢,❄} #P '

set -wg pane-active-border-style '#{?pane_in_mode,fg=yellow,\
#{?synchronize-panes,fg=brightcyan#,bold,#{?#{==:#{client_key_table},resize},fg=white,fg=blue#,bold}}}'

set -wg pane-border-style       fg=magenta                   # Set the pane border style for panes aside from the active pane
set -wg pane-border-lines       heavy                        # Set the typerof characters used for drawing pane borders
set -wg copy-mode-mark-style    fg=black,bg=white,underscore # Style of the line containing the mark in copy mode
set -wg copy-mode-match-style   fg=black,bg=brightyellow     # Style of search matches in copy mode
set -wg copy-mode-current-match-style fg=black,bg=yellow,underscore # Style of current search match in copy mode

set -g lock-after-time 1000    # Lock the session after number seconds of inactivity
set -g lock-command 'pipes-rs' # Command to run when locking each client
# ]]]

# == Status Bar ============================================================= [[[
bind G set status                                            # Hide and show status
set -g status               'on'                             # Show or hide the status line or specify its size
set -g status-left-length    30                              # Set the maximum length of the left component of the status line
set -g status-right-length   150                             # Set the maximum length of the right component of STL
set -g status-position       bottom                          # Put status bar on top or bottom
set -g status-interval       2                               # Interval in s to update status
set -g status-justify        left                            # Horizontal alignment
set -g status-style          "fg=$base02,bg=$base00,default" # Appearance of status messages
set -g message-style         "bg=$base00,fg=$base0C"         # Set status line message style. Used for msgs & command prompt
set -g message-command-style fg=$base11                      # Appearance of status message cmds

# Run when a client is attached.
set-hook -g client-attached 'run -b "cut -c3- ~/.config/tmux/tmux.conf | sed /word-separators/d | bash -s update_env_event"'

# Prefix Config
set -g @prefix_highlight_empty_prompt ' ﬿ '
set -g @prefix_highlight_empty_attr "fg=$base0E,bg=$base00"
set -g @prefix_highlight_prefix_prompt '﬿'
set -g @prefix_highlight_fg $base0B
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr fg=$base0D,bg=$base00
set -g @prefix_highlight_sync_prompt '﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr fg=$base0A,bg=$base00

setw -g window-status-style "fg=$base03,bg=$base00"               # Set status line style for a single window.
setw -g window-status-format " #I #W"                             # Set format in which window is displayed in status line window list
setw -g window-status-current-style "fg=$base0D,bg=$base00"       # Set status line style for the currently active window
setw -g window-status-current-format " #[bold,fg=$base0F][#W #T]" # Like WSF, but is format used when the window is the current window
setw -g window-status-separator " "                               # Set format in which the window is displayed in the STL window list

set -g clock-mode-colour $base0B            # Set clock colour
set -g clock-mode-style 12                  # Set clock colour
set -g mode-style fg=$baseTXT_BG,bg=$base11 # Set window modes style.

bind-key C-t clock-mode # Show clock

# Left Status
tm_session_name="#[default,bg=$base00,fg=$base0F]  #S "
set -g status-left "$tm_session_name" # Display string to the left of the status line

# Right status
tm_cpu=" #($HOME/mybin/other/tmux/cpu)"
tm_mem=" #($HOME/mybin/other/tmux/mem)"
tm_prefix="#{prefix_highlight}"
tm_zoom="#[default,bg=$base00,fg=$base0D] #{?window_zoomed_flag,,}"
tm_upTime="#[default,fg=$base07,bg=$base00] #($HOME/mybin/other/tmux/tmux_pretty_time)"
tm_pane="#[default,bg=$base00, fg=$base0F]  #P"
set -g status-right "$tm_pane $tm_upTime $tm_mem $tm_cpu $tm_zoom $tm_prefix" # Display string to the right of the status line
# ]]]
# ]]]

# == General ================================================================ [[[

# -- Display
set -g  base-index       1  # Start numbering from 1
set -wg pane-base-index  1  # Set starting index for other base numbers
set -wg automatic-rename on # Control automatic window renaming
set -g  renumber-windows on # Renumber windows on close
set -g  set-titles       on # Attempt to set the client terminal title using the tsl and fsl terminfo(5)

set -sg escape-time      10           # vim esc time
set -g  status-interval  5            # status refersh 5sec
set -g  set-clipboard    on           # attempt to set the terminal clipboard content using the xterm(1) escape sequence
set -g  display-time     4000         # tmux messages are displayed for 4 seconds
set -g  allow-rename     off          # don't rename windows automatically
set -s  copy-command     'xsel -i -b' #
set -s  buffer-limit     200          # Set the number of buffers

# -- Misc
set  -g  word-separators         ' =+!@#$%^&*,.<>/?;:\\|~`(){}[]"'
set  -g  mouse                   on
set  -g  history-limit           50000    # Increase scrollback buffer size
set  -g  editor                  nvim     # Set the command used when tmux runs an editor
set  -g  repeat-time             300      # Increase repeat time (repeat after prefix with -r flag)
set  -g  wrap-search             off      # Searches will wrap around the end of the pane contents
set  -g  visual-activity         off      # None means all activity is ignored
set  -wg monitor-bell            off      # Monitor for a bell in the window
set  -wg monitor-activity        off      # Monitor for activity in the window.  Windows with activity are highlighted in the status line
set  -qg status-utf8             on       # Monitor for a bell in the window.
setw -qg utf8                    on       #
setw -g  aggressive-resize       on       # means that tmux will resize the window to the size of the smallest or largest session
# -- Windows
set  -g   status-justify         'center' # Set the position of the window list in the status line: left, centre or right
set  -g   status-left-length     '80'     # Set the maximum length of the left component of the status line.  The default is 10.
set  -g   status-right-length    '80'     # Set the maximum length of the right component of the status line.  The default is 10.
set  -wg window-status-separator ''       # Sets the separator drawn between windows in the status line


# --- Statusbar ---
set -g  status-bg                    black
set -g  status-left                  ' #[fg=magenta]❐ #S'                                                        # Display string to the left of STL
set -g  status-right                 '#[fg=brightyellow] #{?client_prefix,⌨ ,  }  #[fg=magenta] %Y-%m-%d %H:%M ' # Display string to the left of STL
set -wg window-status-format         '#[fg=magenta] #I #W '                                                      # Set the format in which the window is displayed
set -wg window-status-current-format '#[fg=brightblue,bold] #I #W:#F'                                            # Set status line style for windows with an activity alert
set -wg window-status-activity-style bg=black                                                                    # Set status line style for windows with an activity alert
set -wg window-status-bell-style     bg=black                                                                    # Set status line style for windows with a bell alert.  For how to specify style, see the STYLES section.


# default shell
set-option -g default-command ${SHELL}
set -ga update-environment '\
      DISPLAY DBUS_SESSION_BUS_ADDRESS \
      SESSION_MANAGER \
      PATH \
      XDG_CONFIG_HOME \
      XDG_CACHE_HOME \
      XDG_DATA_HOME \
      XDG_RUNTIME_DIR \
      XDG_SESSION_CLASS \
      XDG_SESSION_DESKTOP \
      XDG_SESSION_TYPE \
      XDG_CURRENT_DESKTOP \
      FZF_DEFAULT_OPTS \
      SSH_AUTH_SOCK \
      SSH_CONNECTION \
      DISPLAY'

# DBUS_SESSION_BUS_ADDRESS"
# ]]]

# == Keybinds =============================================================== [[[
# Useful:
# C-a ' => select index
# C-a C => Customize options
# enable shell hotkeys C-left/C-right
# set-window-option -g xterm-keys on

# Remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Set an additional prefix
set -g prefix2 C-F11
bind C-F11 send C-F11

# Clear screen and scrollback history
# Don't really work anymore
#
# Run when a client is attache
bind C-l send-keys 'C-l'
bind C-f send-keys 'C-f'
bind C-x send-keys 'C-x'
bind C-q send-keys 'C-q'

# ??
# maximize current pane
bind + run 'cut -c3- ~/.config/tmux/tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# resize
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# select panes
bind-key C-k select-pane -U
bind-key C-h select-pane -L
bind-key C-j select-pane -D
bind-key C-l select-pane -R

bind-key \; last-pane
bind-key l last-window

bind -n M-S-Left select-pane -L
bind -n M-S-Down select-pane -D
bind -n M-S-Up select-pane -U
bind -n M-S-Right select-pane -R

# split panes using | and - (with same profile path)
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window      -c '#{pane_current_path}'
# maximize pane
bind / resize-pane -Z
unbind-key '"'
unbind-key %

bind -n M-Space choose-tree -Z
bind -n M-e choose-session

# swap windows
bind-key -n M-< previous-window
bind-key -n M-> next-window
bind-key -n S-Left previous-window
bind-key -n S-Right next-window
# bind -r M-< if -F '#{>:#{session_windows},1}' 'previous-window' 'neww  -c "#{pane_current_path}"'
# bind -r M-> if -F '#{>:#{session_windows},1}' 'next-window' 'neww -c "#{pane_current_path}"'

bind-key -n S-Up choose-tree -Zw "swap-window -t '%%'"
# bind -r < swap-window -t -1
# bind -r > swap-window -t +1
bind "{" swap-window  -t -1
bind "}" swap-window  -t +1
bind  [  swap-pane    -U
bind  ]  swap-pane    -D

# rename session
bind . command-prompt -I "#S" "rename-session '%%'"
bind A command-prompt "rename-window %%"

# ??
# cycle windows/panes (no prefix)
bind-key -n M-S-a select-pane -t :.+ \; resize-pane -Z  # next pane zoom
bind-key -n M-S-s select-pane -t :.+  # next pane
bind-key -n M-S-q select-window -t :- # previous window
bind-key -n M-S-w select-window -t :+ # next window

# switch between synchronize all pane
bind E setw synchronize-panes

# throw a pane into current pane from another window
bind v choose-tree "join-pane -v -s "%%""
bind h choose-tree "join-pane -h -s "%%""
bind-key -n M-_ choose-tree 'join-pane -v -s "%%"'
bind-key -n M-| choose-tree 'join-pane -h -s "%%"'

# switch between sessions
bind -r ( switch-client -p
bind -r ) switch-client -n
bind C-c new # Create a new session

# kill without confirm
bind-key x kill-pane
#bind x confirm-before 'kill-pane'
# bind-key & kill-window
bind & confirm-before 'kill-window'
# bind Q confirm-before 'kill-session'

# unlink-window -k = unlink if multiple session else kill
# kill all sessions
bind-key X kill-session -a
# send pane to background and not kill it
bind-key C-x break-pane -dP
bind-key ! break-pane \; display "break-pane"
# join-pane -vs session:window.pane

bind-key m set-option -g -q mouse on \; display-message 'Mouse: ON'
bind-key M set-option -g -q mouse off \; display-message 'Mouse: OFF'

# swap current pane with the selected pane
bind q display-panes "swap-pane -t "%%""
bind Q display-panes

# layout
# bind-key -n M-< rotate-window
bind-key M-r rotate-window
bind-key M-. next-layout


# reload config file directly using prefix r
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Configuration reloaded"

# edit config
bind-key e new-window -n 'conf' \
  'nvim $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux display "tmux config source"'

# Bmux
bind s display-popup -E bmux -a

# Start a floating session
bind C-g display-popup -h 40 -w 95 -E "tmux new-session -A -s popup"

# Open lf file manager
# bind-key C-b split-window -h 40 -w 95 -p 40 -b -c '#{pane_current_path}' lf

# fix mouse
unbind -T root MouseDrag1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection
# ]]]

# == Vim Keybinds =========================================================== [[[
# vim keys in command prompt
set-option -g status-keys vi
setw -g mode-keys vi

# copying selection vim style
bind-key Escape copy-mode     # default: [
bind-key p paste-buffer       # default: ] ; interactively clipboard history key: prefix =
bind-key F1 delete-buffer \; display-message "Deleted current buffer"

# vim copy mode rebinds for
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it

bind-key -T copy-mode-vi V                 send-keys -X select-line
bind-key -T copy-mode-vi v                 send-keys -X begin-selection
bind-key -T copy-mode-vi C-v               send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi y               send-keys -X copy-pipe "xsel -pi"
bind-key -T copy-mode-vi y                 send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe "xsel -b"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -b"
bind-key -T copy-mode-vi Escape            send-keys -X cancel
bind-key -T copy-mode-vi L                 send-keys -X end-of-line
bind-key -T copy-mode-vi H                 send-keys -X start-of-line

# These don't work
bind-key -T choice-mode-vi h send-keys -X tree-collapse
bind-key -T choice-mode-vi l send-keys -X tree-expand
bind-key -T choice-mode-vi H send-keys -X tree-collapse-all
bind-key -T choice-mode-vi L send-keys -X tree-expand-all
bind-key -T choice-mode C-d send-keys -X halfpage-down

bind-key -T copy-mode-vi 'o' send-keys -X copy-selection \;\
  new-window -n google \;\
  send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'U' send-keys -X copy-selection \;\
    new-window -n youtube \;\
    send-keys -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'O' send-keys -X copy-selection \;\
    new-window -n w3m \; \
    send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'

# Capture pane and open in Vim
bind-key M-c run \
  'FILE=/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; \
  tmux capture-pane -J -S -102400 -p > $FILE; \
  tmux new-window "nvim $FILE"'

# Screen capture window
bind-key M-o run "prtwindow"
# ]]]

# == Interactive Keybinds =================================================== [[[
# join pane to window/session (interactively)
bind-key C-w choose-tree -Zw "move-window -t '%%'"
bind-key C-i choose-tree -Zw "move-pane -t '%%'"
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
bind-key '@' choose-tree -Zw 'join-pane -h -s "%%"'     # join pane
bind-key '#' choose-tree -Zw 'join-pane -t "%%"'        # send pane
# bind-key @ join-pane -h -s ! # most recently visited

# swap panes around
# bind-key -r -T prefix C-M-k select-pane -U \; swap-pane -t !
# bind-key -r -T prefix C-M-j select-pane -D \; swap-pane -t !
# bind-key -r -T prefix C-M-h select-pane -L \; swap-pane -t !
# bind-key -r -T prefix C-M-l select-pane -R \; swap-pane -t !

# bind-key C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swap-window -t '%%'"
# bind-key C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind-key M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"

# ]]]

# == External Programs ======================================================= [[[
# == Youtube == M-v
bind-key Y split-window -fv \; send-keys 'youtube-viewer '
# bind-key M-v new-window -n ytfzf \;\
#     send-keys -t ytfzf 'ytfzf && tmux kill-window' 'Enter'

# == Surfraw == M-s
# bind-key -n 'C-\' new-window -n bookmarks -c $HOME \;\
#     send-keys 'fsr && tmux kill-window' 'Enter'

# bind-key Enter split-window -fv \; send-keys 'BROWSER=w3m sr '

# bind-key M-b new-window -n google \;\
#     send-keys -t google 'BROWSER=w3m sr google '

# == Neomutt == M-m
bind-key -n M-m new-window -n email -c $HOME \;\
    send-keys 'neomutt && tmux kill-window' 'Enter'

# newsboat -- M-r
bind-key C-n new-window -n rss -c $HOME \;\
    send-keys 'newsboat && tmux kill-window' 'Enter'

bind-key C-h new-window -n htop -c $HOME \;\
    send-keys 'htop && tmux kill-window' 'Enter'

# task spooler -- M-t
bind-key M-t new-window -n spool -c $HOME \;\
    send-keys -t spool 'tsp -C && watch ts' 'Enter' \;\
    split-window -t spool -v \; \
    send-keys -t spool 'TS_SOCKET=/tmp/fm tsp -C && watch TS_SOCKET=/tmp/fm tsp' 'Enter' \;\
    split-window -t spool -v -p 10
# ]]]

# == Fzf Integration ======================================================== [[[
# == Buku ==
bind-key b split-window -fv \; send-keys 'bo && tmux kill-pane' 'Enter'

bind-key 'C-\' new-window -n bookmarks -c $HOME \;\
    send-keys 'bow && tmux kill-window' 'Enter'

# == Taskwarrior ==
bind-key T split-window -fv \; send-keys 'taskf && tmux kill-pane' 'Enter'
bind-key -n M-9 new-window -n taskwarrior -c $HOME \;\
    send-keys 'taskwarrior-tui && tmux kill-window' 'Enter'

# == Tmux completion ==
# TODO: bind-key t run-shell 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words)"'
# bind-key T run-shell 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words --all)"'

# --- Select pane ---
bind-key -n M-0 run-shell "tmux-fzf-panes || :"
# TODO: # bind-key ` run-shell -b "$HOME/mybin/tmux-switch-pane.sh"

# == Testing ================================================================ [[[
# https://gist.github.com/snuggs/800936
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"

#Send command to all window
bind-key C-e command-prompt \
  -p "session?,message?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\| xargs -I\{\} tmux send-keys -t %1:\{\} %2 Enter\""
# ]]]

# == Pane Switch ============================================================ [[[
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
# ]]]

# bind-key 0 send-keys C-l \; run 'tmux clear-history' \; display-message "Deleted current Tmux Clipboard History"

bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# pane navigation
bind 1 selectp -t:.1
bind 2 selectp -t:.2
bind 3 selectp -t:.3
bind 4 selectp -t:.4
bind 5 selectp -t:.5
bind 6 selectp -t:.6
bind 7 selectp -t:.7
bind 8 selectp -t:.8
bind 9 selectp -t:.9
bind 0 selectp -t:.10
bind h selectp -L
bind j selectp -D
bind k selectp -U
bind l selectp -R
bind < swapp -U
bind > swapp -D
bind | swapp

# bind -T resize C-Space resizep -Z
# bind -T resize Space nextl \; switchc -T resize
# bind -T resize 1 selectp -t :.1 \; switchc -T resize
# bind -T resize 2 selectp -t :.2 \; switchc -T resize
# bind -T resize 3 selectp -t :.3 \; switchc -T resize
# bind -T resize 4 selectp -t :.4 \; switchc -T resize
# bind -T resize 5 selectp -t :.5 \; switchc -T resize
# bind -T resize 6 selectp -t :.6 \; switchc -T resize
# bind -T resize 7 selectp -t :.7 \; switchc -T resize
# bind -T resize 8 selectp -t :.8 \; switchc -T resize
# bind -T resize 9 selectp -t :.9 \; switchc -T resize
# bind -T resize 0 selectp -t :.10 \; switchc -T resize
# bind -T resize C-h selectp -L \; switchc -T resize
# bind -T resize C-j selectp -D \; switchc -T resize
# bind -T resize C-k selectp -U \; switchc -T resize
# bind -T resize C-l selectp -R \; switchc -T resize
# bind -T resize \; lastp \; switchc -T resize
# bind -T resize < swapp -U \; switchc -T resize
# bind -T resize > swapp -D \; switchc -T resize
# bind -T resize h resizep -L 2 \; switchc -T resize
# bind -T resize j resizep -D 2 \; switchc -T resize
# bind -T resize k resizep -U 2 \; switchc -T resize
# bind -T resize l resizep -R 2 \; switchc -T resize
# bind -T resize M-1 selectl even-horizontal \; switchc -T resize
# bind -T resize M-2 selectl even-vertical \; switchc -T resize
# bind -T resize M-3 selectl main-horizontal \; switchc -T resize
# bind -T resize M-4 selectl main-vertical \; switchc -T resize
# bind -T resize M-5 selectl tiled \; switchc -T resize
# bind -n C-S-F11 resizep -Z
# bind C-S-F11 send C-S-F11
# bind -n C-S-F12 switchc -T resize
# bind . switchc -T resize

bind -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Floating shell
bind M-f if -F '#{==:#S,floating}' {
    detach
} {
    set -gF '@last_session_name' '#S'
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

bind -n M-S-F2 if -F '#{==:#S,floating}' {
    detach
} {
    set -gF '@last_session_name' '#S'
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
}

bind s if -F '#{!=:#S,floating}' {
    splitw -v -c '#{pane_current_path}'
} {
    set -uw pane-border-status
    run '~/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux joinp -v -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

bind V if -F '#{!=:#S,floating}' \
  { splitw -h -c '#{pane_current_path}' } \
  {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux joinp -h -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind B if -F '#{!=:#S,floating}' {
    breakp
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux breakp -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}
bind '%' if -F '#{!=:#S,floating}' {
    breakp -d
} {
    set -uw pane-border-status
    run '~/mybin/fzf-panes.tmux update_mru_pane_ids'
    run 'bash -c "tmux breakp -d -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
}

unbind <
bind-key < display-menu -T \
  "#[align=center]#{window_index}:#{window_name}" -x P -y P \
  "#{?#{>:#{session_windows},1},,- }Swap Left" l { swap-window -t :-1 } \
  "#{?#{>:#{session_windows},1},,-}Swap Right" r { swap-window -t :+1 } \
  "#{?pane_marked_set,,-}Swap Marked" s { swap-window } \
  '' Kill X { kill-window } \
  Respawn R { respawn-window -k } \
  "#{?pane_marked,Unmark,Mark}" m { select-pane -m } \
  Rename n { command-prompt -F -I "#W" { rename-window -t "#{window_id}" "%%" } } \
  '' "New After" w { new-window -a } \
  "New At End" W { new-window }

unbind >
bind-key > display-menu -T \
  "#[align=center]#{pane_index} (#{pane_id})" -x P -y P \
  "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Top,}" < { send-keys -X history-top } \
  "#{?#{m/r:(copy|view)-mode,#{pane_mode}},Go To Bottom,}" > { send-keys -X history-bottom } \
  '' "#{?mouse_word,Search For #[underscore]#{=/9/...:mouse_word},}" \
  C-r { if-shell -F "#{?#{m/r:(copy|view)-mode,#{pane_mode}},0,1}" "copy-mode -t=" ; \
  send-keys -X -t = search-backward "#{q:mouse_word}" } "#{?mouse_word,Type #[underscore]#{=/9/...:mouse_word},}" \
  C-y { copy-mode -q ; send-keys -l "#{q:mouse_word}" } "#{?mouse_word,Copy #[underscore]#{=/9/...:mouse_word},}" \
  c { copy-mode -q ; set-buffer "#{q:mouse_word}" } "#{?mouse_line,Copy Line,}" \
  l { copy-mode -q ; set-buffer "#{q:mouse_line}" } \
  '' "Horizontal Split" h { split-window -h } \
  "Vertical Split" v { split-window -v } \
  '' "#{?#{>:#{window_panes},1},,-}Swap Up" \
  u { swap-pane -U } "#{?#{>:#{window_panes},1},,-} Swap Down" \
  d { swap-pane -D } "#{?pane_marked_set,,-}Swap Marked" \
  s { swap-pane } '' Kill X { kill-pane } \
  Respawn R { respawn-pane -k } "#{?pane_marked,Unmark,Mark}" \
  m { select-pane -m } "#{?#{>:#{window_panes},1},,-}#{?window_zoomed_flag,Unzoom,Zoom}" \
  z { resize-pane -Z }

if -F '#{m/r:3\.[4-9]$,#{version}}' {
    set -wg popup-border-lines rounded
    set -wg popup-border-style fg=cyan
}

# == Source ================================================================= [[[
run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
# ]]]

# vim: ft=tmux:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
