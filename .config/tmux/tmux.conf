BIN_DIR="$ZDOTDIR/zinit/polaris/bin"

# TODO: pane_marked

# == Plugins ================================================================ [[[
set -g @plugin 'tmux-plugins/tpm'
set -g @tpm-install 'I'
set -g @tpm-update 'U'
set -g @tpm-clean "C-u"

# -- fzf menu --
set -g @plugin 'sainnhe/tmux-fzf'
TMUX_FZF_LAUNCH_KEY="f"
TMUX_FZF_OPTIONS="-p -w 80% -h 48% -m"

# == Fzf URLS =============================================================== [[[
set -g @plugin 'wfxr/tmux-fzf-url'
# set -g @fzf-url-fzf-options '-w 100% -h 50% --multi -0 --no-preview --no-border'
set -g @fzf-url-fzf-options '-w 100% -h 50% --multi -0 --no-preview --reverse \
                              --color=fg:42,fg+:53,hl:22:bold,hl+:23,bg+:-1 \
                              --color=query:51,info:43:bold,border:33,separator:51,scrollbar:51 \
                              --color=label:27,preview-label:27 \
                              --color=pointer:17,marker:19,spinner:13 \
                              --color=header:12,prompt:18'
set -g @fzf-url-bind 'u'
# ]]]

# == Prefix-Highlight ======================================================= [[[
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_empty_prompt ' '
set -g @prefix_highlight_empty_attr "fg=$base0E,bg=$base00"
set -g @prefix_highlight_prefix_prompt '[⌨]﬿'
set -g @prefix_highlight_fg $baseWaveRed
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '[C]﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$base0D,bg=$base00"
set -g @prefix_highlight_sync_prompt '[S]﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr "fg=$base0A,bg=$base00"
# ]]]

# == EasyJump =============================================================== [[[
set -g @plugin "roy2220/easyjump.tmux"
set -g @easyjump-key-binding "j"
set -g @easyjump-label-chars "fjdkslaghrueiwoqptyvncmxzb1234567890"
set -g @easyjump-label-attrs "\e[1m\e[38;5;172m"
set -g @easyjump-text-attrs  "\e[0m\e[38;5;237m"
set -g @easyjump-smart-case  "on"
# ]]]

# == EasyJump =============================================================== [[[
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-save 'C-s'
set -g @resurrect-restore 'C-r'

set -g @resurrect-dir '$HOME/.config/tmux/resurrect'
set -g @resurrect-capture-pane-contents 'off'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-strategy-vim 'session'

# set -g @ressurect-processes '"npm start" env'
# set -g @resurrect-hook-post-save-all \
#     'eval $(xdotool getwindowgeometry --shell $WINDOWID); \
#       echo 0,$X,$Y,$WIDTH,$HEIGHT > $XDG_CONFIG_HOME/tmux/resurrect/geometry'
# set -g @resurrect-hook-pre-restore-all \
#     'wmctrl -i -r $WINDOWID -e $(cat $XDG_CONFIG_HOME/tmux/resurrect/geometry)'
# ]]]

# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-copycat'

# == Thumbs ================================================================= [[[
# set -g @plugin 'fcsonline/tmux-thumbs'
# set -g @thumbs-unique enabled
# set -g @thumbs-command 'echo -n {} | xsel -b && tmux display-message \"Copied {}\"'
# set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
# set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
# set -g @thumbs-regexp-3 'Vlan\d+' # match Vlan interface on network devices
# set -g @thumbs-regexp-4 "Vlan\\d+" # alternative method of defining regexp
# set -g @thumbs-regexp-5 Vlan\\d+ # alternative method of defining regexp
# set -g @thumbs-fg-color green
# set -g @thumbs-hint-fg-color blue
# set -g @thumbs-contrast 3
# ]]]
# ]]]

# == Palette ================================================================ [[[
base00=default
base01='#7E602C'
base02='#434C5E'
base03='#A06469'
base04='#ABB2BF'
base05='#D3869B'
base06='#FF5D62'
base07='#56B6C2'
base08='#88C0D0'
base09='#8BBA7F'
base0A='#83A598'
base0B='#F2594b'
base0C='#F28534'
base0D='#FF9500'
base0E='#8EC07C'
base0F='#EF1D55'
base10='#E8C097'
base11='#98676A'
baseBg='#221A02'
baseSalmon='#EA6962'
baseWaveRed='#E46876'
baseAmethyst="#938AA9"
baseGreen="#819C3B"
baseOldRose='#BD798B'
baseViolet='#957FB8'
# ]]]

# == Colors ================================================================= [[[
# Prefix Config
set -g @prefix_highlight_empty_prompt ' '
set -g @prefix_highlight_empty_attr "fg=$base0E,bg=$base00"
set -g @prefix_highlight_prefix_prompt '[⌨]﬿'
set -g @prefix_highlight_fg $baseWaveRed
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '[C]﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$base0D,bg=$base00"
set -g @prefix_highlight_sync_prompt '[S]﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr "fg=$base0A,bg=$base00"

set -g display-panes-active-colour $base08 # pane number display
set -g display-panes-colour        $base01 # color used by the display-panes command to show indicators for inactive panes

set -wg pane-border-lines        heavy      # set the type of characters used for drawing pane borders
set -wg pane-border-style        fg=$base03 # border style for panes aside from the active pane

# 3.4 version later
if -F '#{m/r:3\.[4-9]$,#{version}}' {
    set -wg popup-border-lines rounded      # set the type of line used to draw popup borders
    set -wg popup-border-style fg=$base08   # set the style for the popup's border
}

# set pane border format string ❐ 
set -wg pane-border-format \
  '#[align=right] \
#{?#{&&:#{pane_active},#{client_prefix}},#[underscore],}\
#{pane_current_command}  #{pane_tty} #{?pane_active, #S:#I/#{session_windows} ,}\
#{?window_zoomed_flag,⬢,❄} #P '

# style of border of active pane
set -wg pane-active-border-style \
    '#{?pane_in_mode,fg=#{base0D},\
     #{?synchronize-panes,fg=#{baseGreen}#,bold,\
     #{?#{==:#{client_key_table},resize},fg=white,fg=#{baseAmethyst}#,bold}}}'

# == Status Bar ============================================================= [[[
tm_date="#[fg=magenta] %Y-%m-%d %I:%M %p "
tm_cpu=" #($HOME/mybin/other/tmux/cpu)"
tm_mem=" #($HOME/mybin/other/tmux/mem)"
# tm_prefix="#[bold,fg=$baseAmethyst]#{?client_prefix, ⌨ ,  }"
# tm_prefix="#[bold,#{?client_prefix,fg=$baseGreen] ⌨ ,fg=$baseAmethyst] ⌨ }"
tm_prefix="#{prefix_highlight}"
tm_zoom="#[default,bg=$base00,fg=$base0D] #{?window_zoomed_flag,,}"
tm_upTime="#[default,fg=$base07,bg=$base00] #($HOME/mybin/other/tmux/tmux_pretty_time)"
tm_pane="#[default,bg=$base00, fg=$base0F]  #P"

set -g status              on      # show / hide the stl or specify its size
set -g status-left-length  30      # set max length of left component of stl
set -g status-right-length 150     # set max length of right component of stl
set -g status-position     bottom  # put stl on top or bottom
set -g status-interval     10      # interval in secs to update status
set -g status-justify      centre  # set the position of the win list in the stl (left, center, right)
set -g status-style        "fg=$base02,bg=$base00,default" # appearance of status messages

set  -g  status-bg     $base00   # set the background style used by the status bar
set  -g  status-right "$tm_prefix $tm_pane $tm_upTime $tm_mem $tm_cpu $tm_zoom $tm_date" # Display string to the right of the status line
set  -g  status-left            "#[default,bg=$base00,fg=$base0F]  #S " # display string to the left of stl
setw -g  window-status-format   "#[fg=$baseWaveRed] #I #W "              # set format in which win is displayed in stl win list
setw -g  window-status-style    "fg=$base03,bg=$base00"                  # set stl style for a single win
setw -g  window-status-current-format " #[bold,fg=$base0F][#W #T]"       # like WSF, but is format used when the win is the current win
setw -g  window-status-current-style  "fg=$base0D,bg=$base00"            # set stl style for the currently active win
setw -g  window-status-separator      ''                                 # sets the separator drawn between windows in the stl
setw -g  window-status-activity-style "bg=$baseBg"        # set stl for wins with an activity alert
setw -g  window-status-bell-style     "bg=$baseBg"        # set stl for wins with a bell alert

set -g message-style         "bold,bg=$base00,fg=$base0F" # set stl msg style. used for msgs & command prompt
set -g message-command-style "bold,fg=$base11"            # appearance of status message cmds
set -g mode-style            "fg=$baseBg,bg=$base11"      # set window modes style
# ]]]
# ]]]

# == General ================================================================ [[[
# set [-aFgopqsuUw] [-t target-pane] option value
#  -p  → change pane (no session) options
#  -w  → change window (not session) options
#  -s  → change server (not session) options
#  -g  → set a global session option
#      → set a session option
#  -a  → append to string options
#  -o  → prevent setting of an option that is already set
#  -q  → suppress errors about unknown or ambiguous options

# ━━━Server━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
#  backspace             → set key sent by tmux for backspace
#  exit-unattached       → make server exit if it has no attached clients
#  history-file          → tmux command history file name
#  message-limit         → set size of message log per client
#  prompt-history-limit  → set the number of history items to save in the history file
#  terminal-features     → set terminal features not detected by terminfo

set -s  default-terminal   "tmux-256color"         # default terminal definition string
set -sa terminal-overrides "xterm-256color:RGB"    # override terminal descriptions
set -sa terminal-overrides "alacritty:RGB"         # add truecolor support
# set -sa terminal-overrides "*:Tc:sitm=\E[3m"         # add truecolor support
set -sa terminal-overrides '*:Smulx=\E[4::%p1%dm'  # support undercurl
set -sa terminal-overrides '*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'
# set -sa terminal-overrides '*:Eneks=\E[>4;1m'
# set -sa terminal-overrides '*:Dseks=\E[>4;m'
# set -sa terminal-features 'xterm*:extkeys'
# set -s extended-keys  always  # control whether tmux will send extended keys through to the terminal

set -s editor         ${EDITOR}    # specify the command used when tmux runs an editor
set -s copy-command   'xsel -ib --trim' # specify the default command when "copy-pipe" is called without arguments
set -s set-clipboard  on           # use esc sequences to set terminal clipboard
set -s escape-time    10           # set timeout to detect single escape characters (in msecs)
set -s exit-empty     on           # exit when there are no active sessions
set -s focus-events   on           # request focus events from terminal
set -s buffer-limit   200          # number of buffers kept per session

# === User Commands =========================================================
#  command-alias         → custom command aliases
#  user-keys             → set list of user-defined key escape sequences
set -s command-alias[1] zoom='resize-pane -Z'
set -s command-alias[2] dumpv='showmsgs'
set -s command-alias[3] dumpenv='show-environment'
set -s command-alias[4] seth='set-hook'
set -s command-alias[5] showh='show-hooks'
set -s command-alias[6] dispv='display -pv'           # display status vars
# set -s command-alias[7] dispp='display -pv'           # display status vars
# show = show-options

# FIX: C-/
set -sg user-keys[0] "\e[31;5u"
bind -N 'Describe keybinding' User0 { command-prompt -kpkey { list-keys -1N '%%' } }
# ]]]

# ━━━Global━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
#  detach-on-destroy            → detach client if attached session is destroyed
#  destroy-unattached           → destroy session if no client is attached
set -wg  activity-action   other    # set action on window activity when monitor-activity is on
set -wg  monitor-bell      off      # monitor for a bell in the window
set -wg  monitor-activity  off      # monitor for a bell in the window
set -g   base-index        1        # define where to start numbering
set -g   renumber-windows  on       # renumber windows if a window is closed
set -g   visual-activity   off      # display status line messages upon activity

set -g  mouse            on         # enable mouse support
set -g  default-command  ${SHELL}   # default command for new windows
set -g  default-shell    ${SHELL}   # default shell executable
set -g  display-time     4000       # time (in msecs) messages are displayed
set -g  repeat-time      300        # time for multiple commands without prefix-key presses
set -g  history-limit    50000      # number of copy-mode lines per window
set -g  word-separators  ' =+!@#$%^&*,.<>/?;:\\|~`(){}[]"'  # string of characters considered word separators

set -g lock-after-time 1000       # lock sessions after N seconds
# set -g lock-command    'pipes-rs' # command to run for locking a client
set -g lock-command    'neo-matrix -DasS 10 -m "$(date "+%A, %B %d %Y")" -M 0 -G 10'

# list of variables to be copied to a session's environment
set -ga update-environment '\
    DISPLAY \
    DBUS_SESSION_BUS_ADDRESS \
    SESSION_MANAGER \
    PATH \
    XDG_CONFIG_HOME \
    XDG_CACHE_HOME \
    XDG_DATA_HOME \
    XDG_RUNTIME_DIR \
    XDG_SESSION_CLASS \
    XDG_SESSION_DESKTOP \
    XDG_SESSION_TYPE \
    XDG_CURRENT_DESKTOP \
    FZF_DEFAULT_OPTS \
    SSH_AUTH_SOCK \
    SSH_CONNECTION'
# ]]]

# ━━━Window━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[
#  popup-style                    → set the popup style
#  pane-border-indicators         → set the indicator style for the active pane in a two pane split
#  pane-colours                   → an array used to configure tmux's colour palette
#  cursor-colour                  → set the colour of the cursor
#  cursor-style                   → set the style of the cursor
set -g clock-mode-colour $base0B   # set clock color
set -g clock-mode-style 12         # set clock hour format (12/24)

set -wg copy-mode-mark-style          "bg=$base00,underscore"    # set the style of search matches in copy mode
set -wg copy-mode-match-style         "bg=$baseAmethyst"         # set the style of the line containing the mark in copy mode
set -wg copy-mode-current-match-style "bg=$baseGreen,underscore" # set the style of the current search match in copy mode

set -wg pane-base-index   1    # integer at which to start indexing panes
set -wg automatic-rename on    # attempt to automatically rename windows
set -g  allow-rename     off   # allow programs to change window titles
set -wg set-titles       on    # attempt to set the client terminal title using the tsl and fsl terminfo(5)
# set -wg pane-border-status  top   # turn border status off or set its position (set in hooks)

set -wg wrap-search       on     # search wrap around at the end of a pane
set -wg aggressive-resize on     # aggressively resize windows
set -g  status-interval    5     # status refresh 5sec
set -g  display-panes-time 2000  # time indicators shown by display-pane are shown
# ]]]

# ━━━Hooks━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ [[[

# show-hooks [-gpw]    [-t target-pane]
# set-hook   [-agpRuw] [-t target-pane] hook-name command
#   -a  → append to hook
#   -g  → add hook to global list
#   -p  → set pane hooks
#   -R  → run hook immediately
#   -t  → specify target session
#   -u  → unset a hook
#   -w  → set window hooks

# client-active           when a client becomes the latest active client of its session.
# client-focus-in         when focus enters a client
# client-focus-out        when focus exits a client
# client-resized          when a client is resized.
# client-session-changed  when a client's attached session is changed.
# pane-died               when the program running in a pane exits, but remain-on-exit is on so the pane has not closed.
# pane-exited             when the program running in a pane exits.
# pane-focus-in           when the focus enters a pane, if the focus-events option is on.
# pane-focus-out          when the focus exits a pane, if the focus-events option is on.
# pane-set-clipboard      when the terminal clipboard is set using the xterm(1) escape sequence.
# session-created         when a new session created.
# session-closed          when a session closed.
# window-linked           when a window is linked into a session.
# window-renamed          when a window is renamed.
# window-resized          when a window is resized.  This may be after the client-resized hook is run.
# window-unlinked         when a window is unlinked from a session.

# Auto hide pane-border-status line when only one pane is displayed (see tmux/tmux#566)
set-hook -g after-new-session  { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-new-window   { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-kill-pane    { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
# set-hook -wg window-linked      { if -F '#{==:#{window_panes},1}' 'display "link one"' 'display "link two"' }
# set-hook -wg window-unlinked    { if -F '#{==:#{window_panes},1}' 'display "unlink one"' 'display "unlink two"' }
# set-hook -p after-join-pane    { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
# set-hook -p after-break-pane    { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g pane-exited        { if -F '#{==:#{window_panes},1}' 'set pane-border-status off' 'set pane-border-status on' }
set-hook -g after-split-window { run -b "if [ #{window_panes} -gt 1 ]; then tmux set pane-border-status top; fi" }

set-hook -g after-resize-pane {
  if -F '#{||:#{==:#{window_panes},1},#{window_zoomed_flag}}' {
    set -g pane-border-status off
  } {
    set -g pane-border-status top
  }
}

# set-hook -g after-split-window { select-pane -T "" }
# set-hook -g after-new-window   { select-pane -T "" }
# set-hook -g after-new-session  { select-pane -T "" }

# Allow for respawning windows after the command has exited
set-hook -g session-created 'set remain-on-exit on'

# set-hook -ga client-focus-in  { set -w status on }
# set-hook -ga client-focus-out { set -w status off }
set-hook -ga client-focus-in[0]  { setw -g  window-status-format "#[fg=$baseWaveRed] #I #W " }
set-hook -ga client-focus-out[0] { setw -g  window-status-format "#[fg=$base03] #I #W " }
# ]]]

# === Keybinds ============================================================== [[[
# TIP:
# Prefix + '               => Select index
# Prefix + i               => Show information
# Prefix + C               => Customize options
# Prefix + ~               => Tmux log/msg output
# :show-options -s|g|w     => Show options
# :show-hooks -g           => Show hooks
# :showmsgs                => Show log
# :showphist               => Show prompt history

unbind C-b
unbind t
unbind '"'
unbind %
# unbind R
# bind R respawn-pane -k

# bind C-a send-prefix
set -g prefix C-a
bind C-a send C-a

# Set an additional prefix
set -g prefix2 C-F11
bind C-F11 send C-F11

# Select last
bind -N 'Select last pane'   ,      lastp
bind -N 'Select last window' l      last
bind -n -N 'Select last window' M-y last

# Select pane movement
# bind -n M-S-Left  selectp -L
# bind -n M-S-Down  selectp -D
# bind -n M-S-Up    selectp -U
# bind -n M-S-Right selectp -R

# https://github.com/tmux/tmux/issues/2000

# New window/session
bind -N 'Create new window (send to right)' c neww -ac "#{pane_current_path}"
bind -N 'Create new window (send to end)'   C neww -c  "#{pane_current_path}"
bind -N 'Create new session'                C-c new

# Switch windows
bind -n -N 'Select prev window' S-Left \
     if -F '#{>:#{session_windows},1}' { previous-window } { neww -c "#{pane_current_path}" }
bind -n -N 'Select next window' S-Right \
     if -F '#{>:#{session_windows},1}' { next-window }     { neww -c "#{pane_current_path}" }

# Swap windows
bind -N "Swap prev window" "{" swapw  -t -1
bind -N "Swap next window" "}" swapw  -t +1
bind -N "Swap prev window and follow" -r M-[ {
  swapw  -d -t -1
  display "#{window_index} <= #{e|+:#{window_index},1}"
}
bind -N "Swap next window and follow" -r M-] {
  swapw  -d -t +1
  display "#{e|-:#{window_index},1} => #{window_index}"
}
bind -N "Interactively choose window" Space { choose-tree -Z }
# Swap pane
bind -N "Swap prev pane"  -r [  swapp -U
bind -N "Swap next pane"  -r ]  swapp -D
# Switch sessions
bind -N "Switch prev session" -r ( { switchc -p }
bind -N "Switch next session" -r ) { switchc -n }
bind -N "Switch to the last session" M-o { switchc -l }
bind -N "Interactively choose session" M-s { choose-tree -Zs }
# bind '.' choose-tree -Z -O time # Sort by last access

# Must have -N 'notes'
bind -N "Show keybindings" ? { list-keys -N }
bind -N 'Describe keybinding' M-/ { command-prompt -kpkey { list-keys -1N '%%' } }

# Cycle windows/panes (no prefix)
# bind -n M-S-a selectp -t :.+ \; resizep -Z # next pane zoom
# bind -n M-S-s selectp -t :.+               # next pane
# bind -n M-S-q selectw -t :-                # previous window
# bind -n M-S-w selectw -t :+                # next window

# bind -N 'Clock mode'   C-t      clock-mode
bind -N "Toggle statusbar" C-t if -F '#{==:#{status},on}' 'set status off' 'set status on'

# Switch between synchronize all pane
bind -N "Toggle pane synchronization" C-g \
  if -F '#{pane_synchronized}' {
    set -w synchronize-panes off; display "Sync off"
  } {
    set -w synchronize-panes on; display  "Sync on"
  }

# Renaming
bind -N "Rename session" R   command-prompt -I "#S" "rename-session '%%'"
bind -N "Rename window"  A   command-prompt "renamew %%"

# Edit config
bind -N "Edit configuration" \
  e neww -n 'conf' \
    'nvim $XDG_CONFIG_HOME/tmux/tmux.conf && \
     tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && \
     tmux display "===== Configuration reloaded ====="'

# == Resize / Split ========================================================= [[[
bind -N "Resize pane leftward"  -r H resizep -L 2
bind -N "Resize pane rightward" -r L resizep -R 2
bind -N "Resize pane downward"  -r J resizep -D 2
bind -N "Resize pane upward"    -r K resizep -U 2

# bind M-.  switchc -T resize
bind -N "Maximize pane" /    resizep -Z

bind -N "Rotate window" -r M-r rotate-window
bind -N "Rotate window layout" N next-layout

# Select layout
bind -N "Spread panes out evenly" E { select-layout -E }
bind -N "Select even-horizontal layout " -Tresize M-1 selectl even-horizontal \; switchc -Tresize
bind -N "Select even-vertical layout "   -Tresize M-2 selectl even-vertical   \; switchc -Tresize
bind -N "Select main-horizontal layout " -Tresize M-3 selectl main-horizontal \; switchc -Tresize
bind -N "Select main-vertical layout "   -Tresize M-4 selectl main-vertical   \; switchc -Tresize
bind -N "Select tiled layout"            -Tresize M-5 selectl tiled           \; switchc -Tresize

bind -N "Select window 1"  -T resize 1 selectp -t :.1 \; switchc -T resize
bind -N "Select window 2"  -T resize 2 selectp -t :.2 \; switchc -T resize
bind -N "Select window 3"  -T resize 3 selectp -t :.3 \; switchc -T resize
bind -N "Select window 4"  -T resize 4 selectp -t :.4 \; switchc -T resize
bind -N "Select window 5"  -T resize 5 selectp -t :.5 \; switchc -T resize
bind -N "Select window 6"  -T resize 6 selectp -t :.6 \; switchc -T resize
bind -N "Select window 7"  -T resize 7 selectp -t :.7 \; switchc -T resize
bind -N "Select window 8"  -T resize 8 selectp -t :.8 \; switchc -T resize
bind -N "Select window 9"  -T resize 9 selectp -t :.9 \; switchc -T resize
bind -N "Select window 10" -T resize 0 selectp -t :.10 \; switchc -T resize

# bind -N 'Clear the marked pane' M { select-pane -M }

bind -N "Split pane horizontally" - \
  if -F '#{!=:#S,floating}' {
      splitw -v -c '#{pane_current_path}'
  } {
      set -uw pane-border-status
      run "$BIN_DIR/fzf-panes.tmux update_mru_pane_ids"
      run 'bash -c "tmux joinp -v -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Split pane vertically" | \
  if -F '#{!=:#S,floating}' {
      splitw -h -c '#{pane_current_path}'
  } {
      set -uw pane-border-status
      run "$BIN_DIR/fzf-panes.tmux update_mru_pane_ids"
      run 'bash -c "tmux joinp -h -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }
# ]]]

# == Vim Keybinds =========================================================== [[[
# Vim keys in command prompt
set  -g status-keys vi  # mode to use in status bar modes (vi/emacs)
setw -g mode-keys   vi  # mode to use in copy and choice modes (vi/emacs)

# unbind -n C-Enter

# bind Escape copy-mode     # default: [
# bind -n C-Enter copy-mode
bind -N "Enter copy-mode"    Enter copy-mode
bind -n -N "Enter copy-mode" C-F12 copy-mode
bind -N "Send C-F12"         C-F12 send C-F12

bind -N "List buffers" C-b    lsb
bind -N "Interactive clipboard history" p      pasteb     # default: ]
bind -N "Delete paste buffer"           +      { deleteb; display "Deleted current buffer" }

bind-key -N "Copy to tmux clipboard"   M-, {
  run "tmux set-buffer -- \"$(xsel -ob)\""
  display "Copied to tmux clipboard"
}
bind-key -N "Copy to system clipboard" M-. {
  run 'tmux show-buffer | xsel -ib --trim'
  display "Copied to system clipboard"
}

# bind 0 send C-l \; run 'tmux clear-history' \; display-message "Deleted current Tmux Clipboard History"

# Vim copy mode rebinds for
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
# Fix mouse
unbind -T root         MouseDrag1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
bind   -T copy-mode-vi MouseDown1Pane { selectp; send -X clear-selection }

bind -N "Select word"            -T copy-mode-vi .      send -X select-word
bind -N "Select line"            -T copy-mode-vi V      send -X select-line
bind -N "Start visual selection" -T copy-mode-vi v      send -X begin-selection
bind -N "Start visual block"     -T copy-mode-vi C-v  { send -X rectangle-toggle; send -X begin-selection }
bind -N "Copy selection"  -T copy-mode-vi y       send -X copy-selection-and-cancel
bind -N "Copy to EOL"     -T copy-mode-vi D       send -X copy-end-of-line-and-cancel
bind -N "Copy line"       -T copy-mode-vi Y       send -X copy-line-and-cancel
bind -N "Copy word"       -T copy-mode-vi S     { send -X select-word; send -X copy-selection-and-cancel }
bind -N "Clear selection" -T copy-mode-vi Escape  send -X clear-selection
bind -N "Cancel"          -T copy-mode-vi i       send -X cancel
bind -N "Cancel"          -T copy-mode-vi q       send -X cancel
bind -N "Goto EOL"        -T copy-mode-vi L       send -X end-of-line
bind -N "Goto BOL"        -T copy-mode-vi H       send -X start-of-line
bind -N "Goto MOL"        -T copy-mode-vi z       send -X middle-line
bind -N "Set mark"        -T copy-mode-vi m       send -X set-mark
bind -N "Goto mark"       -T copy-mode-vi "'"     send -X jump-to-mark
bind -N "Jump again"      -T copy-mode-vi ';'     send -X jump-again
bind -N "Jump reverse"    -T copy-mode-vi ,       send -X jump-reverse
bind -N "Other end"       -T copy-mode-vi o       send -X other-end
bind -N "Half-page up"    -T copy-mode-vi u       send -X halfpage-up
bind -N "Half-page down"  -T copy-mode-vi d       send -X halfpage-down
bind -N "Copy" -T copy-mode-vi Enter             send -X copy-pipe "xsel -ib"
bind -N "Copy" -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xsel -ib"

bind -N "Equivalent vim-asterisk '*'" -T copy-mode-vi * \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-forward-text '#{buffer_sample}'
  } {
     send -FX search-forward '#{copy_cursor_word}'
  }

bind -N "Equivalent vim-asterisk '#'" -T copy-mode-vi "#" \
  if -F '#{selection_active}' {
     send -X copy-pipe
     send -FX search-backward-text '#{buffer_sample}'
     send -X search-again
  } {
     send -FX search-backward '#{copy_cursor_word}'
  }

bind -N "Surfraw: Google tmux buffer" -T copy-mode-vi R {
  send -X copy-selection
  neww -n google
  send -t google 'sr google "$(tmux show-buffer)" && tmux killw' 'Enter'
}

bind -N "YouTube: tmux buffer" -T copy-mode-vi U {
  send -X copy-selection
  neww -n youtube
  send -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux killw' 'Enter'
}

bind -N "w3m: tmux buffer" -T copy-mode-vi O {
  send -X copy-selection
  neww -n w3m
  send -t w3m 'w3m "$(tmux show-buffer)" && tmux killw' 'Enter'
}

# These don't work
bind -T choice-mode-vi h   send -X tree-collapse
bind -T choice-mode-vi l   send -X tree-expand
bind -T choice-mode-vi H   send -X tree-collapse-all
bind -T choice-mode-vi L   send -X tree-expand-all

bind -T choice-mode    C-d send -X halfpage-down
bind -T choice-mode    C-u send -X halfpage-up

# == Pane Switch ============================================================ [[[
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind -n -N "Select the pane to the left"   C-h if "$is_vim" { send C-h }  { selectp -L }
bind -n -N "Select the pane to the bottom" C-j if "$is_vim" { send C-j }  { selectp -D }
bind -n -N "Select the pane to the top"    C-k if "$is_vim" { send C-k }  { selectp -U }
bind -n -N "Select the pane to the right"  C-l if "$is_vim" { send C-l }  { selectp -R }

bind -T copy-mode-vi  C-h  selectp -L
bind -T copy-mode-vi  C-j  selectp -D
bind -T copy-mode-vi  C-k  selectp -U
bind -T copy-mode-vi  C-l  selectp -R
bind -T copy-mode-vi 'C-\' selectp -l

# swap panes around
# bind -r -T prefix C-M-k selectp -U \; swap-pane -t !
# bind -r -T prefix C-M-j selectp -D \; swap-pane -t !
# bind -r -T prefix C-M-h selectp -L \; swap-pane -t !
# bind -r -T prefix C-M-l selectp -R \; swap-pane -t !
# ]]]
# ]]]

# == Interactive Keybinds =================================================== [[[
bind -N "Swap windows, don't follow"               C-w choose-tree { swapw -t "%%" }
bind -N "Swap windows, follow"                     W   choose-tree { swapw -dt "%%" }
bind -N "Swap panes/windows, don't follow"         P   choose-tree { swapp -t "%%" }
bind -N "Send current pane vertically"            '@'  choose-tree { joinp -fh -t "%%" }
bind -N "Send current pane horizontally"          '#'  choose-tree { joinp -fv -t "%%" }
bind -N "Move window after selected, follow"       S   choose-tree { movew -at "%%" }

bind -N "Move window before selected, follow"       C-,   choose-tree { movew -bt "%%" }
bind -N "Move window after selected, follow"        C-.   choose-tree { movew -at "%%" }
bind -N "Move window before selected, don't follow" C-S-< choose-tree { movew -dbt "%%" }
bind -N "Move window after selected, don't follow"  C-S-> choose-tree { movew -dat "%%" }

# Join pane to window/session (interactively)
# bind C-i choose-tree -Zw { movep -t '%%' }
# bind C-w choose-tree -Zw { movew -t '%%' }
# bind @ join-pane -hs ! # most recently visited
# bind -n S-Up    choose-tree -Zw "swapw -t '%%'"

# bind C-f choose-tree 'move-pane -v -s "%%"'
# bind V choose-tree 'move-pane -h -s "%%"'

# Throw a pane into current pane from another window
bind -N "Join pane with current, horizontally" h      choose-tree { joinp -fv -s "%%" }
bind -N "Join pane with current, vertically"   v      choose-tree { joinp -fh -s "%%" }
bind -N "Join pane with current, horizontally" -n M-_ choose-tree { joinp -fv -s "%%" }
bind -N "Join pane with current, vertically"   -n M-| choose-tree { joinp -fh -s "%%" }

# bind C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swapw -t '%%'"
# bind C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"

if "[[ -x $BIN_DIR/fzf-panes.tmux ]]" {
    set -g '@fzf_panes_ex_session_pat' '^(floating)$'
    set-hook -g pane-focus-in[10] "if -F \
        '#{&&:#{!=:#{client_key_table},resize},#{!=:#{session_name},floating}}' \
        'run -b \"$BIN_DIR/fzf-panes.tmux update_mru_pane_ids\"'"
    bind -N "Move to selected window"     .  run -b "$BIN_DIR/fzf-panes.tmux new_window"
    bind -N "Move to selected window"     w  run -b "$BIN_DIR/fzf-panes.tmux new_window"
    bind -N "Move to last window"        ';' run -b "$BIN_DIR/fzf-panes.tmux select_last_pane"
    bind -N "Move to selected window" -n M-= run -b "$BIN_DIR/fzf-panes.tmux new_window"
} {
    set-hook -ug pane-focus-in[10]
    bind -N "Move to selected window" w choose-tree -Z
    bind -N "Move to last window"     S choose-tree { movep -v -s "%%" }
    bind -N "Move to selected window" V choose-tree { movep -h -s "%%" }
}

bind -N "Swap pane with selected pane" q displayp { swapp -t '%%' }
bind -N "Display pane numbers"         Q displayp

bind -N "Break pane, send to end, follow" B \
  if -F '#{!=:#S,floating}' {
    breakp
  } {
    set -uw pane-border-status
    run "$BIN_DIR/fzf-panes.tmux update_mru_pane_ids"
    run 'bash -c "tmux breakp -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Break pane, send to end, don't follow" '%' \
  if -F '#{!=:#S,floating}' {
    breakp -d
  } {
    set -uw pane-border-status
    run "$BIN_DIR/fzf-panes.tmux update_mru_pane_ids"
    run 'bash -c "tmux breakp -d -s floating -t \"$(tmux show -gvq '@last_session_name'):\""'
  }

bind -N "Break pane, send to left, don't follow" C-x breakp -bd

bind -N "Kill pane without confirmation" x killp
bind -N "Kill window with confirmation"  & { confirm-before -p "kill-window #W? [Y/n]" killw }
bind -N "Kill session with confirmation" X { confirm-before -p "kill-session #S? [Y/n]" kill-session }
# ]]]

# === Mouse === [[[
bind -N "Toggle mouse OFF" M { set -gq mouse off; display 'Mouse: OFF' }
bind -N "Toggle mouse ON"  m { set -gq mouse on ; display 'Mouse: ON' }
# bind -N "Toggle mouse" m \
#   if -F '#{==:#{mouse},on}' {
#     set -gq mouse off
#     display 'Mouse: OFF'
#   } {
#     set -gq mouse on
#     display 'Mouse: ON'
#   }

bind -T root WheelUpPane \
  if -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'

bind -T root WheelDownPane \
  if -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# bind -T root WheelUpPane   if -F -t = "#{alternate_on}" "send -M" "selectp -t =; copy-mode -e; send -M"
# bind -T root WheelDownPane if -F -t = "#{alternate_on}" "send -M" "selectp -t =; send -M"
# ]]]

# == Menu / Floating Windows ================================================ [[[
# bind "C-'" display-popup -h 40 -w 95 -E "tmux new-session -A -s popup"  # Start a floating session
# bind C-b splitw -h 40 -w 95 -p 40 -b -c ' # {pane_current_path}' lf # Open lf file manager

bind-key -N "Display help menu" C-q \
  display-menu -x W -y S \
    "Horizontal Split"                   | "split-window -h"  \
    "Vertical Split"                     - "split-window -v"  \
    "Swap Up"                            u "swap-pane -U"     \
    "Swap Down"                          d "swap-pane -D"     \
    "Kill Pane"                          x kill-pane          \
    "New Window"                         N new-window         \
    "Rename Window"                      R "command-prompt -I \"#W\" \"rename-window -- '%%'\"" \
    "#{?window_zoomed_flag,Unzoom,Zoom}" z "resize-pane -Z"

# Floating shell
bind -N "Attach a floating shell" "C-'" \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
  }

# Floating shell
bind -n -N "Attach a floating shell" M-S-F2 \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w80% -h60% -E 'tmux new -A -s floating \
    "tmux set -w pane-border-status off; TMUX_SESSION=floating $SHELL"'
  }
# ]]]

# == External Programs ======================================================= [[[
# bind M-v neww -n ytfzf \; send -t ytfzf 'ytfzf && tmux killw' 'Enter'     # YT FZF
# bind 'C-]' neww -n bookmarks -c $HOME \; send 'fsr && tmux killw' 'Enter' # Newsboat bookmarks
# bind Enter splitw -fv \; send 'BROWSER=w3m sr '                           # General surfraw

# === Youtube-viewer ===
bind -N "Open Youtube viewer command, horizontally" Y {
     splitw -fv
     send 'youtube-viewer '
}

# === Surfraw Google ===
bind -N "Open surfraw google command, new window" G {
    neww -n google
    send -t google 'BROWSER=w3m sr google '
}

# == Neomutt ==
bind -n -N "Open neomutt, new window" M-m {
    neww -n email -c $HOME
    send 'neomutt && tmux killw' 'Enter'
}

# === RSS ===
bind -N "Open newsboat, new window" C-n {
    neww -n rss -c $HOME
    send 'newsboat && tmux killw' 'Enter'
}

# === htop ===
bind -N "Open htop, new window" C-h {
    neww -n htop -c $HOME
    send 'sudo htop && tmux killw' 'Enter'
}

# === task spooler ===
bind -N "Open task-spooler, new window" M-t {
    neww -n spool -c $HOME
    send -t spool 'tsp -C && watch ts' 'Enter'
    splitw -t spool -v
    send -t spool 'TS_SOCKET=/tmp/fm tsp -C && watch TS_SOCKET=/tmp/fm tsp' 'Enter'
    splitw -t spool -v -p 10
}

bind C-l send C-l

# == Fzf Integration ======================================================== [[[

# == Buku Bookmarks (GUI) ==
# bind -N "Open buku (GUI), horizontally" 'M-\' {
#     splitw -fv
#     send 'bo && tmux kill-pane' 'Enter'
# }

bind -N "Open buku (GUI)" b \
  if -F '#{==:#S,floating}' {
    detach
  } {
    set -gF '@last_session_name' '#S'
    detach -s floating
    popup -d '#{pane_current_path}' -xC -yC -w90% -h80% -E \
      'tmux new -A -s floating \
      "tmux set -w pane-border-status off; \
       tmux set remain-on-exit off; \
       TMUX_SESSION="floating" BUKU_FZF_OPTS="--height=100%" BUKU_NO_BG=1 fpath+=($ZDOTDIR/functions) && autoload -Uz bo && bo"'
  }

# == Buku Bookmarks (w3m) ===
bind -N "Open buku (w3m), new window" 'C-\' {
    neww -n bookmarks -c $HOME
    send 'bow && tmux killw' 'Enter'
}

# == Taskwarrior ==
# bind T splitw -fv \;\
#     send 'taskf && tmux kill-pane' 'Enter'

# === Taskwarrior TUI ===
bind -n -N "Open taskwarrior TUI, new window" M-9 {
    neww -n taskwarrior -c $HOME
    send 'taskwarrior-tui && tmux killw' 'Enter'
}

# == Tmux completion ==
bind -n -N "Select pane (fzf)" M-0 \
     run "tmux-fzf-panes || :"
bind -N "Select words to paste from buffer (fzf)"      t \
     run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words)"'
bind -N "Select words to paste from all buffers (fzf)" T \
     run 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words --all)"'

bind -N "Capture pane and open in Vim" M-c run \
  'FILE=/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; \
  tmux capture-pane -J -S -102400 -p > $FILE; \
  tmux neww "nvim $FILE"'

# bind j capture-pane \;\
#     save-buffer /tmp/tmux-buffer \;\
#     new-window -n "vim-copymode" '$SHELL -c "nvim /tmp/tmux-buffer"'

# ]]]
# ]]]
# ]]]

# == Source ================================================================= [[[
# Reload config file directly using prefix r
# Would be nice to multiply '=' by #{client_width}
bind -N "Reload tmux configuration" r {
    source-file ~/.config/tmux/tmux.conf
    display-message "=================== Configuration reloaded ==================="
}

run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
run "$XDG_CONFIG_HOME/tmux/plugins/tmux-resurrect/resurrect.tmux"
# ]]]

# == Formats ================================================================ [[[
# https://github.com/tmux/tmux/wiki/Formats
# '#{t:var}'       => human readable time
# '#{d:path}'      => trim file from path
# '#{b:path}'      => trim dir from path
# '#{=3:@v}'       => trim text (foobar -> foo)
# '#{=-3:@v}'      => trim text (foobar -> bar)
# '#{=|5|...:@v}'  => trimmed on right ('foobar' -> 'fooba...')
# '#{=|-5|...:@v}' => trimmed on right ('foobar' -> '...oobar')
# '#{p9:@v}baz'    => pad text (foobar -> 'foobar   baz')
# '#{p-9:@v}baz'   => pad text (foobar -> '   foobarbaz')
# '#{=3;p-6:@v}'   => combine ('foobar' -> '   foo   ')

# Comparison
# '#{#,}'                    => escaped comma
# '#{==:#{@v}bar,foobar}'    => if v#{bar} == foobar then 1 else 0
# '#{!=:#{@v}bar,foobar}'    => if v#{bar} != foobar then 1 else 0
# '#{<:#{@v},bar}'           => if v < bar then 1 else 0
# '#{||:0,#{@v}}'            => if 0 || #{v} then 1 else 0
# '#{&&:0,#{@v}}'            => if 0 && #{v} then 1 else 0
# '#{?@v,yes,no}'            => if #{v} then yes else no
# '#{?#{==:#{@v},0},yes,no}' => if #{v} == 0 then yes else no
# '#{?#{==:#{@v},0},#{@v} is true,#{@v} is false}'  => if #{v} == 0 then '#{v} is true' else '#{v} is false'

# Substitution
# '#{s|foo|bar|:@v}'            => s/foo/bar @v
# '#{s|(foo)(bar)|\2\1|:@v}'    => s/(foo)(bar)/\2\1 @v
# '#{s|#{@w}|xxx|:@v}'          => s/#w/xxx @v
# '#{s|FOO|xxx|i:@v}'           => s/FOO/xxx/i @v
# '#{s|foo|xxx|;s|bar|yyy|:@v}' => s/foo/xxx;s/bar/yyy @v

# Arithmetic
# '#{e|+|:1,1}'       => 2
# '#{e|-|:1,1}'       => 0
# '#{e|*|:1,1}'       => 1
# '#{e|/|f|4:10,3}'   => 3.3333
# '#{e|m|:4,3}'       => 1

# Matching
# '#{m:*foo*,#{@v}}'     => v=foobar; 1 if pattern matches else 0 (1)
# '#{m|ri:^FOO,#{@v}}'   => v=foobar; r=regex i=ignore_case; 1 if pattern matches else 0 (1)

# C = searches for format in pane content; returns line number or 0
# '#{C:x*z}'
# '#{C|r:x.z}'

# Loops (S W P)
# '#{W:#{window_name} }'      => irssi mutt emacs ksh ksh ksh ksh ksh ksh emacs emacs ksh
# '#{W:#{window_name} ,--- }' => irssi mutt emacs ksh ksh ksh ksh ksh --- emacs emacs ksh

# Literals and Quoting
#   - l = literal string given to it
#   - q = quote special chars
# '#{?#{l:1},a,b}'
# '#{q:@v}'

# Expand more than once (E T)
# '#{status-left}'   => [#{session_name}]
# '#{T:status-left}' => [0]

# #{?#{&&:#{||:#{window_activity_flag},#{window_silence_flag}},#{!=:#{window-status-activity-style},default}}, #{window-status-activity-style},}
# ]]]

# vim: ft=tmux:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
