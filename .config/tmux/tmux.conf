# == Plugins ================================================================ [[[

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'wfxr/tmux-fzf-url'

# set -g @plugin 'wfxr/tmux-power'

TMUX_FZF_LAUNCH_KEY="f"
TMUX_FZF_OPTIONS="-p -w 80% -h 48% -m"
set -g @tpm-install 'I'
set -g @tpm-update 'U'
set -g @tpm-clean "C-u"

set -g @fzf-url-fzf-options '-w 100% -h 50% --multi -0 --no-preview --no-border'

# == Thumbs ================================================================= [[[
set -g @thumbs-unique enabled
set -g @thumbs-command 'echo -n {} | xsel -b && tmux display-message \"Copied {}\"'
set -g @thumbs-regexp-1 '[a-z]+@[a-z]+.com' # Match emails
set -g @thumbs-regexp-2 '[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:[a-f0-9]{2}:' # Match MAC addresses
set -g @thumbs-regexp-3 'Vlan\d+' # match Vlan interface on network devices
set -g @thumbs-regexp-4 "Vlan\\d+" # alternative method of defining regexp
set -g @thumbs-regexp-5 Vlan\\d+ # alternative method of defining regexp
set -g @thumbs-fg-color green
set -g @thumbs-hint-fg-color blue
set -g @thumbs-contrast 3
# ]]]
# ]]]

# == Palette ================================================================ [[[
# base03='#abb2bf' # - window title
# base0F='#d3869b' # - active border, session
base00=default   # - Default background color
base01='#7E602C' # - pane number
base02='#434c5e' # - pane border
base03='#A06469' # - window title
base04='#d8dee9'
base05='#e5e9f0'
base06='#eceff4'
base07='#56b6c2' # - status date
base08='#88c0d0' # - clock, active pane number
base09='#8bba7f' # - status battery
base0A='#83a598'
base0B='#f2594b' # - status prefix highlight
base0C='#f28534' # - mux message
base0D='#FF9500' # - active window, status zoom
base0E='#8ec07c' # - status prefix off
base0F='#EF1D55' # - active border, session
base10='#e8c097'
base11='#98676A'
baseTXT_BG='#291804'
# ]]]

# == Colors ================================================================= [[[

# true color support
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",*256col*:Tc"
# set -ga terminal-overrides ",xterm-256color:Tc"

# set -g  default-terminal   "xterm-256color"
# set -sa terminal-overrides ',xterm*:RGB,xterm*:sitm=\E[3m'
set -g  default-terminal   "tmux-256color"
set -ag terminal-overrides ",alacritty:Tc"
set -g  display-panes-active-colour $base08
set -g  display-panes-colour $base01

# set display timelimit
set-option -g display-panes-time 2000
set-option -g display-time 1000

# pane border colors
setw -g pane-active-border-style fg=$base09
setw -g pane-border-style fg=$base02

# pane number display
set-option -g display-panes-active-colour $base08
set-option -g display-panes-colour $base01

set -g lock-after-time 1000
set -g lock-command 'pipes-rs'
# ]]]

# == Status Bar ============================================================= [[[

# status bar general styles
bind G set status # hide and show status
set -g status 'on'
set -g status-left-length 30
set -g status-right-length 150
set -g status-style fg=$base02,bg=$base00,default
set -g message-style bg=$base00,fg=$base0C

# prefix config
set -g @prefix_highlight_empty_prompt ' ﬿ '
set -g @prefix_highlight_empty_attr fg=$base0E,bg=$base00
set -g @prefix_highlight_prefix_prompt '﬿'
set -g @prefix_highlight_fg $base0B
set -g @prefix_highlight_bg $base00
set -g @prefix_highlight_copy_prompt '﬿'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr fg=$base0D,bg=$base00
set -g @prefix_highlight_sync_prompt '﬿'
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_mode_attr fg=$base0A,bg=$base00

setw -g window-status-style fg=$base03,bg=$base00
setw -g window-status-format " #I #W"
setw -g window-status-current-style fg=$base0D,bg=$base00
setw -g window-status-current-format " [#[bold]#W #T]"
setw -g window-status-separator " "

# Clock style
set -g clock-mode-colour $base0B
set -g clock-mode-style 12
# Copy mode highlight
set -g mode-style fg=$baseTXT_BG,bg=$base11

# show clock
bind-key C-t clock-mode

# left status
tm_session_name="#[default,bg=$base00,fg=$base0F]  #S "
set -g status-left "$tm_session_name"

# right status
tm_cpu=" #($HOME/mybin/other/tmux/cpu)"
tm_mem=" #($HOME/mybin/other/tmux/mem)"
tm_prefix="#{prefix_highlight}"
tm_zoom="#[default,bg=$base00,fg=$base0D] #{?window_zoomed_flag,,}"
tm_upTime="#[default,fg=$base07,bg=$base00] #($HOME/mybin/other/tmux/tmux_pretty_time)"
tm_pane="#[default,bg=$base00, fg=$base0F]  #P"
set -g status-right "$tm_pane $tm_upTime $tm_mem $tm_cpu $tm_zoom $tm_prefix"
# ]]]
# ]]]

# == General ================================================================ [[[

set -g base-index       1     # start numbering from 1
set -g renumber-windows on    # renumber windows on close
set -g status-interval  5     # status refersh 5sec
set -sg escape-time     10    # vim esc time
set -g history-limit    15000 # increase scrollback buffer size
set -g display-time     4000  # tmux messages are displayed for 4 seconds
set -g allow-rename     off   # don't rename windows automatically
set -g repeat-time      1500  # increase repeat time (repeat after prefix with -r flag)
set -g set-clipboard    on
set -g mouse            on
set -g focus-events     on

set  -qg status-utf8       on
setw -qg utf8              on
setw -g  aggressive-resize on
setw -g  pane-base-index   1

# default shell
set-option -g default-command ${SHELL}
set-option -g update-environment "SSH_AUTH_SOCK \
                                  SSH_CONNECTION \
                                  DISPLAY"
                                  # DBUS_SESSION_BUS_ADDRESS"
# setenv GPG_TTY $(tty)
# export $(dbus-launch)
# ]]]

# == Keybinds =============================================================== [[[
# Useful:
# C-a ' => select index
# C-a C => Customize options

# enable shell hotkeys C-left/C-right
# set-window-option -g xterm-keys on

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# clear screen and scrollback history
bind C-l send-keys 'C-l'

bind C-f send-keys 'C-f'
# bind C-j send-keys 'C-j'
# bind C-k send-keys 'C-k'
bind C-x send-keys 'C-x'
bind C-q send-keys 'C-q'

# ??
# maximize current pane
bind + run 'cut -c3- ~/.config/tmux/tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# resize
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# select panes
bind-key C-k select-pane -U
bind-key C-h select-pane -L
bind-key C-j select-pane -D
bind-key C-l select-pane -R

bind-key \; last-pane
bind-key l last-window

bind -n M-S-Left select-pane -L
bind -n M-S-Down select-pane -D
bind -n M-S-Up select-pane -U
bind -n M-S-Right select-pane -R

# split panes using | and - (with same profile path)
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window      -c '#{pane_current_path}'
# maximize pane
bind / resize-pane -Z
unbind-key '"'
unbind-key %

# switch between sessions
bind -r ( switch-client -p
bind -r ) switch-client -n

bind -n M-Space choose-tree -Z
bind -n M-e choose-session

# swap windows
bind-key -n M-< previous-window
bind-key -n M-> next-window
bind-key -n S-Left previous-window
bind-key -n S-Right next-window
bind-key -n S-Up choose-tree -Zw "swap-window -t '%%'"
# bind -r < swap-window -t -1
# bind -r > swap-window -t +1
bind "{" swap-window  -t -1
bind "}" swap-window  -t +1
bind [   swap-pane    -U
bind ]   swap-pane    -D

# rename session
bind . command-prompt -I "#S" "rename-session '%%'"
bind A command-prompt "rename-window %%"

# ??
# cycle windows/panes (no prefix)
bind-key -n M-S-a select-pane -t :.+ \; resize-pane -Z  # next pane zoom
bind-key -n M-S-s select-pane -t :.+  # next pane
bind-key -n M-S-q select-window -t :- # previous window
bind-key -n M-S-w select-window -t :+ # next window

# switch between synchronize all pane
bind E setw synchronize-panes

# throw a pane into current pane from another window
bind v choose-tree "join-pane -v -s "%%""
bind h choose-tree "join-pane -h -s "%%""
bind-key -n M-_ choose-tree 'join-pane -v -s "%%"'
bind-key -n M-| choose-tree 'join-pane -h -s "%%"'

# kill without confirm
bind-key x kill-pane
#bind x confirm-before 'kill-pane'
# bind-key & kill-window
bind & confirm-before 'kill-window'
# bind Q confirm-before 'kill-session'

# unlink-window -k = unlink if multiple session else kill
# kill all sessions
bind-key X kill-session -a
# send pane to background and not kill it
bind-key C-x break-pane -dP
bind-key ! break-pane \; display "break-pane"
# join-pane -vs session:window.pane

bind-key m set-option -g -q mouse on \; display-message 'Mouse: ON'
bind-key M set-option -g -q mouse off \; display-message 'Mouse: OFF'

# swap current pane with the selected pane
bind q display-panes "swap-pane -t "%%""
bind Q display-panes

# layout
# bind-key -n M-< rotate-window
bind-key M-r rotate-window
bind-key M-. next-layout


# reload config file directly using prefix r
bind r source-file ~/.config/tmux/tmux.conf \; display-message "Configuration reloaded"
# \; run -b "terminal-notifier -message 'config sourced' -title 'tmux'"

# edit config
bind-key e new-window -n 'conf' \
  'nvim $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux source $XDG_CONFIG_HOME/tmux/tmux.conf && \
   tmux display "tmux config source"'

# Bmux
bind s display-popup -E bmux -a

# Start a floating session
bind C-g display-popup -h 40 -w 95 -E "tmux new-session -A -s popup"

# Open lf file manager
bind-key C-b split-window -h -p 40 -b -c '#{pane_current_path}' lf

# fix mouse
unbind -T root MouseDrag1Pane
unbind -T copy-mode-vi MouseDragEnd1Pane
bind -T copy-mode-vi MouseDown1Pane select-pane\; send-keys -X clear-selection
# ]]]

# == Vim Keybinds =========================================================== [[[
# vim keys in command prompt
set-option -g status-keys vi
setw -g mode-keys vi
# copying selection vim style
bind-key Escape copy-mode     # default: [
bind-key p paste-buffer       # default: ] ; interactively clipboard history key: prefix =
bind-key F1 delete-buffer \; display-message "Deleted current buffer"

# vim copy mode rebinds for
# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it

bind-key -T copy-mode-vi V                 send-keys -X select-line
bind-key -T copy-mode-vi v                 send-keys -X begin-selection
bind-key -T copy-mode-vi C-v               send-keys -X rectangle-toggle
# bind-key -T copy-mode-vi y               send-keys -X copy-pipe "xsel -pi"
bind-key -T copy-mode-vi y                 send-keys -X copy-selection-and-cancel
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe "xsel -b"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xsel -b"
bind-key -T copy-mode-vi Escape            send-keys -X cancel
bind-key -T copy-mode-vi L                 send-keys -X end-of-line
bind-key -T copy-mode-vi H                 send-keys -X start-of-line

# These don't work
bind-key -T choice-mode-vi h send-keys -X tree-collapse
bind-key -T choice-mode-vi l send-keys -X tree-expand
bind-key -T choice-mode-vi H send-keys -X tree-collapse-all
bind-key -T choice-mode-vi L send-keys -X tree-expand-all
bind-key -T choice-mode C-d send-keys -X halfpage-down

# Capture pane and open in Vim
bind-key M-c run \
  'FILE=/tmp/tmux-capture-$(date +%Y%m%d%H%M%S).txt; \
  tmux capture-pane -J -S -102400 -p > $FILE; \
  tmux new-window "nvim $FILE"'

# Screen capture window
bind-key M-o run "prtwindow"

bind-key -T copy-mode-vi 'o' send-keys -X copy-selection \;\
  new-window -n google \;\
  send-keys -t google 'sr google "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'U' send-keys -X copy-selection \;\
    new-window -n youtube \;\
    send-keys -t youtube 'youtube-viewer "$(tmux show-buffer)" && tmux kill-window' 'Enter'

bind-key -T copy-mode-vi 'O' send-keys -X copy-selection \;\
    new-window -n w3m \; \
    send-keys -t w3m 'w3m "$(tmux show-buffer)" && tmux kill-window' 'Enter'
# ]]]

# == Interactive Keybinds =================================================== [[[
# join pane to window/session (interactively)
# bind-key C-w choose-tree -Zw "move-window -t '%%'"
bind-key C-i choose-tree -Zw "move-pane -t '%%'"
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Zw "swap-pane -t '%%'"
bind-key '@' choose-tree -Zw 'join-pane -h -s "%%"'     # join pane
bind-key '#' choose-tree -Zw 'join-pane -t "%%"'        # send pane
# bind-key @ join-pane -h -s ! # most recently visited

# swap panes around
# bind-key -r -T prefix C-M-k select-pane -U \; swap-pane -t !
# bind-key -r -T prefix C-M-j select-pane -D \; swap-pane -t !
# bind-key -r -T prefix C-M-h select-pane -L \; swap-pane -t !
# bind-key -r -T prefix C-M-l select-pane -R \; swap-pane -t !

# bind-key C-M-w command-prompt -p "Swap Current Window To? (e.g 3; 4; session_name:5)" "swap-window -t '%%'"
# bind-key C-M-p command-prompt -p "Swap Current Pane To? (e.g 2.0; session_name:4.0)" "swap-pane -t '%%'"
# bind-key M-p command-prompt -p "Move Current Pane To? (e.g 3.1; session_name:6.0)" "move-pane -t '%%'"

# ]]]

# == External Programs ======================================================= [[[
# == Youtube == M-v
bind-key Y split-window -fv \; send-keys 'youtube-viewer '
# bind-key M-v new-window -n ytfzf \;\
#     send-keys -t ytfzf 'ytfzf && tmux kill-window' 'Enter'

# == Surfraw == M-s
# bind-key -n 'C-\' new-window -n bookmarks -c $HOME \;\
#     send-keys 'fsr && tmux kill-window' 'Enter'

# bind-key Enter split-window -fv \; send-keys 'BROWSER=w3m sr '

# bind-key M-b new-window -n google \;\
#     send-keys -t google 'BROWSER=w3m sr google '

# == Neomutt == M-m
# bind-key µ new-window -n email -c $HOME \;\
#   send-keys -t email 'neomutt' 'Enter'

bind-key -n M-m new-window -n email -c $HOME \;\
    send-keys 'neomutt && tmux kill-window' 'Enter'

# newsboat -- M-r
# bind-key ® new-window -n rss -c $HOME \;\
#   send-keys -t rss 'newsboat' 'Enter'

bind-key -n M-n new-window -n rss -c $HOME \;\
    send-keys 'newsboat && tmux kill-window' 'Enter'

# task spooler -- M-t
bind-key M-t new-window -n spool -c $HOME \;\
    send-keys -t spool 'tsp -C && watch ts' 'Enter' \;\
    split-window -t spool -v \; \
    send-keys -t spool 'TS_SOCKET=/tmp/fm tsp -C && watch TS_SOCKET=/tmp/fm tsp' 'Enter' \;\
    split-window -t spool -v -p 10
# ]]]

# == Fzf Integration ======================================================== [[[
# == Buku ==
bind-key b split-window -fv \; send-keys 'bow && tmux kill-pane' 'Enter'

bind-key 'C-\' new-window -n bookmarks -c $HOME \;\
    send-keys 'bow && tmux kill-window' 'Enter'

# == Taskwarrior ==
bind-key T split-window -fv \; send-keys 'taskf && tmux kill-pane' 'Enter'

# == Tmux completion ==
# TODO: bind-key t run-shell 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words)"'
# bind-key T run-shell 'tmux send-keys -t #{pane_id} "$(tmux-fzf-words --all)"'

# Select pane
# M-0
bind-key -n M-0 run-shell "tmux-fzf-panes || :"
# TODO: # bind-key ` run-shell -b "$HOME/mybin/tmux-switch-pane.sh"

# == Testing ================================================================ [[[
# https://gist.github.com/snuggs/800936
# bind o select-layout "active-only"
# bind M-- select-layout "even-vertical"
# bind M-| select-layout "even-horizontal"

#Send command to all window
bind-key C-e command-prompt \
  -p "session?,message?" "run-shell \"tmux list-windows -t %1 \| cut -d: -f1\| xargs -I\{\} tmux send-keys -t %1:\{\} %2 Enter\""
# ]]]

# == Pane Switch ============================================================ [[[
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l
# ]]]

# bind-key 0 send-keys C-l \; run 'tmux clear-history' \; display-message "Deleted current Tmux Clipboard History"

bind-key -T root WheelUpPane \
  if-shell -Ft= '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}" "send -t= Up" "copy-mode -et="'
bind-key -T root WheelDownPane \
  if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
    'send -Mt=' \
    'if-shell -Ft= "#{alternate_on}"  "send -t= Down" "send -Mt="'

# bind -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
# bind -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# == Source ================================================================= [[[
run "$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
# ]]]

# vim: ft=tmux:et:sw=0:ts=2:sts=2:fdm=marker:fmr=[[[,]]]:
