# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet main "main()" b
int
main(int argc, const char *argv[]) {
	$0

	return 0;
}
endsnippet

snippet malloc "malloc()"
${1:type}* ${2:variable} = ($1*)malloc(sizeof($1) * ${3:n});
endsnippet

snippet once "define once" b
#ifndef ${1:`!v toupper(expand('%:t:r'))`_H}
#define $1
$0
#endif /* $1 */
endsnippet

snippet ifndef "ifndef" b
#ifndef ${1:DEFINE}
#define $1
$0
#endif /* $1 */
endsnippet

snippet if
if (${1:/* condition */}) {
	${2}
}
endsnippet

snippet do
do {
	${2:/* code */}
} while ( ${1:/* condition */} );
endsnippet

snippet wh
while (${1:/* condition */}) {
	${2:/* code */}
}
endsnippet

snippet for
for (size_t ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4:/* code */}
}
endsnippet

snippet fun
${1:void}
${2:function_name}(${3:void}) {
	${4:/* code */}
}
endsnippet

snippet stdef "struct definition" b
struct ${1:name} {
	$0;
};
endsnippet

snippet st "struct definition" b
struct ${1:name} {
	$0;
};
endsnippet

snippet stdefa "struct definition and assignment" b
struct ${1:name} {
	${2:/* fields */}
} ${3: /* variable */};
endsnippet

snippet tds "typdef struct"
typedef struct ${2:_$1 }{
	${3:/* data */}
} ${1:name};
endsnippet

snippet tde "typdef enum" b
typedef enum {
	${1:/* data */}
} ${2:foo};
endsnippet

snippet pr "printf" w
printf("${1:%s}\n"${2});${3}
endsnippet

snippet nolint "NOLINTNEXTLINE" w
// NOLINTNEXTLINE($0)
endsnippet

snippet nodiagc "#pragma clang disable" w
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-W$0"

#pragma clang diagnostic pop
endsnippet

snippet nodiagc "#pragma gcc disable" w
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-W$0"

#pragma GCC diagnostic pop
endsnippet

snippet gpl "GPL Header" b
/*
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

$0
endsnippet

snippet inc "#include" b
#include <$1>$0
endsnippet
