snippet mit "MIT license" b
MIT (c) ${1:`git config user.name`}
${2}
endsnippet

snippet c)
Copyright `&enc[:2] == "utf" ? "©" : "(c)"` `strftime("%Y")` ${1:`git config user.name`}. All Rights Reserved.
endsnippet

global !p
from vimsnippets import get_comment_format
from subprocess import check_output
from datetime import datetime
endglobal

snippet stit "Short title" b
`!p
beg, end = vim.eval("&commentstring").split('%s')
snip.rv += beg.strip() + ' '
`=== ${1:`!v printf('%s', 'title')`}`!p
snip.rv += (' ===')
`
endsnippet

snippet mtit "Medium title" b
`!p
beg, end = vim.eval("&commentstring").split('%s')
eq = '=' * 26
snip.rv += beg.strip() + ' ' + eq
` ${1:`!v printf('%s', 'title')`}`!p
snip.rv += (' ' + eq)
`
endsnippet

snippet ltit "Long title" b
`!p
beg, end = vim.eval("&commentstring").split('%s')
eq = '=' * 30
snip.rv += beg.strip() + ' ' + eq
` ${1:`!v printf('%s', 'title')`}`!p
snip.rv += (' ' + eq + "\n" + beg.strip() + ' ' + (eq * 2) + ('=' * 8))
`
endsnippet

snippet lstit "Long shorter title" b
`!p
beg, end = vim.eval("&commentstring").split('%s')
eq = '=' * 20
snip.rv += beg.strip() + ' ' + eq
` ${1:`!v printf('%s', 'title')`}`!p
snip.rv += (' ' + eq + "\n" + beg.strip() + ' ' + (eq * 2) + ('=' * 8))
`
endsnippet

snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` ${1:TODO}: $2${3: <`!v strftime('%y-%m-%d %H:%M')`, `git config user.name`>} `!p snip.rv=get_comment_format()[2]`
endsnippet

snippet today "date of today" b
`date +%F`
endsnippet

snippet yesterday "date of today" b
`[[ "$OSTYPE" =~ darwin ]] && date -v -1d +%F || date --date=yesterday +%F`
endsnippet

snippet modeline2 "# vim: set ..." b
`!p
beg, end = vim.eval("&commentstring").split('%s')
snip.rv += beg.strip() + ' '
`vim: ${2:ft=${1:`!v printf('%s', &ft)`}}`!p
snip.rv += (': ' + end.strip()).strip()
`
endsnippet

snippet modeline3 "Vim settings" b
vim:${1:filetype=$2:}${3:foldmethod=${4:marker}:}${5:${7:tabstop=${6:4}:}${9:shiftwidth=${8:4}:}${11:softtabstop=${10:4}:}${12:noexpandtab:}}
endsnippet

snippet vimsf "Vim modeline fdm=marker"
`!p snip.rv=get_comment_format()[0]` vim: ${2:ft=${1:`!v printf('%s', &ft)`}}`!v (&expandtab ? printf(':et:sw=%i:ts=%i:sts=%i', &sw, &ts, &sts) : printf(':noet:sts=%i:sw=%i:ts=%i', &sts, &sw, &ts)) . (&tw ? ':tw='. &tw:'') . ':fdm=marker:fmr=[[[,]]]:'`
endsnippet

snippet vims "Vim modeline"
`!p snip.rv=get_comment_format()[0]` vim: ${2:ft=${1:`!v printf('%s', &ft)`}}`!v (&expandtab ? printf(':et:sw=%i:ts=%i:sts=%i', &sw, &ts, &sts) : printf(':noet:sts=%i:sw=%i:ts=%i', &sts, &sw, &ts)) . (&tw ? ':tw='. &tw:'')`
endsnippet

snippet H "A header box" b
`!p
from datetime import datetime
if snip.ft in ['cpp', 'c', 'rust', 'go', 'cs']:
	u = '/' + '*' * 75
	d = '*' * 75 + '/'
	l = '%-4s' % '*'
	r = '%4s'  % '*'
else:
	c = get_comment_format()[0].strip()
	u = d = (c + '=' * 76)[:76]
	l = '%-4s' % c
	r = '%4s'  % c

username  = '%-68s' % (" Author: " + check_output(['git', 'config', 'user.name']).decode('utf-8').strip())
useremail = '%-68s' % ("  Email: " + check_output(['git', 'config', 'user.email']).decode('utf-8').strip())
time      = '%-68s' % ("Created: " + datetime.now().strftime('%F %H:%M'))

snip.rv += u
snip += l + username
snip += l + useremail
snip += l + time
snip += d
`
$0
endsnippet

snippet boxx "A nice box, fits just around text" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

# TODO:

# snippet afbox "Ansii box, wide"
# `!p
# snip.rv = get_comment_format()[0]
# snip.rv += ' ┌' + '─' * (len(t[1]) + 2) + '┐'
# snip += get_comment_format()[0]
# ` │ ${1:${VISUAL:content}} │
# `!p
# snip.rv = get_comment_format()[0]
# snip.rv += ' └' + '─' * (len(t[1]) + 2) + '┘'`
# $0
# endsnippet

# def make_box(twidth, bwidth=None):
#     b, m, e, i = (s.strip() for s in get_comment_format())
#     m0 = m[0] if m else ''
#     bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
#     sline = b + m + bwidth_inner * m0 + 2 * m0
#     nspaces = (bwidth_inner - twidth) // 2
#     mlines = i + m + " " + " " * nspaces
#     mlinee = " " + " "*(bwidth_inner - twidth - nspaces) + m
#     eline = i + m + bwidth_inner * m0 + 2 * m0 + e
#     return sline, mlines, mlinee, eline

snippet bbox "Wider box" b
`!p
if not snip.c:
	width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet abox "Ansii box, fits just around text (with comments)"
`!p
snip.rv = get_comment_format()[0]
snip.rv += ' ┌' + '─' * (len(t[1]) + 2) + '┐'
snip += get_comment_format()[0]
` │ ${1:${VISUAL:content}} │
`!p
snip.rv = get_comment_format()[0]
snip.rv += ' └' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

snippet fbox "A header box only with created" b
`!p
from datetime import datetime
if snip.ft in ['cpp', 'c', 'rust', 'go', 'cs']:
	u = '/' + '*' * 75
	d = '*' * 75 + '/'
	l = '%-4s' % '*'
	r = '%4s'  % '*'
else:
	c = get_comment_format()[0].strip()
	u = d = (c * 76)[:76]
	l = '%-4s' % c
	r = '%4s'  % c

time      = '%-68s' % ("Created: " + datetime.now().strftime('%F %H:%M'))

snip.rv += u
snip += l + time      + r
snip += d
`
$0
endsnippet

snippet fold "Insert a vim fold marker" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]`${2:1} `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldc "Insert a vim fold close marker" b
`!p snip.rv = get_comment_format()[0]` ${2:1}`!p snip.rv = foldmarker()[1]` `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet foldp "Insert a vim fold marker pair" b
`!p snip.rv = get_comment_format()[0]` ${1:Fold description} `!p snip.rv = foldmarker()[0]` `!p snip.rv = get_comment_format()[2]`
${2:${VISUAL:Content}}
`!p snip.rv = get_comment_format()[0]` `!p snip.rv = foldmarker()[1]` $1 `!p snip.rv = get_comment_format()[2]`
endsnippet

snippet shebang "Add shebang line" b
#!/usr/bin/env ${1:`!v &filetype`}
endsnippet

snippet date "YYYY-MM-DD" w
`!v strftime("%Y-%m-%d")`
endsnippet

snippet time "HH:MM" w
`!v strftime("%H:%M")`
endsnippet

snippet dtime_readable "1997 Apr 27 11:53:25" w
`!v strftime("%Y %b %d %X")`
endsnippet

snippet dtime_iso8601 "1997 Apr 27 11:53:25" w
`!v strftime("%Y-%m-%dT%H:%M:%S")`
endsnippet

snippet timestamp
`!v strftime("%Y-%m-%d %H:%M:%S")`
endsnippet

snippet lorem "Lorem ipsum" b
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer euismod ligula odio, at blandit orci facilisis in. Nam mollis odio a aliquam fringilla. Maecenas lacinia, ante quis facilisis tincidunt, libero felis laoreet est, a interdum magna justo sit amet libero. Sed purus justo, pellentesque eu lacus sit amet, iaculis dignissim felis. Curabitur euismod interdum turpis, id venenatis justo accumsan sit amet. Nulla scelerisque lectus vel justo venenatis, dictum pharetra tellus maximus. Praesent dui eros, rutrum in sapien non, luctus sollicitudin dolor. Morbi et ipsum lobortis, imperdiet orci maximus, fermentum turpis. Morbi dapibus convallis auctor. Aliquam dictum pretium varius. Cras est eros, mattis dapibus interdum quis, tempus quis odio. Praesent maximus lorem sed sem luctus porttitor at ac tellus. Mauris quis fermentum felis, lobortis placerat nibh. Sed pulvinar, quam auctor tempor commodo, turpis felis dictum neque, et gravida nunc diam eget turpis. Vestibulum et purus eget erat facilisis porta quis ut felis. Donec facilisis orci vel lectus consectetur, eget bibendum nisi suscipit.
endsnippet

snippet loremn "Lorem ipsum with newlines" b
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer euismod ligula
odio, at blandit orci facilisis in. Nam mollis odio a aliquam fringilla.
Maecenas lacinia, ante quis facilisis tincidunt, libero felis laoreet est,
a interdum magna justo sit amet libero. Sed purus justo, pellentesque eu lacus
sit amet, iaculis dignissim felis. Curabitur euismod interdum turpis, id venenatis
justo accumsan sit amet. Nulla scelerisque lectus vel justo venenatis, dictum pharetra
tellus maximus. Praesent dui eros, rutrum in sapien non, luctus sollicitudin dolor.
Morbi et ipsum lobortis, imperdiet orci maximus, fermentum turpis. Morbi dapibus
convallis auctor. Aliquam dictum pretium varius. Cras est eros, mattis dapibus interdum
quis, tempus quis odio. Praesent maximus lorem sed sem luctus porttitor at ac tellus.
Mauris quis fermentum felis, lobortis placerat nibh. Sed pulvinar, quam auctor tempor
commodo, turpis felis dictum neque, et gravida nunc diam eget turpis. Vestibulum et
purus eget erat facilisis porta quis ut felis. Donec facilisis orci vel lectus consectetur,
eget bibendum nisi suscipit.
endsnippet

snippet "lorem(([1-4])?[0-9])?" "Lorem Ipsum generator" r
`!p snip.rv = " ".join(LOREM.split()[:int(match.group(1))]) if match.group(1) else LOREM`
endsnippet

snippet uuid "Random UUID" w
`!p if not snip.c: import uuid; snip.rv = str(uuid.uuid4())`
endsnippet
