priority 1

snippet #! "#!/usr/bin/env zsh" b
#!/usr/bin/env zsh
$0
endsnippet

snippet 0h "${0:h} zsh standard" b
0="${${ZERO:-${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/$0}"
$0
endsnippet

snippet em "Emulate zsh -LR"
builtin emulate zsh -L
setopt extendedglob ${1:option}
endsnippet

snippet hascmd "If command exists..."
(( ${+commands[${1:cmd}]} )) && ${2:Do something $1}
endsnippet

snippet hasvar "If variable exists..."
(( ${+${1:variable}} )) && ${2:Do something $1}
endsnippet

# ========================== Variables ==========================
snippet default "Set default program" b
export ${1:EDITOR}="\${commands[${2:vim}]:-\$$1}"
endsnippet

snippet global "Set global variable" b
typeset -g${1:flags} ${2:var}; $2=
endsnippet

snippet local "Set global variable" b
local ${1:-flags} ${2:var}; $2=
endsnippet

snippet int "Set global variable" b
integer ${1:int}; $1=
endsnippet

# ========================== Conditions ==========================
snippet and "[[ TEST ]] &&" b
[[ ${1:condition} ]] && {
	${0:${VISUAL}}
}
endsnippet

snippet if "if condition" b
if ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if else condition" b
if ${1:condition}; then
	${2:${VISUAL}}
else
	${0:# statements}
fi
endsnippet

snippet eif "elif condition" b
elif ${1:condition}; then
	${0:${VISUAL}}
endsnippet

snippet for "c-style for loop" b
for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet fori "for .. in .." b
for ${1:item} (${2:list}[@]) {
	${0:${VISUAL}}
}
endsnippet

snippet foril "for .. in .. (long)" b
for ${1:needle} in ${2:haystack}; do
	${0:${VISUAL}}
done
endsnippet

snippet fore "foreach loop" b
foreach ${1:item} (${2:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet forel "foreach .. end" b
foreach ${1:item} (${2:list})
	${0:${VISUAL}}
end
endsnippet

snippet wh "while loop" b
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet until "until loop" b
until ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet repeat "repeat loop" b
repeat ${1:integer} {
	${0:${VISUAL}}
}
endsnippet

snippet case "case statement" b
case ${1:word} {
	(${2:pattern})
		${0}
	;;
}
endsnippet

snippet casel "case statement (long)" b
case ${1:word} in
	(${2:pattern})
		${0}
	;;
esac
endsnippet

snippet select "select statement" b
select ${1:answer} in ${2:choices}; do
	${0:${VISUAL}}
done
endsnippet

snippet pa "parenthesis" b
(${0:#statements})
endsnippet

snippet pc "curly brace" b
{${0:#statements}}
endsnippet

snippet tst "test statement" b
[[ -${1:test} ${2:value} ]]
endsnippet

snippet always "always statement" b
{
	${1:try}
} always {
	${0:always}
}
endsnippet

snippet funs "function def short" b
${1:function_name}() {
	${0:# function_body}
}
endsnippet

snippet fun "function def" b
function ${1:function_name}() {
	${0:# function_body}
}
endsnippet

snippet _z "comp starter"
#compdef z

local arguments

__display(){
        _alternative \
        'aliases:command:(('"$(_z |& awk -v q=\' '{printf "%s\\:\"%s\" ", $2,$1}')"'))' \
        'files:directory:_path_files -g ".*(/) *(/)"'
}

arguments=(
       '-c[restrict matches to subdirectories of the current directory]'
       '-e[echo the best match, do not cd]'
       '-c[show a brief help message]'
       '-l[list only]'
       '-r[match by rank only]'
       '-t[match by recent access only]'
       '-x[remove the current directory from the datafile]'
        '1:command:->command'
        '*::options:->options'
)

local curcontext="$curcontext" state state_descr line expl
local tmp ret=1

_arguments -s -C : $arguments && return 0

  case "$state" in
    command)
      __display && return 0
      ;;
    options)
      _message "no more options for $words[1]"
      return 1
    ;;
  esac

endsnippet
