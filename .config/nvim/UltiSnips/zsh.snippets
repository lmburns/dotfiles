priority 1

snippet #! "#!/usr/bin/env zsh" b
#!/usr/bin/env zsh
$0
endsnippet

snippet script "#!/usr/bin/env zsh" b
#!/usr/bin/env zsh
$0
endsnippet

snippet 0h "${0:h} zsh standard" b
0="${${ZERO:-\${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/\$0}"
$0
endsnippet

snippet 0h2 "${0:h} zsh standard alt" b
0="${${(M)\${0::=${(%):-%x}}:#/*}:-$PWD/$0}"
$0
endsnippet

snippet std "${0:h} zsh standard" b
0="${${ZERO:-\${0:#$ZSH_ARGZERO}}:-${(%):-%N}}"
0="${${(M)0:#/*}:-$PWD/\$0}"
$0
endsnippet

snippet pp "subshell or grouping (...)" b
(${0:# subshell})
endsnippet

snippet pc "execute list or just a list {...}" b
{${0:# list}}
endsnippet

# === VARIABLES ========================================================== [[[

# local        for local parameters
# left         for left justified parameters
# right_blanks for right justified parameters with leading blanks
# right_zeros  for right justified parameters with leading zeros
# lower        for parameters whose value is converted to all lower case when it is expanded
# upper        for parameters whose value is converted to all upper case when it is expanded
# readonly     for readonly parameters
# tag          for tagged parameters
# tied         for  parameters tied to another parameter
# export       for exported parameters
# unique       for arrays which keep only the first occurrence of duplicated values
# hide         for parameters with the `hide` flag
# hideval      for parameters with the `hideval` flag
# special      for special parameters defined by the shell

# if [[ "\${(t)${1:path}}" = *array* ]]; then fi
# scalar array integer float association

# === ==================================================================== [[[

# READONLY
snippet isreadonly "is readonly && {}"
(( ${${${(Mt)${1:path}:#*readonly*}:+1}:-0} )) && { $0 }
endsnippet

# SPECIAL
snippet isspecial "is special && {}"
(( ${${${(Mt)${1:path}:#*special*}:+1}:-0} )) && { $0 }
endsnippet

# LOCAL
snippet islocal "is local"
(( ${${${(Mt)${1:path}:#*local*}:+1}:-0} )) && { $0 }
endsnippet

# GLOBAL
snippet isglobal "is global"
(( ${${${(Mt)${1:path}:#*local*}:+0}:-1} )) && { $0 }
endsnippet

# EXPORT
snippet isexport "has export flag"
(( ${${${(Mt)${1:path}:#*export*}:+1}:-0} )) && { $0 }
endsnippet

# HIDE
snippet ishidden "has hide flag"
(( ${${${(Mt)${1:path}:#*hide*}:+1}:-0} )) && { $0 }
endsnippet

# HIDEVAL
snippet ishideval "has hideval flag"
(( ${${${(Mt)${1:path}:#*hideval*}:+1}:-0} )) && { $0 }
endsnippet

# UNIQUE
snippet isuniq "has unique flag"
(( ${${${(Mt)${1:path}:#*unique*}:+1}:-0} )) && { $0 }
endsnippet

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

# ARRAY
snippet isarr "is array"
(( ${${${(Mt)${1:path}:#array}:+1}:-0} )) && { $0 }
endsnippet

snippet isarra "is any kind of array"
(( ${${${(Mt)${1:path}:#*array*}:+1}:-0} )) && { $0 }
endsnippet

snippet isarrl "is local array"
(( ${${${(Mt)${1:path}:#array-local}:+1}:-0} )) && { $0 }
endsnippet

# ASSOCIATION
snippet isassoc "is associative array"
(( ${${${(Mt)${1:path}:#association}:+1}:-0} )) && { $0 }
endsnippet

snippet isassoca "is any kind of association"
(( ${${${(Mt)${1:path}:#*association*}:+1}:-0} )) && { $0 }
endsnippet

snippet isassocl "is local association"
(( ${${${(Mt)${1:path}:#association-local}:+1}:-0} )) && { $0 }
endsnippet

# SCALAR
snippet isscalar "is scalar"
(( ${${${(Mt)${1:path}:#scalar}:+1}:-0} )) && { $0 }
endsnippet

snippet isscalara "is any kind of scalar"
(( ${${${(Mt)${1:path}:#*scalar*}:+1}:-0} )) && { $0 }
endsnippet

snippet isscalarl "is local scalar"
(( ${${${(Mt)${1:path}:#scalar-local}:+1}:-0} )) && { $0 }
endsnippet

# INTEGER
snippet isint "is integer"
(( ${${${(Mt)${1:path}:#integer}:+1}:-0} )) && { $0 }
endsnippet

snippet isinta "is any kind of integer"
(( ${${${(Mt)${1:path}:#*integer*}:+1}:-0} )) && { $0 }
endsnippet

snippet isintl "is local integer"
(( ${${${(Mt)${1:path}:#integer-local}:+1}:-0} )) && { $0 }
endsnippet

# FLOAT
snippet isfloat "is float"
(( ${${${(Mt)${1:path}:#float}:+1}:-0} )) && { $0 }
endsnippet

snippet isfloata "is any kind of float"
(( ${${${(Mt)${1:path}:#*float*}:+1}:-0} )) && { $0 }
endsnippet

snippet isfloatl "is local float"
(( ${${${(Mt)${1:path}:#float-local}:+1}:-0} )) && { $0 }
endsnippet

# === VARIABLES ========================================================== [[[
# Really no difference (i don't think); just style preference (export vs typeset -gx)
snippet expp "typeset -gx var=" b
export ${1:exported}=$0
endsnippet

# Really no difference (i don't think); just style preference (export vs typeset -gx)
snippet exp "typeset -gx var=" b
typeset -gx${1:flags} ${2:exported}; $2=$0
endsnippet

snippet global "typeset -g var=" b
typeset -g${1:flags} ${2:global_var}; $2=$0
endsnippet

snippet local "local var=" b
local ${1:-flags} ${2:local_var}; $2=$0
endsnippet

snippet priv "private var=" b
private ${1:-flags} ${2:var}; $2=$0
endsnippet

snippet privi "private var= + import" b
zmodload -Fa zsh/param/private b:private
private ${1:-flags} ${2:var}; $2=$0
endsnippet

snippet reado "readonly var=" b
readonly ${1:-flags} ${2:var}; $2=$0
endsnippet

# Really no difference (i don't think); just style preference (integer vs local -i)
snippet int "integer var=" b
integer ${1:int}; $1=$0
endsnippet

# Really no difference (i don't think); just style preference (integer vs local -i)
snippet locali "local -i var=" b
local -i ${1:int}; $1=$0
endsnippet

# Really no difference (i don't think); just style preference (float vs local -F)
snippet float "float var=" b
# float [{+|-}Hghlprtux] [{+|-}EFLRZ [n]]
float ${1:float}; $1=$0
endsnippet

# Really no difference (i don't think); just style preference (float vs local -F)
snippet localf "local -F var=" b
# float [{+|-}Hghlprtux] [{+|-}EFLRZ [n]]
local -F ${1:float}; $1=$0
endsnippet
# ]]]
# ]]]


# ====================================================
snippet let "let 'expr'" b
let '${1:var}'
endsnippet

# === PREFIX ============================================================= [[[
snippet cmd "command {external command}" w
command ${1:exec} $0
endsnippet

snippet bui "builtin {shell builtin}" w
builtin ${1:print} $0
endsnippet

snippet exec "exec {command}" w
exec ${1:command} $0
endsnippet

snippet nog "noglob {command}" w
noglob ${1:command} $0
endsnippet
snippet ng "noglob {command}" w
noglob ${1:command} $0
endsnippet

snippet noc "nocorrection {command}" w
nocorrection ${1:command} $0
endsnippet

snippet do ": do assign" b
: ${1:var}
endsnippet

snippet dou ": unconditional assign" b
: ${${1:var}::=${2:val}}
endsnippet

snippet ali "alias val=''" b
alias ${1:alias}='${2:value}'
endsnippet

snippet bprint "builtin print" w
builtin print $0
endsnippet

snippet bsetopt "builtin setopt" w
builtin setopt $0
endsnippet

snippet bemulate "builtin emulate" w
builtin emulate -L zsh $0
endsnippet
# ]]]

# === EXTERNAL =========================================================== [[[
snippet zmod "zmodload -Fa zsh/module" b
zmodload -Fa zsh/${1:module}
endsnippet

snippet auto "autoload -Uz fun" b
autoload -Uz ${1:fun}
endsnippet

snippet autolthis "autoload current" b
fpath+=( $PWD/${1:file} )
autoload -Uz $1
endsnippet

snippet defer "defer -t <time> -c fun" b
defer -t ${2:3} -c ${1:fun}
endsnippet
# ]]]

# === EMULATION / OPTIONS ================================================ [[[
snippet emlr "emulate -LR zsh" b
emulate -LR zsh ${1:more} -o extendedglob
endsnippet

snippet eml "emulate -L zsh + extendedglob" b
emulate -L zsh
builtin setopt extendedglob ${1:option}
endsnippet

snippet opts "Set opts (warncreateglobal, typesetsilent, extendedglob, rcquotes, noautopushd)" b
builtin emulate -L zsh
setopt extendedglob warncreateglobal typesetsilent \
				noshortloops rcquotes noautopushd
endsnippet

snippet optsx "Set opts + xtrace (warncreateglobal, etc.)" b
builtin emulate -L zsh ${=${options[xtrace]:#off}:+-o xtrace}
setopt extendedglob warncreateglobal typesetsilent \
				noshortloops rcquotes noautopushd
endsnippet

snippet optw "Set warncreateglobal" b
builtin emulate -L zsh -o warncreateglobal
endsnippet

snippet optg "Set extendedglob" b
builtin emulate -L zsh
builtin setopt extendedglob
endsnippet
# ]]]

# === MATCHING =========================================================== [[[
snippet matchm "Setup :#(#m)" b
${(M)${1:var}:#(#m)${2}}
endsnippet

snippet subm "Setup //(#m)" b
local MATCH; integer MBEGIN MEND
${${1:var}//(#m)${2}/$MATCH}
endsnippet

snippet matchb "Setup :#(#b)" b
${(M)${1:var}:#(#b)${2}}
endsnippet

snippet subb "Setup //(#b)" b
${${1:var}//(#b)${2}/${match[1]}}
endsnippet

snippet ipriv "Import private" b
zmodload -Fa zsh/param/private b:private
endsnippet

snippet imreply "Import match, reply" b
local MATCH REPLY; integer MBEGIN MEND
local -a match mbegin mend reply
endsnippet

snippet imatch "Import match" b
local MATCH; integer MBEGIN MEND
local -a match mbegin mend
endsnippet

snippet ireply "Import reply" b
local REPLY
local -a reply
endsnippet

snippet setr "Set reply to $@" b
set -- "$reply[@]"
endsnippet
# ]]]

# === CONDITIONS ========================================================= [[[
snippet and "[[ TEST ]] &&" b
[[ ${1:condition} ]] && {
	${0:${VISUAL}}
}
endsnippet

snippet tern "String ternary" w
${${${${1:if}}:+${2:then}}:-${3:else}}
endsnippet

snippet ternm "Math ternary" w
$(( ${1:var} ? ${2:then} : ${3:else} ))
endsnippet

snippet hascmd "(( ${+commands[val]} )) && line"
(( ${+commands[${1:cmd}]} )) && { ${2:$1} }
endsnippet

snippet default "Set default program" b
export ${1:EDITOR}="\${commands[${2:vim}]:-\$$1}"
endsnippet

snippet hasfunc "[[ -v functions[val] ]] && line"
(( ${+functions[${1:cmd}]} )) && { ${2:$1} }
endsnippet

snippet has "(( $+var )) && line"
(( ${+${1:variable}} )) && ${2:$1}
endsnippet

snippet hasv "[[ -v $var ]] && line"
[[ -v $${1:variable} ]] && ${2:$1}
endsnippet

snippet hascmdb "(( ${+commands[val]} )) && block"
(( \${+commands[${1:cmd}]} )) && {
	${2:$1}
}
endsnippet

snippet hasb "(( $+var )) && block"
(( \${+${1:variable}} )) && {
	${2:$1}
}
endsnippet

snippet hasvb "[[ -v $var ]] && block"
[[ -v \$${1:variable} ]] && {
	${2:$1}
}
endsnippet

snippet istrue "is true; (( VAL )) && block"
(( ${1:val} )) && {
	${2}
}
endsnippet

snippet isfals "is false; (( ! VAL )) && block"
(( ! ${1:val} )) && {
	${2}
}
endsnippet

snippet cond "[[ CONDITION ]]" b
[[ ${1:$var1} != ${2:$var2} ]]
endsnippet

snippet tst "[[ -test CONDITION ]]" b
[[ -${1:z} ${2:value} ]]
endsnippet

snippet eq "[[ == CONDITION ]]" b
[[ ${1:$var1} == ${2:$var2} ]]
endsnippet

snippet neq "[[ != CONDITION ]]" b
[[ ${1:$var1} != ${2:$var2} ]]
endsnippet

# === IF ================================================================= [[[
snippet ifb "if condition (brace)" b
if [[ ${1:condition} ]] {
	${0:${VISUAL}}
}
endsnippet

snippet ifeb "if else condition (brace)" b
if [[ ${1:condition} ]] {
	${2:${VISUAL}}
} else {
	${0:# statements}
}
endsnippet

# =====

snippet if "if condition" b
if [[ ${1:condition} ]]; then
	${0:${VISUAL}}
fi
endsnippet

snippet ife "if else condition" b
if [[ ${1:condition} ]]; then
	${2:${VISUAL}}
else
	${0:# statements}
fi
endsnippet

snippet eif "elif condition" b
elif ${1:condition}; then
	${0:${VISUAL}}
endsnippet
# ]]]
# ]]]

# === LOOPS ============================================================== [[[
snippet for "c-style for loop" b
for (( ${2:i} = 0; $2 < ${1:count}; $2++ )); do
	${0:${VISUAL}}
done
endsnippet

snippet fori "for (...) .." b
for ${1:item} (${2:list}[@]) {
	${0:${VISUAL}}
}
endsnippet

snippet foril "for .. in .. (long)" b
for ${1:needle} in ${2:haystack}; do
	${0:${VISUAL}}
done
endsnippet

snippet fore "foreach loop" b
foreach ${1:item} (${2:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet forel "foreach .. end" b
foreach ${1:item} (${2:list})
	${0:${VISUAL}}
end
endsnippet

snippet wh "while loop" b
while ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet until "until loop" b
until ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet repeat "repeat loop" b
repeat ${1:integer} {
	${0:${VISUAL}}
}
endsnippet
# ]]]

snippet case "case statement" b
case ${1:word} {
	(${2:pattern})
		${0}
	;;
}
endsnippet

snippet casel "case statement (long)" b
case ${1:word} in
	(${2:pattern})
		${0}
	;;
esac
endsnippet

snippet select "select statement" b
select ${1:answer} in ${2:choices}; do
	${0:${VISUAL}}
done
endsnippet

snippet always "always statement" b
{
	${1:# try}
} always {
	${0:# always}
}
endsnippet

snippet alwayst "always statement (try_block = 0)" b
{
	${1:# try}
} always {
  (( TRY_BLOCK_ERROR = 0 ))
	${0:# always}
}
endsnippet

snippet funs "function def short" b
${1:function_name}() {
	${0:# function_body}
}
endsnippet

snippet fun "function def" b
function ${1:function_name}() {
	${0:# function_body}
}
endsnippet

snippet afun "anon function def" b
() {
	${1:# function_body}
}
endsnippet

snippet root "get root privilege" b
[[ $EUID -eq 0 ]] && { exec sudo -- "$0" }
endsnippet

snippet cols "COLUMNS =====" w
${(l:COLUMNS${1:var}::=:):-}
endsnippet

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

snippet _z "comp starter"
#compdef z

local args

__display(){
        _alternative \
        'aliases:command:(('"$(_z |& awk -v q=\' '{printf "%s\\:\"%s\" ", $2,$1}')"'))' \
        'files:directory:_path_files -g ".*(/) *(/)"'
}

args=(
       '-c[restrict matches to subdirectories of the current directory]'
       '-e[echo the best match, do not cd]'
       '-c[show a brief help message]'
       '-l[list only]'
       '-r[match by rank only]'
       '-t[match by recent access only]'
       '-x[remove the current directory from the datafile]'
        '1:command:->command'
        '*::options:->options'
)

local curcontext="$curcontext" state state_descr line expl
local tmp ret=1

_arguments -s -C : $args && return 0

  case "$state" in
    command)
      __display && return 0
      ;;
    options)
      _message "no more options for $words[1]"
      return 1
    ;;
  esac
endsnippet

snippet compcmd "completion with subcommands"
#compdef ${1:ZCMD}

autoload -U is-at-least

_${1:ZCMD}_commands() {
  typeset -a subcommands; subcommands=(
    "sub1:description"
  )
  _describe -t ${1:ZCMD}-commands "${1:ZCMD} commands" subcommands
}

_${1:ZCMD}() {
  integer ret=1
  local curcontext="$curcontext" descr
  local -a context line state state_descr
  local -A opt_args
  local -a argopts args

  if is-at-least 5.2; then
    argopts=(-s -S -C)
  else
    argopts=(-s -C)
  fi

  args=(
    '(: * -)'{-h,--help}'[display help message]'
    '(: * -)'{-v,--version}'[display version information]'
    ":: :_${1:ZCMD}_commands"
    "*::: :->${1:ZCMD}"
  )

  _arguments "${argopts[@]}" : "${args[@]}" && ret=0

  case $state in
    (${1:ZCMD})
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:${1:ZCMD}-command-$line[1]:"
      case $line[1] in
        (${2:ZCMD_SUB})
          _arguments "${argopts[@]}" \
            '(: * -)'{-h,--help}'[display help message]' \
    				'(: * -)'{-v,--version}'[display version information]' \
            ": :_${1:ZCMD}_${2:ZCMD_SUB}_commands" \
            "*::: :->${1:ZCMD}-${2:ZCMD_SUB}" \
            && ret=0
        ;;
      esac
  esac

  return ret
}

_${1:ZCMD} "$@"
endsnippet

snippet compcmd2 "completion with subcommands that have subcommands"
#compdef ${1:ZCMD}

autoload -U is-at-least

_${1:ZCMD}_${2:ZCMD_SUB}_commands() {
  typeset -a ${2:ZCMD_SUB}_commands; ${2:ZCMD_SUB}_commands=(
    "subsub1:description"
  )
  _describe -t ${2:ZCMD_SUB}-commands "${2:ZCMD_SUB} commands" ${2:ZCMD_SUB}_commands
}

_${1:ZCMD}_commands() {
  typeset -a subcommands; subcommands=(
    "sub1:description"
  )
  _describe -t ${1:ZCMD}-commands "${1:ZCMD} commands" subcommands
}

_${1:ZCMD}() {
  integer ret=1
  local curcontext="$curcontext" descr
  local -a context line state state_descr
  local -A opt_args
  local -a argopts

  if is-at-least 5.2; then
    argopts=(-s -S -C)
  else
    argopts=(-s -C)
  fi

  args=(
    '(: * -)'{-h,--help}'[display help message]'
    '(: * -)'{-v,--version}'[display version information]'
    ":: :_${1:ZCMD}_commands"
    "*::: :->${1:ZCMD}"
  )

  _arguments "${argopts[@]}" : "${args[@]}" && ret=0

  case $state in
    (${1:ZCMD})
      words=($line[1] "${words[@]}")
      (( CURRENT += 1 ))
      curcontext="${curcontext%:*:*}:${1:ZCMD}-command-$line[1]:"
      case $line[1] in
        (${2:ZCMD_SUB})
          _arguments "${argopts[@]}" \
            '(: * -)'{-h,--help}'[display help message]' \
    				'(: * -)'{-v,--version}'[display version information]' \
            ": :_${1:ZCMD}_${2:ZCMD_SUB}_commands" \
            "*::: :->${1:ZCMD}-${2:ZCMD_SUB}" \
            && ret=0

          case $state in
            (${1:ZCMD}-${2:ZCMD_SUB})
              words=( $line[1] "${words[@]}" )
              (( CURRENT += 1 ))
              curcontext="${curcontext%:*:*}:${1:ZCMD}-${2:ZCMD_SUB}-$line[1]:"
              case $line[1] in
                (${3:ZCMD_SUBSUB})
                  _arguments "${argopts[@]}" \
                    '(: * -)'{-h,--help}'[display help message]' \
    				'(: * -)'{-v,--version}'[display version information]' \
                    && ret=0
                  ;;
              esac
            ;;
          esac
        ;;
      esac
  esac

  return ret
}

_${1:ZCMD} "$@"
endsnippet
