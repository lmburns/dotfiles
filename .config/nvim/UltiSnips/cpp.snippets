snippet try "try...catch block" b
try {
	${VISUAL}$0
} catch(${1:std::exception& e}) {
	${2:std::cerr << e.what() << std::endl;}
}
endsnippet

snippet usage "display usage..." b
if (argc != ${1:2}) {
	std::cerr << "Usage: " << argv[0] << " <${2:argument}>" << std::endl;
	return 1;
}$3
endsnippet


snippet once "add #pragma once to header" b
#pragma once


endsnippet

snippet cls "class..." b
class ${1:ClassName} {
public:
private:
};
endsnippet

# 生成和file同名的类
snippet classfile "An entire .h generator" b
#pragma once

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`} {
public:

private:

};
endsnippet

snippet vm "main()..." b
int main() {
	$0
}
endsnippet

snippet main "main(int argc, char **argv)..." b
int main(int argc, char **argv) {
	$0
}
endsnippet

snippet ns "using namespace std;" b
using namespace std;

$0
endsnippet

snippet cerr "std::cerr << ... << std::endl;" b
std::cerr << ${0} << std::endl;
endsnippet

snippet debug "insert debug statement" b
std::cerr << "[debug] " << ${0} << std::endl;
endsnippet

snippet info "insert info statement" b
std::cerr << "[info] " << ${0} << std::endl;
endsnippet

snippet error "insert error statement" b
std::cerr << "[error] " << ${0} << std::endl;
endsnippet

snippet sv "std::vector<T>" i
std::vector<${1:int}>$2
endsnippet

snippet cs "const std::string &" i
const std::string &$1
endsnippet

snippet ss "std::string" i
std::string$1
endsnippet

snippet pvec "ostream << vector<T>" b
template <typename T>
ostream &operator<<(ostream &os, const vector<T> &v) {
	os << '[';
	char comma[]{'\0', ' ', '\0'};
	for (const auto &e : v) {
		os << comma << e;
		comma[0] = ',';
	}
	return os << ']';
}

endsnippet

snippet "(echo|cout)" "cout << ... << endl;" br
$3cout << ${1:"${2:Hello, world!}"} << ${3:std::}endl;
endsnippet

snippet elapsed
duration<double>(system_clock::now() - start).count()
endsnippet

snippet fun_elapsed
auto elapsed(const decltype(system_clock::now()) &start) {
	return duration<double>(system_clock::now() - start).count();
}
endsnippet
snippet stream_status "Print stream status" b
void ${1:stream_status}(const std::ios &stream) {
	std::cout << "good: " << stream.good() << std::endl;
	std::cout << " eof: " << stream.eof()  << std::endl;
	std::cout << "fail: " << stream.fail() << std::endl;
	std::cout << " bad: " << stream.bad()  << std::endl;
}
endsnippet
